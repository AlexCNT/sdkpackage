/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2014, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */


/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the blog thread http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/16/design-studio-sdk--bial-fornext-loop-and-my-first-github-co-author-attempt
 * 
 * Authors: Michael Howles, Scn Community Contributors
 */
class org.scn.community.utils.Array extends org.scn.community.shared.Component {  
	
	/**
	Returns the array content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3" array:
	<code>
	var content = ARRAY_1.getValuesAsValueTextArray();<br>
	<br>
	// a loop for all values<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(""+ index, element.value + "( " + index + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: 0; value: k1 ( 0 )</li>
		<li>key: 1; value: k2 ( 1 )</li>
		<li>key: 2; value: k3 ( 2 )</li></ul>
	</example>
	*/
	org.scn.community.shared.ValueTextArray getValuesAsValueTextArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"value": items[i].value, 
				"text": items[i].value
			};
			
			a.push(itemDef);
		}
		
		return a;
	*}

	/**
	Returns the array content as loopable array. The element is directly containing the string value.
	Pro: compatible to the API in other scripts where object "ValueTextArray" is expected.
	<example>
	You want to loop at the "k1;k2;k3" array:
	<code>
	var content = ARRAY_1.getValuesAsSimpleValueTextArray();<br>
	<br>
	// a loop for all values<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(""+ index, element + "( " + index + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: 0; value: k1 ( 0 )</li>
		<li>key: 1; value: k2 ( 1 )</li>
		<li>key: 2; value: k3 ( 2 )</li></ul>
	</example>
	
	<example>
	You want to pass the content of the array directly to chart selection.
	<code>
	var valuesAsArray = ARRAY_1.getValuesAsSimpleValueTextArray();<br>
	CHART_1.setDataSelection( {<br>
 		"<your dimension>": valuesAsArray<br>
	});<br>
	</code>
	This CHART will get the corresponding selection<br>
	</example>
	*/
	StringArray getValuesAsSimpleStringArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = items[i].value;
			
			a.push(itemDef);
		}
		
		return a;
	*}
	
	/**
	Generates an array of integers for use in BIAL forEach statement in order to emulate a traditional for loop.
	<example>
	Fill a list box with 10 values:
	<code>ARRAY_1.eaches(0, 9, 1).forEach(function(element, index) {<br>
	LISTBOX_1.addItem(element, "Item " + (element + "") );<br>
	});</code>
	This would be equivalent to a loop in JavaScript:
	<code>
	for(var element = 0;element<=9;element++){<br>
		Your code here.<br>
	}
	</code>
	</example>
	*/
	Array eaches(/*Starting int*/ int start, /* Ending int */ int finish, /* Interval increment */int interval) {*
		var a = [];
		for(var i=start;i<=finish;i+=interval){
			a.push(i);
		}
		return a;
	*}

	/**
	Returns all values as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 values ["v1", "v2", "v3"]:
	<code>
	var valuesAsString = ARRAY_1.getValues ("|");<br>
	</code>
	
	The "valuesAsString" has now "v1|v2|v3" as content.
	</example>
	*/
	String getValues (
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].value);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}
	
	/**
	Creates an array of requested length with integers as values (starting at 0). 
	<example>
	You want an array with length 7:
	<code>
	ARRAY_1.createArray(7);<br>
	</code>
	This array has now following values: 0,1,2,3,4,5,6,7
	</example>
	*/
	void createArray (
			/**length*/ int lenght) {*
		var items = [];
			
		for(var i=0; i<lenght; i++){
			var itemDef = {
				"value" : "" + i,
				"text" : "" + i
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}
	
	/**
	 * Removes all Values (clears the array)
	 */
	void removeAllValues () {*
		var items = [];
		this.items = JSON.stringify(items);  
	*}

	/**
	Sets values of the array by string. Optionally a given separator can be specified. This implementation of array allows duplicate keys.
	<example>
	You want to set the string "k1;k2;k3" array:
	<code>
	ARRAY_1.setValues("k1;k2;k3", ";");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void setValues (
			/**values*/ String values,
			/**separator*/ optional String separator) {*  
		var items = [];
	
		if(separator == undefined) {
			separator = ",";
		}
			
		var v = values.split(separator);
		
		for(var i=0; i<v.length; i++){
			var itemDef = {
				"value" : v[i],
				"text" : v[i]
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}

	/**
	Adds a value to new or existing array. This implementation of array allows duplicate keys.
	<example>
	You want to create an "k1,k2,k3" array:
	<code>
	ARRAY_1.addValue("k1");<br>
	ARRAY_1.addValue("k2");<br>
	ARRAY_1.addValue("k3");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void addValue (
			/*value*/ String value) {*  
		
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		var itemDef = {
			"value" : value,
			"text" : value
		};
		
		a.push(itemDef);
		
		this.items = JSON.stringify(a);  
	*}
	
	/**
	 * Returns length of current array
	 */
	int getLength() {*  
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		return a.length;  
	*}  

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "N/A" is given back.
	<example>
	You have an "k1,k2,k3" array and want to get value at index 1:
	<code>
	var value1 = ARRAY_1.getValueByIndex(1);<br>
	</code>
	Now "value1" is set to "k2".
	</example>
	*/
	String getValueByIndex ( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		var r = "N/A";  
		if(a.length>index){  
			r = a[index].value;  
		}
		
		return r;  
	*}
	
	/**
	 * Fills the content of this array into given selection component
	 <example>
	 You want to fill the dropdown with the content
	 <code>
	 ARRAY.fillIntoSelectionComponent(DROPDOWN, 30);
	 </code>
	 Now the dropdown is filled in with given values
	 </example>
	 */
	void fillIntoSelectionComponent(/**Component which should be filled*/SelectionComponent selectionComponent, /**max members*/ optional int maxMembers) {*
		selectionComponent.removeAllItems();
		
		var that = this;
		
		var l = {};
		l.list = this.getValuesAsValueTextArray(maxMembers);
		
		if(this.isDebug()) { DEBUG.inspectZtl(that, l)};
		for(var i=0;i<l.list.length;i++){
			selectionComponent.addItem(l.list[i].value, l.list[i].text);
		}
		
		if(this.isDebug()) { DEBUG.inspectZtl(that, l)};
	*}
}
/**
 * Class for ClientInformation
 */
class org.scn.community.utils.ClientInformation extends org.scn.community.shared.Component {
	
	/**
	 * Reload Explicit Position Data
	 */
	void reload() {*
		if(this.reloadRequest != "+") {
			this.reloadRequest = "+";	
		} else {
			this.reloadRequest = "-";
		}
	*}
	
	/**
	 * Returns the width of the browser window
	 */
	int getWindowWidth () {*
		return this.windowWidth;
	*}
	
	/**
	 * Returns the height of the browser window
	 */
	int getWindowHeight () {*
		return this.windowHeight;
	*}
	
	/**
	 * Returns the width of the own size
	 */
	int getOwnWidth () {*
		return this.ownWidth;
	*}
	
	/**
	 * Returns the height of the own size
	 */
	int getOwnHeight () {*
		return this.ownHeight;
	*}
	
	/**
	 * Returns the html visibility
	 */
	boolean isHtmlVisible () {*
		return this.htmlVisible;
	*}
	
	/** Returns the information about appCodeName*/
	String getAppCodeName () {*
		return JSON.parse(this.information).appCodeName;
	*}

	/** Returns the information about appName*/
	String getAppName () {*
		return JSON.parse(this.information).appName;
	*}

	/** Returns the information about appVersion*/
	String getAppVersion () {*
		return JSON.parse(this.information).appVersion;
	*}

	/** Returns the information about language*/
	String getLanguage () {*
		return JSON.parse(this.information).language;
	*}

	/** Returns the information about platform*/
	String getPlatform () {*
		return JSON.parse(this.information).platform;
	*}

	/** Returns the information about product*/
	String getProduct () {*
		return JSON.parse(this.information).product;
	*}

	/** Returns the information about userAgent*/
	String getUserAgent () {*
		return JSON.parse(this.information).userAgent;
	*}

	/** Returns the information about verndor*/
	String getVerndor () {*
		return JSON.parse(this.information).verndor;
	*}

	/** Returns the information about Screen Width*/
	int getScreenWidth () {*
		return JSON.parse(this.information).width;
	*}

	/** Returns the information about Screen Height*/
	int getScreenHeight () {*
		return JSON.parse(this.information).height;
	*}

	/** Returns the information about Screen Colors Depth*/
	int getScreenColorsDepth () {*
		return JSON.parse(this.information).colors;
	*}
	
	/** Returns the browser type (CHROME | SAFARI | MOZILLA | IE) */
	org_scn_community_shared_BrowserEnumfield getBrowser () {*
		var info = JSON.parse(this.information);
		var browserInfo = info.browserInfo;
		
		return browserInfo.browser;
	*}

	/** Returns true if the browser is a mobile browser */
	boolean isMobileBrowser () {*
		var info = JSON.parse(this.information);
		var browserInfo = info.browserInfo;
		
		return browserInfo.mobile;
	*}

	/** Returns the browser version */
	String getBrowserVersion () {*
		var info = JSON.parse(this.information);
		var browserInfo = info.browserInfo;
		
		return browserInfo.version;
	*}

	/** Returns the full browser version */
	String getBrowserFullVersion () {*
		var info = JSON.parse(this.information);
		var browserInfo = info.browserInfo;
		
		return browserInfo.fVersion;
	*}

	/** Returns the information about geo latitude*/
	float getGeoLatitude () {*
		var geo = JSON.parse(this.geoLocation);
		
		if(geo.ok) {
			return geo.latitude;
		} else {
			return -999;
		}
	*}

	/** Returns the information about geo longitude*/
	float getGeoLongitude () {*
		var geo = JSON.parse(this.geoLocation);
	
		if(geo.ok) {
			return geo.longitude;
		} else {
			return -999;
		}
	*}

	/** Returns the information about geo accuracy*/
	int getGeoAccuracy () {*
		var geo = JSON.parse(this.geoLocation);
	
		if(geo.ok) {
			return geo.accuracy;
		} else {
			return -999;
		}
	*}
}
/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the discussion thread http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/12/design-studio-sdk--get-topbottom-n-rankings-with-a-little-less-code
 * 
 * Authors: Michael Howles, Scn Community Contributors
 */
class org.scn.community.utils.Collection extends org.scn.community.shared.Component {  
	
	/**
	Returns the collection content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2" collection:
	<code>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.key, element.label + "( " + element.value + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: k1; value: l1 ( 12.4 )</li>
		<li>key: k2; value: l2 ( 25.1 )</li>
		<li>key: k3; value: l3 ( 94.2 )</li></ul>
	</example>
	*/
	org.scn.community.shared.KeyLabelValueArray getAsKeyLabelValueArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var a = []; 
		if(s!="") a = JSON.parse(s);
		
		var tempA = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0 || maxMembers > a.length) {
			maxMembers = a.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"key": a[i].key, 
				"label": a[i].label,
				"value": a[i].value
			};
			
			tempA.push(itemDef);
		}
		
		return tempA;
	*}

	/**
	Returns the collection content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2" collection:
	<code>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.key, element.label + "( " + element.value + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: k1; value: l1 ( 12.4 )</li>
		<li>key: k2; value: l2 ( 25.1 )</li>
		<li>key: k3; value: l3 ( 94.2 )</li></ul>
	</example>
	*/
	org.scn.community.shared.KeyLabelValuePropertyArray getAsKeyLabelValuePropertyArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var a = []; 
		if(s!="") a = JSON.parse(s);
		
		var tempA = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0 || maxMembers > a.length) {
			maxMembers = a.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"key": a[i].key, 
				"label": a[i].label,
				"value": a[i].value,
				"prop1": a[i].prop1,
				"prop2": a[i].prop2,
				"prop3": a[i].prop3
			};
			
			tempA.push(itemDef);
		}
		
		return tempA;
	*}

	/**
	 * Removes all Items (clears the collection)
	 */
	void removeAllItems () {*
		var a = [];
		this.items = JSON.stringify(a);  
	*}
			
	/**
	Sets items of the array by 2 strings: for keys, labels, values. Optionally a given separator can be specified. This implementation of collection allows duplicate keys.
	Values must be float numbers. The content length is equal with number of keys. in case labels or values are shorter, correspondingly an empty label or 0.0 will be inserted. 
	<example>
	You want to set the string "k1;k2;k3" array:
	<code>
	COLLECTION_1.setItems("k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2", ";");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void setItems (
			/*keys*/ String keys, 
			/*labels*/ String labels, 
			/*values*/ String values,
			/*separator*/ optional String separator,
			/*optional prop 1 array*/ optional String prop1s,
			/*optional prop 2 array*/ optional String prop2s,
			/*optional prop 3 array*/ optional String prop3s) {*  
		var a = [];
	
		if(separator == undefined) {
			separator = ",";
		}
			
		if(prop1s == undefined) {
			prop1s = "";
		}
		if(prop2s == undefined) {
			prop2s = "";
		}
		if(prop3s == undefined) {
			prop3s = "";
		}
		
		var k = keys.split(separator);  
		var l = labels.split(separator);  
		var v = values.split(separator);
		
		var p1 = prop1s.split(separator);
		var p2 = prop2s.split(separator);
		var p3 = prop3s.split(separator);
		
		while(k.length>l.length) l.push("");  
		while(k.length>v.length) v.push("0");
		
		while(k.length>p1.length) p1.push("");
		while(k.length>p2.length) p2.push("");
		while(k.length>p3.length) p3.push("");

		for(var i=0; i<k.length; i++){
			var itemDef = {
				"key" : k[i],
				"label" : l[i],  
				"value" : v[i],
				"prop1": p1[i],
				"prop2": p2[i],
				"prop3": p3[i]
			};
			
			a.push(itemDef);
		}
		
		this.items = JSON.stringify(a);  
	*}  

	/**
	Adds a value to new or existing array. This implementation of collection allows duplicate keys. 
	<example>
	You want to create an "k1,k2,k3" array:
	<code>
	COLLECTION_1.addItem("k1", "l1", 45.75);<br>
	COLLECTION_1.addItem("k2", "l2", 11.21);<br>
	COLLECTION_1.addItem("k3", "l3", 85.439);<br>
	</code>
	This array has now following elements with keys: k1,k2,k3
	</example>
	*/
	void addItem (
			/*key*/ String key, 
			/*label*/ String label, 
			/*value*/ float value,
			/*optional prop 1*/ optional String prop1,
			/*optional prop 2*/ optional String prop2,
			/*optional prop 3*/ optional String prop3) {*  
		
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		if(prop1 == undefined) {
			prop1 = "";
		}
		if(prop2 == undefined) {
			prop2 = "";
		}
		if(prop3 == undefined) {
			prop3 = "";
		}
		
		var itemDef = {
			"key" : key,
			"label" : label,  
			"value" : value,
			"prop1" : prop1,
			"prop2" : prop2,
			"prop3" : prop3
		};
		
		a.push(itemDef);
		
		this.items = JSON.stringify(a);  
	*}

	/**
	Returns all keys as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with keys ["K1", "K2", "K3"]:
	<code>
	var keysAsString = COLLECTION_1.getKeys ("|");<br>
	</code>
	
	The "keysAsString" has now "K1|K2|K3" as content.
	</example>
	*/
	String getKeys(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);

		var tempA = [];
		
		for(var i=0;i<a.length;i++){  
			tempA.push(a[i].key);  
		}
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return tempA.join(separator);  
	*}

	/**
	Returns all labels as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with labels ["L1", "L2", "L3"]:
	<code>
	var labelsAsString = COLLECTION_1.getLabels ("|");<br>
	</code>
	
	The "labelsAsString" has now "L1|L2|L3" as content.
	</example>
	*/
	String getLabels(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);

		var tempA = [];
		
		for(var i=0;i<a.length;i++){  
			tempA.push(a[i].label);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return tempA.join(separator);  
	*}

	/**
	Returns all values as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with values ["11.4", "87.66", "147.41"]:
	<code>
	var valuesAsString = COLLECTION_1.getValues ("|");<br>
	</code>
	
	The "valuesAsString" has now "11.4|87.66|147.41" as content.
	</example>
	*/
	String getValues(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);

		var tempA = []; 
		
		for(var i=0;i<a.length;i++){  
			tempA.push(a[i].value);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return tempA.join(separator);  
	*}

	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByKey(optional org_scn_community_shared_SortDirectionEnumfield direction) {*
		if(direction == org_scn_community_shared_SortDirection.DESCENDING) {
			this.sortByKeyDescending();
			return;
		}
	
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.key>b.key;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  

	/**
	 * Sorts the collection by key (descending)
	 */
	void sortByKeyDescending() {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return (b.key>a.key);  
		});  
		
		this.items = JSON.stringify(a);  
	*}

	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByLabel(optional org_scn_community_shared_SortDirectionEnumfield direction) {*
		if(direction == org_scn_community_shared_SortDirection.DESCENDING) {
			this.sortByLabelDescending();
			return;
		}

		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.label>b.label;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  
		
	/**
	 * Sorts the collection by labels (descending)
	 */
	void sortByLabelDescending() {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s); 
		
		a.sort(function(a,b){  
			return (b.label>a.label);  
		});  
		
		this.items = JSON.stringify(a);  
	*}
		
	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByValue(optional org_scn_community_shared_SortDirectionEnumfield direction) {*
		if(direction == org_scn_community_shared_SortDirection.DESCENDING) {
			this.sortByValueDescending();
			return;
		}

		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s); 
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newA-newB;  
		});
		
		this.items = JSON.stringify(a);  
	*}  

	/**
	 * Sorts the collection by values (descending)
	 */
	void sortByValueDescending() {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newB-newA;  
		});
		
		this.items = JSON.stringify(a);  
	*}  
	
	/**
	 * Returns length of current collection
	 */
	int getLength() {*  
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		return a.length;  
	*}  

	/**
	Returns key by given index. Indices are 0-based. In case the index does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with label "Value for Key 2" at index 1 and want to get value at index 1:
	<code>
	var key1 = COLLECTION_1.getKeyByIndex(1);<br>
	</code>
	Now "key1" is set to String "Value for Key 2".
	</example>
	*/
	String getKeyByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);   
		var r = "N/A";
		
		if(a.length>index){  
			r = a[index].key;  
		}
		
		return r;  
	*}
	
	/**
	Returns index by given key. In case the key does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "Value for Key 2" at index 1 (key == "k2") and want to get index at key "k2":
	<code>
	var index1 = COLLECTION_1.getIndexByKey("k2");<br>
	</code>
	Now "index1" is set to float "1".
	</example>
	*/
	int getIndexByKey( 
			/* index */ String key) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		var r = "N/A";
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = i;
				break;
			}
		}
		
		return r;  
	*}
	
	/**
	Returns label by given index. Indices are 0-based. In case the index does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with label "Value for Key 2" at index 1 and want to get value at index 1:
	<code>
	var label1 = COLLECTION_1.getLabelByIndex(1);<br>
	</code>
	Now "label1" is set to String "Value for Key 2".
	</example>
	*/
	String getLabelByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);   
		var r = "N/A";
		
		if(a.length>index){  
			r = a[index].label;  
		}
		
		return r;  
	*}

	/**
	Returns label by given key. In case the key does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "Value for Key 2" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var label1 = COLLECTION_1.getLabelByKey("k2");<br>
	</code>
	Now "label1" is set to float "Value for Key 2".
	</example>
	*/
	String getLabelByKey( 
			/* index */ String key) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		var r = "N/A";
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].label;
				break;
			}
		}
		
		return r;  
	*}

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "NaN" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 and want to get value at index 1:
	<code>
	var value1 = COLLECTION_1.getValueByIndexAsString(1);<br>
	</code>
	Now "value1" is set to String "54.48".
	</example>
	*/
	String getValueByIndexAsString( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		var r = "NaN";  
		
		if(a.length>index){  
			r = a[index].value;  
		}  
		
		return r;  
	*}  

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "0.0" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 and want to get value at index 1:
	<code>
	var value1 = COLLECTION_1.getValueByIndex(1);<br>
	</code>
	Now "value1" is set to float "54.48".
	</example>
	*/
	float getValueByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  		
		
		var r = 0.0;  
		if(a.length>index){  
			r = a[index].value;  
		}
		
		return r;  
	*}

	/**
	Returns value by given key. In case the index does not exist, "NaN" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var value1 = COLLECTION_1.getValueByKeyAsString("k2");<br>
	</code>
	Now "value1" is set to String "54.48".
	</example>
	*/
	String getValueByKeyAsString( 
			/* key */ String key) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		var r = "NaN";  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
				break;
			}
		}
		
		return r;  
	*}  

	/**
	Returns value by given key. In case the index does not exist, "0.0" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var value1 = COLLECTION_1.getValueByKey("k2");<br>
	</code>
	Now "value1" is set to float "54.48".
	</example>
	*/
	float getValueByKey(
			/* index */ String key) {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
		var r = 0.0;  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
				break;
			}
		}
		
		return r;  
	*}

	/**
	Returns the current size.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 (key == "k2") and want to get the size:
	<code>
	var size = COLLECTION_1.size();<br>
	</code>
	Now "size" is set to integer "3".
	</example>
	*/
	int size() {*  
		var s = this.items;  
		var a = [];
		if(s!="") a = JSON.parse(s);  
			
		return a.length;  
	*}
	
	/**
	 * Fills the content of this array into given selection component
	 <example>
	 You want to fill the dropdown with the content
	 <code>
	 COLLECTION.fillIntoSelectionComponent(DROPDOWN, 30);
	 </code>
	 Now the dropdown is filled in with given values
	 </example>
	 */
	void fillIntoSelectionComponent(SelectionComponent selectionComponent, /**max members*/ optional int maxMembers) {*
		selectionComponent.removeAllItems();
		
		var that = this;
		
		var l = {};
		l.list = this.getAsKeyLabelValueArray(maxMembers);
		
		if(this.isDebug()) { DEBUG.inspectZtl(that, l)};
		for(var i=0;i<l.list.length;i++){
			selectionComponent.addItem(l.list[i].key, l.list[i].label);
		}
		
		if(this.isDebug()) { DEBUG.inspectZtl(that, l)};
	*}
}

/**
 * Class for ComponentManager
 */
class org.scn.community.utils.ComponentManager extends org.scn.community.shared.Component {

	/**
	 * Adds a data source to group by name
	 * Allows grouping of data sources
	 * <example>
	 * You want to group 2 data sources for dynamic access, so first add both to a common group
	 * <code>
	 * COMPONENTMANAGER_1.addDataSourceToGroup("SALES", "DS_SALE_1");
	 * COMPONENTMANAGER_1.addDataSourceToGroup("SALES", "DS_SALE_PRE");
	 * </code>
	 * </example>
	 * Now, you can process with the method "getDataSourcesFromGroup"
	 */
	void addDataSourceToGroup (String group, String dataSourceName) {*
		this.addComponentToGroup(group, dataSourceName);
	*}

	/**
	 * Adds a component to group by name
	 * Allows grouping of components
	 * <example>
	 * You want to group 3 components for dynamic access, so first add both to a common group
	 * <code>
	 * COMPONENTMANAGER_1.addComponentToGroup("ACCEPT_BUTTONS", "SALES_BUTTON_ACCEPT");
	 * COMPONENTMANAGER_1.addComponentToGroup("ACCEPT_BUTTONS", "REVENUE_BUTTON_ACCEPT");
	 * COMPONENTMANAGER_1.addComponentToGroup("ACCEPT_BUTTONS", "ANOTHER_BUTTON_ACCEPT");
	 * </code>
	 * </example>
	 * Now, you can process with the method "getComponentsFromGroup"
	 */
	void addComponentToGroup (String group, String componentName) {*
		var componentsJson = JSON.parse(this.components);
		
		if(componentsJson[group] == undefined) {
			componentsJson[group] = [];
		}
		
		componentsJson[group].push(componentName);
		
		this.components = JSON.stringify(componentsJson);
	*}

	/**
	 * Removes a data source from group by name
	 * Allows grouping of data sources
	 * <example>
	 * You want to remove data source from dynamic access
	 * <code>
	 * COMPONENTMANAGER_1.removeDataSourceFromGroup("SALES", "DS_SALE_1");
	 * </code>
	 * </example>
	 * Now, you can process with the method "getDataSourcesFromGroup"
	 */
	void removeDataSourceFormGroup (String group, String dataSourceName) {*
		this.removeComponentFromGroup(group, dataSourceName);
	*}

	/**
	 * Removes a component to group by name
	 * Allows grouping of components
	 * <example>
	 * You want to remove component from dynamic access
	 * <code>
	 * COMPONENTMANAGER_1.removeComponentFromGroup("ACCEPT_BUTTONS", "SALES_BUTTON_ACCEPT");
	 * </code>
	 * </example>
	 * Now, you can process with the method "getComponentsFromGroup"
	 */
	void removeComponentFromGroup (String group, String componentName) {*
		var componentsJson = JSON.parse(this.components);
		
		if(componentsJson[group] == undefined) {
			componentsJson[group] = [];
			return;
		}
		
		for (var i = 0; i < componentsJson[group].length ; i++){
			var componentHolder = {};
			componentHolder.name = componentsJson[group][i];
			
			if(componentHolder.name == componentName) {
				componentsJson[group].splice(i, 1);
			}
		}		
		
		this.components = JSON.stringify(componentsJson);
	*}

	/**
	 * Adds a data source to group by object reference
	 * Allows grouping of data sources
	 * <example>
	 * You want to group 2 data sources for dynamic access, so first add both to a common group
	 * <code>
	 * COMPONENTMANAGER_1.addDataSourceToGroup("SALES", DS_SALE_1);
	 * COMPONENTMANAGER_1.addDataSourceToGroup("SALES", DS_SALE_PRE);
	 * </code>
	 * </example>
	 * Now, you can process with the method "getDataSourcesFromGroup"
	 */
	void addDataSourceReferenceToGroup (String group, DataSourceAlias dataSource) {*
		this.addComponentToGroup(group, dataSource.getOwner().getName());
	*}

	/**
	 * Adds a component to group by object reference
	 * Allows grouping of components
	 * <example>
	 * You want to group 3 components for dynamic access, so first add both to a common group
	 * <code>
	 * COMPONENTMANAGER_1.addComponentToGroup("ACCEPT_BUTTONS", SALES_BUTTON_ACCEPT);
	 * COMPONENTMANAGER_1.addComponentToGroup("ACCEPT_BUTTONS", REVENUE_BUTTON_ACCEPT);
	 * COMPONENTMANAGER_1.addComponentToGroup("ACCEPT_BUTTONS", ANOTHER_BUTTON_ACCEPT);
	 * </code>
	 * </example>
	 * Now, you can process with the method "getComponentsFromGroup"
	 */
	void addComponentReferenceToGroup (String group, Component component) {*
		this.addComponentToGroup(group, component.getOwner().getName());
	*}
	
	/**
	 * Removes a data source to group by object reference
	 * Allows grouping of data sources
	 * <example>
	 * You want to remove data sources from dynamic access
	 * <code>
	 * COMPONENTMANAGER_1.removeDataSourceReferenceFromGroup("SALES", DS_SALE_1);
	 * </code>
	 * </example>
	 * Now, you can process with the method "getDataSourcesFromGroup"
	 */
	void removeDataSourceReferenceFromGroup (String group, DataSourceAlias dataSource) {*
		this.removeComponentFromGroup(group, dataSource.getOwner().getName());
	*}

	/**
	 * Removes a component to group by object reference
	 * Allows grouping of components
	 * <example>
	 * You want to remove component from dynamic access
	 * <code>
	 * COMPONENTMANAGER_1.removeComponentReferenceFromGroup("ACCEPT_BUTTONS", SALES_BUTTON_ACCEPT);
	 * </code>
	 * </example>
	 * Now, you can process with the method "getComponentsFromGroup"
	 */
	void removeComponentReferenceFromGroup (String group, Component component) {*
		this.removeComponentFromGroup(group, component.getOwner().getName());
	*}

	/**
	 * Returns array of data sources from the group
	 * Allows work on grouped data sources in dynamic way
	 * <example>
	 * You want to group copy filters from DS_1 to all data sources in the group
	 * <code>
	 *  var components = COMPONENTMANAGER_1.getDataSourcesFromGroup("SALES");
	 *	
	 *	components.forEach(function(element, index) {
	 *	  var name = element.name;
	 *	  
	 *	  var ds = COMPONENTMANAGER_1.getDataSourceByName(name);
	 *	  
	 *	  ds.copyFilters(DS_1);
	 *	});
	 * </code>
	 * </example>
	 * Now, you have replicated the filters in dynamic way
	 */
	org.scn.community.shared.DataSourceArray getDataSourcesFromGroup (String group) {*
		return getComponentsFromGroup(group);
	*}
	
	/**
	 * Returns array of components from the group
	 * Allows work on grouped components in dynamic way
	 * <example>
	 * You want to change the text of all components in group
	 * <code>
	 *  var components = COMPONENTMANAGER_1.getComponentsFromGroup("ACCEPT_BUTTONS");
	 *	
	 *	components.forEach(function(element, index) {
	 *	  var name = element.name;
	 *	  
	 *	  var comp = COMPONENTMANAGER_1.getComponentByName(name);
	 *	  // you need to know the type...
	 *	  var button = COMPONENTMANAGER_1.returnAsButton(comp);
	 *
	 *	  button.setText("Accept Now");
	 *	});
	 * </code>
	 * </example>
	 * Now, you have changed the text of all components in this group in dynamic way
	 */
	org.scn.community.shared.ComponentArray getComponentsFromGroup (String group) {*
		var allComponents = [];
		var componentsJson = JSON.parse(this.components);
	
		var l = {};
		l.group = group;
		
		if(componentsJson[group] == undefined) {
			return allComponents;
		}
		
		for (var i = 0; i < componentsJson[group].length ; i++){
			var componentHolder = {};
			componentHolder.name = componentsJson[group][i];
		
			l.name = componentHolder.name;
			
			var component = this.getComponentByName(componentHolder.name);
			componentHolder.type = this.identifyType(component);
			componentHolder.component = component;
			componentHolder.datasource = component;
			
			l.componentExists = (component != undefined);
			l.type = componentHolder.type;
			if(this.isDebug()) DEBUG.inspectZtl(this, l, undefined, true);
			
			allComponents.push(componentHolder);	
		}
		
		return allComponents;
	*}
	
	/**
	 * If you know the name of the component, you can request the object
	 * <example>
	 * You want to pick up a component with name "BUTTON_43"
	 * <code>
	 *  var component = COMPONENTMANAGER_1.getComponentByName("BUTTON_43");
	 *	
	 *  // you need to know the type...
	 *	var button = COMPONENTMANAGER_1.returnAsButton(component);
	 *	
	 *	// now you can change some properties
	 *	button.setText("Accept Now");
	 * </code>
	 * </example>
	 */
	Component getComponentByName (String name) {*
		var component = eval(name);
		return component;
	*}
	
	/**
	 * If you want to check if the component with name exists
	 * <example>
	 * You want to check existance of a component with name "BUTTON_43"
	 * <code>
	 *  var exists = COMPONENTMANAGER_1.existsComponentByName("BUTTON_43");
	 *	
	 *  if (exists) {
	 *    ...
	 *  }
	 * </code>
	 * </example>
	 */
	boolean existsComponentByName (String name) {*
		
		this.internal_assureGlobalAccess();
		
		for (var key in this.getGlobal()) {
			if( key == name ) {
				return true;
			}
		}
		return false;
	*}
	
	/**
	 * If you know the name of the data source, you can request the object
	 * <example>
	 * You want to pick up a component with name "DS_53"
	 * <code>
	 *  var ds = COMPONENTMANAGER_1.getDataSourceByName("DS_53");
	 * 
	 *	// now you can change some properties
	 *	ds.setFilter(...);
	 * </code>
	 * </example>
	 */
	DataSourceAlias getDataSourceByName (String name) {*
		var component = eval(name);
		return component;
	*}

	/**
	 * If you want to check if the data source with name exists
	 * <example>
	 * You want to check existence of a data source with name "DS_1"
	 * <code>
	 *  var exists = COMPONENTMANAGER_1.existsDataSourceByName("DS_1");
	 *	
	 *  if (exists) {
	 *    ...
	 *  }
	 * </code>
	 * </example>
	 */
	boolean existsDataSourceByName (String name) {*
		
		this.internal_assureGlobalAccess();

		for (var key in this.getGlobal()) {
			if( key == name ) {
				return true;
			}
		}
		return false;
	*}
	
	/**
	 * can list all components in the application by optional prefix and suffix
	 * <example>
	 * You want to list all components which are starting with "SALES"
	 * <code>
	 *  var components = COMPONENTMANAGER_1.listAllComponents("SALES");
	 * 
	 *	components.forEach(function(element, index) {
	 *	  var name = element.name;
	 *	  var component = element.component;
	 *
	 *	  // you need to know the type...
	 *    if(name.indexOf("BUTTON") > -1) {
	 *      var button = COMPONENTMANAGER_1.returnAsButton(component);
	 *
	 *	    button.setText("Accept Now");
	 *    }
	 *    if(name.indexOf("CROSSTAB") > -1) {
	 *      var crosstab = COMPONENTMANAGER_1.returnAsCrosstab(component);
	 *
	 *	    crosstab.setWidth(600);
	 *    }
	 *	});
	 * </code>
	 * </example>
	 */
	org.scn.community.shared.ComponentArray listAllComponents (optional String prefix, optional String suffix) {*
		var allComponents = [];
	
		this.internal_assureGlobalAccess();
	
		for (var key in this.getGlobal()) {
			var something = eval(key);
			
			if(something == undefined) {
				continue;
			}
			
			if( typeof something == "object" ) {
				var fitsIntoName = true;
				if(prefix != undefined && prefix.length > 0) {
					if( key.indexOf(prefix) != 0) {
						fitsIntoName = false;
					}
				}
					
				if(suffix != undefined && suffix.length > 0) {
					if(key.indexOf(suffix) != (key.length - suffix.length)) {
						fitsIntoName = false;
					}
				}
				
				if(!fitsIntoName) {
					continue;
				}
				
				try {
					if(something.getWidth != undefined) {
						var componentHolder = {};

						componentHolder.name = key;
						componentHolder.type = this.identifyType(something);
						componentHolder.component = something;
						
						allComponents.push(componentHolder);	
					}
				} catch (e) {}
			}
		}
		
		return allComponents;
	*}
	
	/**
	 * can list all data sources in the application by optional prefix and suffix
	 * <example>
	 * You want to list all data sources which are starting with "SALES"
	 * <code>
	 *  var components = COMPONENTMANAGER_1.listAllDataSources("SALES");
	 * 
	 *	components.forEach(function(element, index) {
	 *	  var name = element.name;
	 *	  var datasource = element.datasource;
	 *
	 *	  datasource.setFilter(...);
	 *	});
	 * </code>
	 * </example>
	 */
	org.scn.community.shared.DataSourceArray listAllDataSources (optional String prefix, optional String suffix) {*
		var allComponents = [];
	
		this.internal_assureGlobalAccess();
	
		for (var key in this.getGlobal()) {
			var something = eval(key);
			
			if(something == undefined) {
				continue;
			}
			
			if( typeof something == "object" ) {
				var fitsIntoName = true;
				if(prefix != undefined && prefix.length > 0) {
					if( key.indexOf(prefix) != 0) {
						fitsIntoName = false;
					}
				}
					
				if(suffix != undefined && suffix.length > 0) {
					if(key.indexOf(suffix) != (key.length - suffix.length)) {
						fitsIntoName = false;
					}
				}
				
				if(!fitsIntoName) {
					continue;
				}
				
				try {
					if(something.assignDataSource != undefined) {
						var componentHolder = {};
						
						componentHolder.name = key;
						componentHolder.type = "DATA_SOURCE";
						componentHolder.component = something;
					
						allComponents.push(componentHolder);	
					}
				} catch (e) {}
			}
		}
		
		return allComponents;
	*}
	
	/**
	 * can list all components in the application by type (given as component object) and optional prefix and suffix
	 * <example>
	 * You want to list all buttons which are starting with "SALES", BUTTON_1 is a button component.
	 * <code>
	 *  var components = COMPONENTMANAGER_1.listAllComponentsWithSameType(BUTTON_1, "SALES");
	 * 
	 *	components.forEach(function(element, index) {
	 *	  var name = element.name;
	 *	  var component = element.component;
	 *
	 *	  var button = COMPONENTMANAGER_1.returnAsButton(component);
	 *
	 *	  button.setText("Accept Now");
	 *	});
	 * </code>
	 * </example>
	 */
	org.scn.community.shared.ComponentArray listAllComponentsWithSameType (Component componentAsType, optional String prefix, optional String suffix) {*
		var componentType = this.identifyType(componentAsType, true);

		return this.internal_listAllComponentsWithType(componentType, prefix, suffix, true);
	*}
	
	/**
	 * can list all components in the application by type and optional prefix and suffix
	 * Type is a primitive string which must be contained in the component name , eg. for button you have to name the buttons "BLABLA_BUTTON_SOMETHING"
	 * <example>
	 * You want to list all buttons which are starting with "SALES"
	 * <code>
	 *  var components = COMPONENTMANAGER_1.listAllComponentsWithType("BUTTON", "SALES");
	 * 
	 *	components.forEach(function(element, index) {
	 *	  var name = element.name;
	 *	  var component = element.component;
	 *
	 *	  var button = COMPONENTMANAGER_1.returnAsButton(component);
	 *
	 *	  button.setText("Accept Now");
	 *	});
	 * </code>
	 * </example>
	 */
	org.scn.community.shared.ComponentArray listAllComponentsWithType (String componentType, optional String prefix, optional String suffix) {*
		return this.internal_listAllComponentsWithType(componentType, prefix, suffix, false);
	*}
	
	org.scn.community.shared.ComponentArray internal_listAllComponentsWithType (String componentType, optional String prefix, optional String suffix, optional boolean typeIsExact) {*
		var allComponents = [];
	
		this.internal_assureGlobalAccess();

		for (var key in this.getGlobal()) {
			var something = eval(key);
			
			if(something == undefined) {
				continue;
			}
			
			if( typeof something == "object" ) {
				var fitsIntoName = true;
				if(prefix != undefined && prefix.length > 0) {
					if( key.indexOf(prefix) != 0) {
						fitsIntoName = false;
					}
				}
					
				if(suffix != undefined && suffix.length > 0) {
					if(key.indexOf(suffix) != (key.length - suffix.length)) {
						fitsIntoName = false;
					}
				}
				
				if(!fitsIntoName) {
					continue;
				}
				
				try {
					// currently only type in the name can be supported, eg. KAR_BUTTON_32 as BUTTON (logical assignment)
					if (!typeIsExact && key.indexOf(componentType) > -1) {
						var componentHolder = {};
						componentHolder.name = key;
						componentHolder.type = this.identifyType(something);
						componentHolder.component = something;
						
						// check if the object contains getWidth method -> seems to be component
						if(something.getWidth != undefined) {
							allComponents.push(componentHolder);	
						}
					} else if (typeIsExact) {
						var currentType = this.identifyType(something, true);
						
						if (currentType == componentType) {
							var componentHolder = {};
							componentHolder.name = key;
							componentHolder.type = currentType;
							componentHolder.component = something;
							
							// check if the object contains getWidth method -> seems to be component
							if(something.getWidth != undefined) {
								allComponents.push(componentHolder);	
							}
						}
					}
				} catch (e) {}	
			}
		}
		
		return allComponents;
	*}

	/**
	 * Identify Component Type. Returns the type for this component.
	 * 
	 */
	String identifyType (Component inputComponent, optional boolean keepFullType) {*
		
		this.internal_assureGlobalAccess();
	  	
		var type = "UNKNOWN";
		
		if(this.isDebug()) DEBUG.inspectZtl(this, inputComponent, undefined, true);
		
		if(inputComponent.getOwner){
			
			var owner = inputComponent.getOwner();
			
			if(owner.getItemType) {
				type = owner.getItemType();
			}
		}
		
		if(!keepFullType) {
			if(type.indexOf("_COMPONENT") > -1) {
				type = type.substring(0, type.indexOf("_COMPONENT"));
			}
		}
		
		return type;
	  *}

	/**Cast to Accordion component*/
	org.scn.community.basics.Accordion returnAsScnAccordion (Component inputComponent) {* return inputComponent; *}

	/**Cast to Action Sheet Button component*/
	org.scn.community.basics.ActionSheetButton returnAsScnActionSheetButton (Component inputComponent) {* return inputComponent; *}

	/**Cast to Application Header component*/
	org.scn.community.basics.ApplicationHeader returnAsScnApplicationHeader (Component inputComponent) {* return inputComponent; *}

	/**Cast to Base64 Image Encoder component*/
	org.scn.community.basics.Base64Image returnAsScnBase64Image (Component inputComponent) {* return inputComponent; *}

	/**Cast to Basic Business Card component*/
	org.scn.community.basics.BasicBusinessCard returnAsScnBasicBusinessCard (Component inputComponent) {* return inputComponent; *}

	/**Cast to Calendar component*/
	org.scn.community.basics.Calendar returnAsScnCalendar (Component inputComponent) {* return inputComponent; *}

	/**Cast to Check Box Group component*/
	org.scn.community.basics.CheckBoxGroup returnAsScnCheckBoxGroup (Component inputComponent) {* return inputComponent; *}

	/**Cast to Color Picker component*/
	org.scn.community.basics.ColorPicker returnAsScnColorPicker (Component inputComponent) {* return inputComponent; *}

	/**Cast to Date Range Scroller component*/
	org.scn.community.basics.DateRangeScroller returnAsScnDateRangeScroller (Component inputComponent) {* return inputComponent; *}

	/**Cast to Date Range Slider component*/
	org.scn.community.basics.DateRangeSlider returnAsScnDateRangeSlider (Component inputComponent) {* return inputComponent; *}

	/**Cast to Drag Drop Area component*/
	org.scn.community.basics.DragDropArea returnAsScnDragDropArea (Component inputComponent) {* return inputComponent; *}

	/**Cast to Embedded Frame component*/
	org.scn.community.basics.EmbeddedFrame returnAsScnEmbeddedFrame (Component inputComponent) {* return inputComponent; *}

	/**Cast to Embedded Media component*/
	org.scn.community.basics.EmbeddedMedia returnAsScnEmbeddedMedia (Component inputComponent) {* return inputComponent; *}

	/**Cast to Fallback Picture component*/
	org.scn.community.basics.FallbackPicture returnAsScnFallbackPicture (Component inputComponent) {* return inputComponent; *}

	/**Cast to Fiori App Header component*/
	org.scn.community.basics.FioriAppHeader returnAsScnFioriAppHeader (Component inputComponent) {* return inputComponent; *}

	/**Cast to Fiori Button component*/
	org.scn.community.basics.FioriButton returnAsScnFioriButton (Component inputComponent) {* return inputComponent; *}

	/**Cast to Fiori Toolbar component*/
	org.scn.community.basics.FioriToolbar returnAsScnFioriToolbar (Component inputComponent) {* return inputComponent; *}

	/**Cast to Fish Eye component*/
	org.scn.community.basics.FishEye returnAsScnFishEye (Component inputComponent) {* return inputComponent; *}

	/**Cast to Image Carousel component*/
	org.scn.community.basics.ImageCarousel returnAsScnImageCarousel (Component inputComponent) {* return inputComponent; *}

	/**Cast to Kpi View component*/
	org.scn.community.basics.KpiView returnAsScnKpiView (Component inputComponent) {* return inputComponent; *}

	/**Cast to Launch Pad component*/
	org.scn.community.basics.LaunchPad returnAsScnLaunchPad (Component inputComponent) {* return inputComponent; *}

	/**Cast to Leader Board component*/
	org.scn.community.basics.LeaderBoard returnAsScnLeaderBoard (Component inputComponent) {* return inputComponent; *}

	/**Cast to Link component*/
	org.scn.community.basics.Link returnAsScnLink (Component inputComponent) {* return inputComponent; *}

	/**Cast to List Selector component*/
	org.scn.community.basics.ListSelector returnAsScnListSelector (Component inputComponent) {* return inputComponent; *}

	/**Cast to Menu Bar (>= 1.4) component*/
	org.scn.community.basics.MenuBar returnAsScnMenuBar (Component inputComponent) {* return inputComponent; *}

	/**Cast to Menu Button (>= 1.4) component*/
	org.scn.community.basics.MenuButton returnAsScnMenuButton (Component inputComponent) {* return inputComponent; *}

	/**Cast to Modal Browser component*/
	org.scn.community.basics.ModalBrowser returnAsScnModalBrowser (Component inputComponent) {* return inputComponent; *}

	/**Cast to Navigation Bar component*/
	org.scn.community.basics.NavigationBar returnAsScnNavigationBar (Component inputComponent) {* return inputComponent; *}

	/**Cast to Notification Bar component*/
	org.scn.community.basics.NotificationBar returnAsScnNotificationBar (Component inputComponent) {* return inputComponent; *}

	/**Cast to Notify component*/
	org.scn.community.basics.Notify returnAsScnNotify (Component inputComponent) {* return inputComponent; *}

	/**Cast to Open Street Map (Basic) component*/
	org.scn.community.basics.Map returnAsScnMap (Component inputComponent) {* return inputComponent; *}

	/**Cast to Paginator component*/
	org.scn.community.basics.Paginator returnAsScnPaginator (Component inputComponent) {* return inputComponent; *}

	/**Cast to Password Field component*/
	org.scn.community.basics.PasswordField returnAsScnPasswordField (Component inputComponent) {* return inputComponent; *}

	/**Cast to Progress Indicator component*/
	org.scn.community.basics.ProgressIndicator returnAsScnProgressIndicator (Component inputComponent) {* return inputComponent; *}

	/**Cast to QRCode Generator component*/
	org.scn.community.basics.QRCode returnAsScnQRCode (Component inputComponent) {* return inputComponent; *}

	/**Cast to Range Slider component*/
	org.scn.community.basics.RangeSlider returnAsScnRangeSlider (Component inputComponent) {* return inputComponent; *}

	/**Cast to Rating Indicator component*/
	org.scn.community.basics.RatingIndicator returnAsScnRatingIndicator (Component inputComponent) {* return inputComponent; *}

	/**Cast to Road Map component*/
	org.scn.community.basics.RoadMap returnAsScnRoadMap (Component inputComponent) {* return inputComponent; *}

	/**Cast to Segmented Button component*/
	org.scn.community.basics.SegmentedButton returnAsScnSegmentedButton (Component inputComponent) {* return inputComponent; *}

	/**Cast to Slider component*/
	org.scn.community.basics.Slider returnAsScnSlider (Component inputComponent) {* return inputComponent; *}

	/**Cast to Text Area component*/
	org.scn.community.basics.TextArea returnAsScnTextArea (Component inputComponent) {* return inputComponent; *}

	/**Cast to Toggle Button component*/
	org.scn.community.basics.ToggleButton returnAsScnToggleButton (Component inputComponent) {* return inputComponent; *}

	/**Cast to Tree component*/
	org.scn.community.basics.Tree returnAsScnTree (Component inputComponent) {* return inputComponent; *}

	/**Cast to Tri State CheckBox component*/
	org.scn.community.basics.TriStateCheckBox returnAsScnTriStateCheckBox (Component inputComponent) {* return inputComponent; *}

	/**Cast to Validated Input Field component*/
	org.scn.community.basics.ValiInput returnAsScnValiInput (Component inputComponent) {* return inputComponent; *}

	/**Cast to Value Help Field component*/
	org.scn.community.basics.ValueHelpField returnAsScnValueHelpField (Component inputComponent) {* return inputComponent; *}

	/**Cast to Choropleth Map component*/
	org.scn.community.databound.Choropleth returnAsScnChoropleth (Component inputComponent) {* return inputComponent; *}

	/**Cast to D3 Hierarchy component*/
	org.scn.community.databound.jpd3hier returnAsScnjpd3hier (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Table component*/
	org.scn.community.databound.Table returnAsScnTable (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Drop Down component*/
	org.scn.community.databound.DropDown returnAsScnDropDown (Component inputComponent) {* return inputComponent; *}

	/**Cast to Facet Filter component*/
	org.scn.community.databound.FacetFilter returnAsScnFacetFilter (Component inputComponent) {* return inputComponent; *}

	/**Cast to Hexbin Chart component*/
	org.scn.community.databound.HexBin returnAsScnHexBin (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Leader Board component*/
	org.scn.community.databound.LeaderBoard returnAsScnLeaderBoard (Component inputComponent) {* return inputComponent; *}

	/**Cast to Marimekko Chart component*/
	org.scn.community.databound.MarimekkoChart returnAsScnMarimekkoChart (Component inputComponent) {* return inputComponent; *}

	/**Cast to Multi Level DropDown Menu component*/
	org.scn.community.databound.MultiLevelDropDown returnAsScnMultiLevelDropDown (Component inputComponent) {* return inputComponent; *}

	/**Cast to Nice Chart component*/
	org.scn.community.databound.NiceChart returnAsScnNiceChart (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Projector component*/
	org.scn.community.databound.Projector returnAsScnProjector (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Range Slider component*/
	org.scn.community.databound.RangeSlider returnAsScnRangeSlider (Component inputComponent) {* return inputComponent; *}

	/**Cast to Scatter Plot Chart component*/
	org.scn.community.databound.ScatterPlot returnAsScnScatterPlot (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Slider component*/
	org.scn.community.databound.Slider returnAsScnSlider (Component inputComponent) {* return inputComponent; *}

	/**Cast to 2D Crosstab component*/
	org.scn.community.databound.Table2D returnAsScnTable2D (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Top Flop component*/
	org.scn.community.databound.TopFlop returnAsScnTopFlop (Component inputComponent) {* return inputComponent; *}

	/**Cast to Data Top FLop Chart component*/
	org.scn.community.databound.TopFlopChart returnAsScnTopFlopChart (Component inputComponent) {* return inputComponent; *}

	/**Cast to UI5 Table component*/
	org.scn.community.databound.UI5Table returnAsScnUI5Table (Component inputComponent) {* return inputComponent; *}

	/**Cast to Bring Your Own Data component*/
	org.scn.community.datasource.BYOData returnAsScnBYOData (Component inputComponent) {* return inputComponent; *}

	/**Cast to Dynamic Csv Data Source component*/
	org.scn.community.datasource.DynCsvDataSource returnAsScnDynCsvDataSource (Component inputComponent) {* return inputComponent; *}

	/**Cast to Maps component*/
	org.scn.community.geovis.Maps returnAsScnMaps (Component inputComponent) {* return inputComponent; *}

	/**Cast to (PROTOTYPE!) Application Header (with Event) component*/
	org.scn.community.prototypes.ApplicationHeaderE returnAsScnApplicationHeaderE (Component inputComponent) {* return inputComponent; *}

	/**Cast to (PROTOTYPE!) Application Header (OnBeforeRender) component*/
	org.scn.community.prototypes.ApplicationHeaderO returnAsScnApplicationHeaderO (Component inputComponent) {* return inputComponent; *}

	/**Cast to Progress Bar Set component*/
	org.scn.community.prototypes.ProgressSet returnAsScnProgressSet (Component inputComponent) {* return inputComponent; *}

	/**Cast to Rapid Prototyping component*/
	org.scn.community.prototypes.RapidPrototype returnAsScnRapidPrototype (Component inputComponent) {* return inputComponent; *}

	/**Cast to (PROTOTYPE!) Sap M List component*/
	org.scn.community.prototypes.SapMList returnAsScnSapMList (Component inputComponent) {* return inputComponent; *}

	/**Cast to Array Utility component*/
	org.scn.community.utils.Array returnAsScnArray (Component inputComponent) {* return inputComponent; *}

	/**Cast to Client Information component*/
	org.scn.community.utils.ClientInformation returnAsScnClientInformation (Component inputComponent) {* return inputComponent; *}

	/**Cast to Collection Utility component*/
	org.scn.community.utils.Collection returnAsScnCollection (Component inputComponent) {* return inputComponent; *}

	/**Cast to Component Manager component*/
	org.scn.community.utils.ComponentManager returnAsScnComponentManager (Component inputComponent) {* return inputComponent; *}

	/**Cast to Custom Css Collector component*/
	org.scn.community.utils.CustomCssCollector returnAsScnCustomCssCollector (Component inputComponent) {* return inputComponent; *}

	/**Cast to Debugger Code Inspector component*/
	org.scn.community.utils.Debugger returnAsScnDebugger (Component inputComponent) {* return inputComponent; *}

	/**Cast to Flow Layouter component*/
	org.scn.community.utils.FlowLayouter returnAsScnFlowLayouter (Component inputComponent) {* return inputComponent; *}

	/**Cast to Math Utility component*/
	org.scn.community.utils.Math returnAsScnMath (Component inputComponent) {* return inputComponent; *}

	/**Cast to Open Url Inplace component*/
	org.scn.community.utils.OpenUrlInplace returnAsScnOpenUrlInplace (Component inputComponent) {* return inputComponent; *}

	/**Cast to Open Window by Post component*/
	org.scn.community.utils.OpenWindowPost returnAsScnOpenWindowPost (Component inputComponent) {* return inputComponent; *}

	/**Cast to PDF Print component*/
	org.scn.community.utils.PdfPrint returnAsScnPdfPrint (Component inputComponent) {* return inputComponent; *}

	/**Cast to Post Responce Parser component*/
	org.scn.community.utils.PostResponceParser returnAsScnPostResponceParser (Component inputComponent) {* return inputComponent; *}

	/**Cast to Simple Date component*/
	org.scn.community.utils.SimpleDate returnAsScnSimpleDate (Component inputComponent) {* return inputComponent; *}

}

class org.scn.community.utils.CustomCssCollector extends org.scn.community.shared.Component {
	
	/**
	 * Adds new CSS by with a key for later work on
	 * 
 	<example>
	You want to add a CSS link
	<code>
	CUSTOMCSSCOLLECTOR_1.addCss("BLUE", "blue_theme.css");	<br>
	</code>
	</example>
 	<example>
	You want to add a disabled CSS link
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "blue_theme.css", false);	<br>
	</code>
	</example>
	 */
	void addCss (
			/**CSS Key (must be unique)*/String elementKey, 
			/**CSS Url*/String elementUrl, 
			/**If true (default) it will be loaded*/optional boolean isActive) {*		
		
		if(isActive == undefined) {
			isActive = true;
		}
		
		var itemDef = { 
			"key": elementKey, 
			"url": elementUrl, 
			"act": isActive
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Updates existing CSS by given key
	 * 
 	<example>
	You want to update a CSS url
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "blue_theme.css");	<br>
	</code>
	</example>
 	<example>
	You want to disable a css link
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "", false);	<br>
	</code>
	</example>
 	<example>
	You want to enable a css link
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "", true);	<br>
	</code>
	</example>
	 */
	void updateCss (
			/**CSS Key (must be unique)*/String elementKey, 
			/**CSS Url*/optional String elementUrl, 
			/**If true (default) it will be loaded*/optional boolean isActive) {*
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				if(elementUrl != undefined && elementUrl != "") {
					elementsJson[i].url = elementUrl;	
				}
				if(isActive != undefined) {
					elementsJson[i].act = isActive;	
				}
				
				break;
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
}
/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the blog thread
 * http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/16/design-studio-sdk--bial-fornext-loop-and-my-first-github-co-author-attempt
 * 
 * Authors: Michael Howles, Scn Community Contributors
 */
class org.scn.community.utils.Debugger extends org.scn.community.shared.Component {  

	/**
	 * Returns active flag
	 */
	boolean isActive() {*  
		return this.DActive;  
	*}  

	/**
	 * Sets active flag
	 */
	void setActive(boolean value) {*  
		this.DActive = value;
	*}

	/**
	 * Returns log active flag
	 */
	boolean isLogActive() {*  
		return this.DLogActive;  
	*}  

	/**
	 * Sets log active flag
	 */
	void setLogActive(boolean valu) {*  
		this.DLogActive = value;
	*}

	void openZtl(String thisValue, Object locals) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [ENTRY] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals);
	*}
	
	void exitZtl(String thisValue, Object locals) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [EXIT] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals);
	*}

	void inspectNow(optional String comment, optional Component thisValue) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		if(comment == undefined) {comment="";}
		
		if(thisValue == undefined) {
			thisValue = {};
		}
		
//		if(thisValue._VariableName == undefined) {
//			thisValue._VariableName = comment;
//		}
		
		this.toConsole("Component [CUSTOM] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue);
	*}
	
	void processZtlException(String thisValue, Object locals, Object exception) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [EXCEPTION] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals, exception);
	*}

	void inspectZtl(Object thisValue, Object locals, Object exception) {*
		if(this.DActive != true) {
			return;
		}
		
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [INSPECT] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals, exception);
	*}
	
	/**
	 * Private Inspection Method
	 */
	void private_inspect(Object thisValue, Object locals, Object exception, optional boolean fullScope) {*
		if(this.DActive != true) {
			return;
		}
	
		var that = this;
	
		if(fullScope==undefined) {
			fullScope = false;
		}
		
		var lStack = undefined;
		if(this.DStack == "") {
			lStack = [];
		} else {
			lStack = JSON.parse(this.DStack);
		}
		
		var lVariables = undefined;
		if(this.DVariables == "") {
			lVariables = [];
		} else {
			lVariables = JSON.parse(this.DVariables);
		}
	
		var l = {};

		l.mydate = new Date();
		l.date = l.mydate.toString("yyyymmddhhmmss");
		l.date = l.date + " - " + l.mydate.getSeconds() + "," + l.mydate.getMilliseconds();
		
		l.stackEntry  = {};
	
		this.internal_assureGlobalAccess();
		
		var method = this.getCallingMethod();
		var line = 0;
		if(method.indexOf(":") > -1) {
			line = method.substring(method.indexOf(":") + 1);
			if(line.indexOf("\n") > -1) {
				line = line.substring(0, line.indexOf("\n"));
			}
			method = method.substring(0, method.indexOf(":"));
		}
		
		if(method == undefined || method == "") {
			method = thisValue._VariableName;
		}
		
		this.toConsole("Calling Method: " + method);
		
		l.stackEntry["method"] = method;
		l.stackEntry["date"] = l.date;
		l.stackEntry["line"] = line;
		l.stackEntry["component"] = thisValue._VariableName;
		
		if(that.DGlobals) {
			// globals
			this.toConsole("GLOBALS");
			var globalScope = this.getGlobal();
			for (var name in globalScope) {
				var something = globalScope[name];
	
				if(something == undefined) {
					continue;
				}
				
				try {
					var value = globalScope[name];
					
					if(value.indexOf("com.sap.ip.bi.zen") > -1) {
						// internal object
						continue;
					}
					
					this.toConsole("  " + name + "=" + value);
					lVariables.push({"date":l.date, "name":name, "value":value, "type":"global"});
				} catch (e) {
					// ignore
				}
			}
		}

		if(that.DOwner) {
			// owner
			this.toConsole("OWNER ? "+(thisValue != undefined));
			if(thisValue) {
				
				var owner = thisValue.getOwner();
				
				lVariables.push({"date":l.date, "item-type":name, "value":owner.getItemType(), "type":"info"});
				lVariables.push({"date":l.date, "item-name":name, "value":owner.getName(), "type":"info"});
				
				for (var name in thisValue) {
					try {
						if(!fullScope && name.indexOf("_VariableName") > -1) {
							continue;
						}
						
						if(name.indexOf("MARGIN") > -1 || name.indexOf("margin") > -1) {
							this.toConsole("  " + name + "=<not read>");	
							continue;
						}
						
						var value = thisValue[name];
						
						if(!fullScope && value.indexOf("function") > -1) {
							// internal function
							continue;
						}
		
						if(!fullScope && value.indexOf("com.sap.ip.bi.zen") > -1) {
							// internal object
							continue;
						}
		
						if(value.indexOf("{") == 0 || value.indexOf("[") == 0 || value.indexOf("object") > -1) {
							var jValue = JSON.stringify(value);
							this.toConsole("  " + name + "=" + jValue);
							lVariables.push({"date":l.date, "name":name, "value":jValue, "type":"owner"});
						} else {
							this.toConsole("  " + name + "=" + value);
							lVariables.push({"date":l.date, "name":name, "value":value, "type":"owner"});
						}
					} catch (e) {
						lVariables.push({"date":l.date, "name":name, "value":"<read error>", "type":"owner"});
					}
				}
			}								
		}

		if(that.DLocals) {
			// locals
			this.toConsole("LOCALS ? "+(locals != undefined));
			if(locals != undefined) {
				for (var name in locals) {
					try {
						var value = locals[name];
	
						if(value.indexOf("{") == 0 || value.indexOf("[") == 0 || value.indexOf("object") > -1) {
							var jValue = JSON.stringify(value);
							this.toConsole("  " + name + "=" + jValue);
							lVariables.push({"date":l.date, "name":name, "value":jValue, "type":"local"});
						} else {
							this.toConsole("  " + name + "=" + value);
							lVariables.push({"date":l.date, "name":name, "value":value, "type":"local"});
						}
					} catch (e) {
						lVariables.push({"date":l.date, "name":name, "value":"<read error>", "type":"local"});
					}
				}
			}
		}
		
		// callstack
		this.toConsole("CALLSTACK");
		
		var callstack = this.getCallStack(exception);
		this.toConsole(callstack);
		l.stackEntry["callstack"] = callstack;

		lStack.push(l.stackEntry);
		this.DStack = JSON.stringify(lStack);

		this.DVariables = JSON.stringify(lVariables);
	*}
	
	String getCallStack(optional Object exception) {*
		var stackValue = "";

		if(exception != undefined) {
			stackValue = stackValue + exception.stack;
		} else {
			try {
				var s;
				s.key = "a";	
			} catch (e) {
				stackValue = stackValue + e.stack;
			}
		}

		var indexOfCut = stackValue.indexOf("(private_inspect)") + "(private_inspect)".length;
		stackValue = stackValue.substring(indexOfCut);

		indexOfCut = stackValue.indexOf("at ") + "at ".length;;
		stackValue = stackValue.substring(indexOfCut);

		indexOfCut = stackValue.indexOf("at ");
		stackValue = stackValue.substring(indexOfCut);

		return stackValue;
	*}
	
	String getCallingMethod() {*
		var methodName = "";
		
		try {
			var s;
			s.key = "a";	
		} catch (e) {
			methodName = methodName + e.stack;
		}
		
		var indexOfCut = methodName.indexOf("(private_inspect)") + "(private_inspect)".length;
		if(indexOfCut > -1) {
			methodName = methodName.substring(indexOfCut);
			
			indexOfCut = methodName.indexOf("at ") + "at ".length;
			methodName = methodName.substring(indexOfCut);

			indexOfCut = methodName.indexOf("at ") + "at ".length;
			methodName = methodName.substring(indexOfCut);

			indexOfCut = methodName.indexOf(" (");
			methodName = methodName.substring(0, indexOfCut);
		}

		return methodName;
	*}
	
	void toConsole(String value, optional boolean withDate) {*
		if(withDate) {
			var mydate = new Date();
			var date = mydate.toString('dddd MMM yyyy h:mm:ss');
			value = date + ": " + value;
		}
		this.DConsole = this.DConsole + value + "\r\n";
		
		if(this.DLogActive) {
			APPLICATION.log(value);	
		}
	*}

	String getConsole() {*
		return this.DConsole;
	*}

	void clearConsole() {*
		this.DConsole = "";
	*}
	
	void reset() {*
		this.clearConsole();
		this.DStack = "[]";
		this.DVariables = "[]";
	*}
}
/**
 * class for FlowLayouter
 */
class org.scn.community.utils.FlowLayouter extends org.scn.community.shared.Component {  
	
	/** Register the parent component in case you want to have a resize for the complete layout 
	 * This component will be resized to the content + split space on all sides.
	 * There can be only one parent component.
	 * */
	void registerParentComponent (Component component) {*
		this.parentComponent = component;
	*}
	
	/** Register components which will be repositioned by this layouter.
	 * The components will be placed in the registration order in its parent component.
	 */
	void registerComponent (Component component) {*
		if(this.registeredComponents == undefined) {
			this.registeredComponents = [];
		}
	
		this.registeredComponents.push(component);
	*}

	/** Unregister component which will be repositioned by this layouter.
	 * The components will be removed from the registration list.
	 */
	void unregisterComponent (Component component) {*
		for(var i=0;i<this.registeredComponents.length;i++){
			if(registeredComponents[i] === component) {
				this.registeredComponents.splice(i, 1);
			}
		}
	*}

	/** Removes all components from the layouter.
	 */
	void removeAllComponents () {*
		this.registeredComponents = [];
	*}
	
	/** Re-Layout the content based on the given rules, which are:
	 * - the size will be taken from this layouter (split is done on width)
	 * - the space between components will be set by the property "split space"
	 * - if "hide on overlap" is set to true, components which are outside of visible area are hidden.
	 * - in other case, when the parent component is set, it will be resized to the new content 
	 * */
	void reLayout () {*
		if(this.splitSpace < 0) {
			this.splitSpace = 0;
		}
		
		this.outerWidth = this.getWidth();
		this.outerHeight = this.getHeight();
		
		// check the sizes
		// check settings
		// get width
		// position
		
		var widths = [];
		var heights = [];

		for(var i=0; i<this.registeredComponents.length; i++){  
			widths.push(this.registeredComponents[i].getWidth()); 
			heights.push(this.registeredComponents[i].getHeight());
		}
		
		// reset the current sizes
		var currentOuterWidth = this.splitSpace;
		var currentMaxHeight = this.splitSpace;
		
		// the maximum width of a line across all lines
		var maxVisibleWidth = 0;
		
		// set the current positions
		var currentTop = this.getTopMargin() + this.splitSpace;
		var currentLeft = this.getLeftMargin() + this.splitSpace;
		
		for(var i=0;i<this.registeredComponents.length;i++){
			var width = this.registeredComponents[i].getWidth();  
			var height = this.registeredComponents[i].getHeight();

			// check if we are already more than the size
			if(currentOuterWidth + width > this.outerWidth) {
				// reset position to next row
				currentLeft = this.getLeftMargin() + this.splitSpace;
				currentTop = currentTop + currentMaxHeight + this.splitSpace;
				
				// add next line by updating the width and max height
				currentOuterWidth = this.splitSpace + width + this.splitSpace;
				currentMaxHeight = height;
			} else {
				// calculate position
				currentLeft = currentOuterWidth + this.getLeftMargin();

				// still fits
				currentOuterWidth = currentOuterWidth + width + this.splitSpace;
				
				if(currentMaxHeight < height) {
					currentMaxHeight = height;
				}
				
				if(maxVisibleWidth < currentOuterWidth) {
					maxVisibleWidth = currentOuterWidth;
				}
			}

			// print current data for debugging
			// this.internal_print(currentOuterWidth, width, currentTop, currentLeft, currentMaxHeight);

			// position the component
			this.registeredComponents[i].setLeftMargin(currentLeft);
			this.registeredComponents[i].setTopMargin(currentTop);
			this.registeredComponents[i].setVisible(true);
			
			// check if out of visible area and hide
			if (this.hideOnOverlap && currentTop + currentMaxHeight > this.outerHeight) {
				// this component is out of visible area
				this.registeredComponents[i].setVisible(false);
			}
		}
		
		if(!this.hideOnOverlap && this.parentComponent != undefined) {
			this.parentComponent.setHeight(currentTop + currentMaxHeight + this.splitSpace);
			this.parentComponent.setWidth(maxVisibleWidth);
		}

	*}
	
	/** Internal method to print all data (for debugging) */
	void internal_print(int currentOuterWidth, int componentWidth, int currentTop, int currentLeft, int currentMaxHeight) {*
		APPLICATION.createInfoMessage("TOP: " + currentTop + ", LEFT: " + currentLeft + ", OUTER: " + currentOuterWidth + ", WIDTH: " + componentWidth + ", HEIGHT: " + currentMaxHeight);
	*}
}

/**
 * Component Math
 */
class org.scn.community.utils.Math extends org.scn.community.shared.Component {  

	/**
	 * Returns the absolute value of x
	 */
	float abs (float value) {*
		return Math.abs(value);
	*}
	
	/**
	 * Returns the arccosine of x, in radians
	 */
	float acos (float value) {*
		return Math.acos(value);
	*}
	
	/**
	 * Returns the arcsine of x, in radians
	 */
	float asin (float value) {*
		return Math.asin(value);
	*}
	
	/**
	 * Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
	 */
	float atan (float value) {*
		return Math.atan(value);
	*}
	
	/**
	 * Math.ceil() rounds a number up to the nearest integer
	 */
	float ceil (float value) {*
		return Math.ceil(value);
	*}
	
	/**
	 * Returns the cosine of x (x is in radians)
	 */
	float cos (float value) {*
		return Math.cos(value);
	*}
	
	/**
	 * Returns the value of E^x
	 */
	float exp (float value) {*
		return Math.exp(value);
	*}
	
	/**
	 * Math.floor() rounds a number down to the nearest integer.
	 * <example>
	 * Math.floor() and Math.random() can be used together to return a random number between 0 and 10.
	 * <code>
	 * // returns a random number between 0 and 10
	 * Math.floor(Math.random() * 11);
	 * </code>
	 * </example>
	 */
	float floor (float value) {*
		return Math.floor(value);
	*}
	
	/**
	 * Returns the natural logarithm (base E) of x
	 */
	float log (float value) {*
		return Math.log(value);
	*}
	
	/**
	 * Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments (min 2, max 4)
	 */
	float max (float value, float value2, optional float value3, optional float value4) {*
		if(value4 == undefined) {
			return Math.max(value, value2);
			
			if(value3 == undefined) {
				return Math.max(value, value2);
			}
			
			return Math.max(value, value2, value3);
		}
		return Math.max(value, value2, value3, value4);
	*}
	
	/**
	 * Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments (min 2, max 4)
	 */
	float min (float value, float value2, optional float value3, optional float value4) {*
		if(value4 == undefined) {
			return Math.min(value, value2);
			
			if(value3 == undefined) {
				return Math.min(value, value2);
			}
			
			return Math.min(value, value2, value3);
		}
		return Math.min(value, value2, value3, value4);
	*}
	
	/**
	 * Returns the value of x to the power of y
	 */
	float pow (float value, float value2) {*
		return Math.pow(value, value2);
	*}
	
	/**
	 * Math.random() returns a random number between 0 and 1
	 */
	float random () {*
		return Math.random();
	*}
	
	/**
	 * Math.round() rounds a number to the nearest integer
	 */
	float round (float value) {*
		return Math.round(value);
	*}
	
	/**
	 * Returns the sine of x (x is in radians)
	 */
	float sin (float value) {*
		return Math.sin(value);
	*}
	
	/**
	 * Returns the square root of x
	 */
	float sqrt (float value) {*
		return Math.sqrt(value);
	*}
	
	/**
	 * Returns the tangent of an angle
	 */
	float tan (float value) {*
		return Math.tan(value);
	*}
	
	/**
	 * Calculates sum of all given floats as StringArray
	 */
	float sum (StringArray elements) {*
		var sum = 0;
		for( var i = 0; i < elements.length; i++ ){
		    sum += parseFloat( elements[i] ); //don't forget to add the base
		}
	
		var avg = sum/elements.length;
		
		return sum;
	*}
	
	/**
	 * Calculates sum of all given floats as org.scn.community.shared.KeyLabelValueArray
	 */
	float sumV (org.scn.community.shared.KeyLabelValueArray elements) {*
		var sum = 0;
		for( var i = 0; i < elements.length; i++ ){
		    sum += parseFloat( elements[i].value ); //don't forget to add the base
		}
	
		var avg = sum/elements.length;
		
		return sum;
	*}
	
	/**
	 * Calculates average of all given floats as StringArray
	 */
	float average (StringArray elements) {*
		var sum = 0;
		for( var i = 0; i < elements.length; i++ ){
		    sum += parseFloat( elements[i] ); //don't forget to add the base
		}
	
		var avg = sum/elements.length;
		
		return avg;
	*}
	
	/**
	 * Calculates average of all given floats as org.scn.community.shared.KeyLabelValueArray
	 */
	float averageV (org.scn.community.shared.KeyLabelValueArray elements) {*
		var sum = 0;
		for( var i = 0; i < elements.length; i++ ){
		    sum += parseFloat( elements[i].value ); //don't forget to add the base
		}
	
		var avg = sum/elements.length;
		
		return avg;
	*}
	
	/**
	 * Calculates percentage of the number to the sum
	 */
	float percent (float number, float sum) {*
		var perc = (number/sum) * 100;
		
		return perc ;
	*}
	
	/**
	 * Calculates median of all given floats as StringArray
	 */
	float median (StringArray elements) {*
		elements.sort( function(a,b) {return parseFloat(a) - parseFloat(b);} );
	    
	    var half = Math.floor(elements.length/2);
	    
	    if (elements.length % 2 == 1) {
	        return parseFloat(elements[half]);
	    } else {
	        return (parseFloat(elements[half-1]) + parseFloat(elements[half])) / 2.0;
	    }
	*}
	
	/**
	 * Calculates median of all given floats as org.scn.community.shared.KeyLabelValueArray
	 */
	float medianV (org.scn.community.shared.KeyLabelValueArray elements) {*
		elements.sort( function(a,b) {return a.value - b.value;} );
	    
	    var half = Math.floor(elements.length/2);
	    
	    if (elements.length % 2 == 1) {
	        return elements[half].value;
	    } else {
	        return (elements[half-1].value + elements[half].value) / 2.0;
	    }
	*}
}
/**
 * Class for OpenWindowPost
 */
class org.scn.community.utils.OpenUrlInplace extends org.scn.community.shared.Component {
	
	/**
	 * Trigger Execution of the given URL and parameter list
	 */
	void triggerExecution () {*
		this.trigger = "GO";
	*}
	
	/**
	 * Set URL 
	 */
	void setUrl (
			/**url*/String url) {*
		this.url = url;
	*}

	/** 
	 * Add parameter
	 * 
	 */
	void removeAllParameters () {*
		this.parameters = "";
	*}
			
	/** 
	 * Add parameter
	 * 
	 */
	void addParameter (
			/**name*/String name, 
			/**value*/String value) {*
		var itemDef = { 
				"name": name,
				"value": value 
				};
	
		if (this.parameters === undefined || this.parameters === "" || this.parameters === "<delete>"){
			this.parameters = "[]";
		}
		
		var parametersJson = JSON.parse(this.parameters);
		parametersJson.push(itemDef)
	
		this.parameters = JSON.stringify(parametersJson);
	*}
}/**
 * Class for OpenWindowPost
 */
class org.scn.community.utils.OpenWindowPost extends org.scn.community.shared.Component {
	
	/**
	 * Trigger Execution of the given URL and parameter list
	 */
	void triggerExecution () {*
		this.trigger = "GO";
	*}
	
	/**
	 * Set URL 
	 */
	void setUrl (
			/**url*/String url) {*
		this.url = url;
	*}
	
	/**
	 * Set Window Id 
	 */
	void setWindowId (
			/**window id*/String windowId) {*
		this.formId = windowId;
	*}

	/** 
	 * Add parameter
	 * 
	 */
	void removeAllParameters () {*
		this.parameters = "";
	*}
			
	/** 
	 * Add parameter
	 * 
	 */
	void addParameter (
			/**name*/String name, 
			/**value*/String value) {*
		var itemDef = { 
				"name": name,
				"value": value 
				};
	
		if (this.parameters === undefined || this.parameters === "" || this.parameters === "<delete>"){
			this.parameters = "[]";
		}
		
		var parametersJson = JSON.parse(this.parameters);
		parametersJson.push(itemDef)
	
		this.parameters = JSON.stringify(parametersJson);
	*}
}
/**
 * Class for PdfPrint
 */
class org.scn.community.utils.PdfPrint extends org.scn.community.shared.Component {

	/**
	 * Trigger Execution of the given URL and parameter list
	 */
	void print () {*
		this.trigger = "GO";
	*}
	
	/**
	 * Sets the root panel name, this panel will be printed as sub part of the application
	 */
	void setRootPanel (/*Name of the panel to print*/ String panelName) {*
		this.rootPanel = panelName;
	*}
}
