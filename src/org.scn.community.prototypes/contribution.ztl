/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2014, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */


/**
 * Generated ZTL Class for ApsTester
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.prototypes.ApsTester extends org.scn.community.shared.Component {

	/**
	 * Sets Ignore Expanded Hierarchy Nodes Property
	 */	
	void setComboboxExample( /**Ignore Expanded Hierarchy Nodes*/ String comboboxExample){*
		this.comboboxExample = comboboxExample;
	*}

	/**
	 * Gets Ignore Expanded Hierarchy Nodes Property
	 */	
	String getComboboxExample() {*
		return this.comboboxExample;
	*}

	/**
	 * Sets Ignore Expanded Hierarchy Nodes Property
	 */	
	void setColorExample( /**Ignore Expanded Hierarchy Nodes*/ String colorExample){*
		this.colorExample = colorExample;
	*}

	/**
	 * Gets Ignore Expanded Hierarchy Nodes Property
	 */	
	String getColorExample() {*
		return this.colorExample;
	*}



	/**
	 * Sets Ignore Totals Property
	 */	
	void setCheckboxExample( /**Ignore Totals*/ boolean checkboxExample){*
		this.checkboxExample = checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxExample() {*
		return this.checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxOnlyGetterExample() {*
		return this.checkboxOnlyGetterExample;
	*}

	/**
	 * Sets Ignore Expanded Hierarchy Nodes Property
	 */	
	void setPaletteExample( /**Ignore Expanded Hierarchy Nodes*/ String paletteExample){*
		this.paletteExample = paletteExample;
	*}

	/**
	 * Gets Ignore Expanded Hierarchy Nodes Property
	 */	
	String getPaletteExample() {*
		return this.paletteExample;
	*}

	/**
	 * Sets Ignore Expanded Hierarchy Nodes Property
	 */	
	void setTextExample( /**Ignore Expanded Hierarchy Nodes*/ String textExample){*
		this.textExample = textExample;
	*}

	/**
	 * Gets Ignore Expanded Hierarchy Nodes Property
	 */	
	String getTextExample() {*
		return this.textExample;
	*}

	/**
	 * Sets Ignore Expanded Hierarchy Nodes Property
	 */	
	void setSpinnerExample( /**Ignore Expanded Hierarchy Nodes*/ int spinnerExample){*
		this.spinnerExample = spinnerExample;
	*}

	/**
	 * Gets Ignore Expanded Hierarchy Nodes Property
	 */	
	int getSpinnerExample() {*
		return this.spinnerExample;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Class for ApplicationHeader
 */
class org.scn.community.prototypes.ApplicationHeaderE extends org.scn.community.shared.Component {
	
	/** Sets the user name that is displayed beside the welcome text. */
	void setUserName(
		/** User name */ String userName) {*
		this.userName = userName;	
	*}
	
	/** Returns the user name that is displayed beside the welcome text. */
	String getUserName() {*
		return this.userName;	
	*}

	/** Sets the text that is displayed beside the logo in the application header. */
	void setLogoText(
		/** Logo text */ String logoText) {*
		this.logoText = logoText;	
	*}
	
	/** Returns the text that is displayed beside the logo in the application header. */
	String getLogoText() {*
		return this.logoText;	
	*}
	
	/* Sets the value of the invisible property appName to the application name */  
	// @Visibility(private)
	void private_setAppInfoName() {*
		// APPLICATION.createInfoMessage("Name: " + APPLICATION.getInfo().name);
	    this.appName = "Event: " + APPLICATION.getInfo().name;
	*}
	
	/**
	 * Just a show case, but this will never work - 
	 * ValueTextList is just a representation for Java object which needs implementation of some interface
	 * and will be passed directly through ZTL - cannot be coded via JSON.
	 */
	void setValues(ValueTextList list) {*
		var that = this;
	
		var l = {};
		l.value = list;
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
		
		var string = list.toString();
		l.string = string;
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
	*}
	
	org.scn.community.shared.ValueTextArray getValueTextList() {*
		var myArray = [];
		
		myArray.push({"value": "A", "text": "A-T"});
		myArray.push({"value": "B", "text": "C-T"});
		myArray.push({"value": "C", "text": "B-T"});
	
		return myArray;  
	*}
	
	void fillIntoSelectionComponent(SelectionComponent selectionComponent, org.scn.community.shared.ValueTextArray list) {*
		selectionComponent.removeAllItems();
		
		var that = this;
		
		var l = {};
		l.value = list;
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
		
		for(var i=0;i<list.length;i++){
			if(this.isDebug()) {	l[list[i].value] = list[i].value + ": " + list[i].text; }
			selectionComponent.addItem(list[i].value, list[i].text);
		}
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
	*}
}


/**
 * Class for ApplicationHeader
 */
class org.scn.community.prototypes.ApplicationHeaderO extends org.scn.community.shared.Component {
	
	/** Sets the user name that is displayed beside the welcome text. */
	void setUserName(
		/** User name */ String userName) {*
		this.userName = userName;	
	*}
	
	/** Returns the user name that is displayed beside the welcome text. */
	String getUserName() {*
		return this.userName;	
	*}

	/** Sets the text that is displayed beside the logo in the application header. */
	void setLogoText(
		/** Logo text */ String logoText) {*
		this.logoText = logoText;	
	*}
	
	/** Returns the text that is displayed beside the logo in the application header. */
	String getLogoText() {*
		return this.logoText;	
	*}
	
	// @Visibility(private)
	void private_beforeRender() {*
		// APPLICATION.createInfoMessage("Name: " + APPLICATION.getInfo().name);
	    this.appName = "OnBeforeRender: " + APPLICATION.getInfo().name;
	*}
}
/**
 * Class for ProgressBar Properties
 */
class org.scn.community.prototypes.BarProperty {
  String title;
  String fillColor;
  String number;
  String numberUnit;
}

/**
 * Class for ProgressBar
 */
class org.scn.community.prototypes.ProgressSet extends org.scn.community.shared.Component {
	/**
	Sets bar thickness (-1 = auto)
	*/
	void setBarThickness(/* Thickness */ int thickness) {*
		this.barHeight = thickness;
	*}
	/**
	Gets bar thickness (-1 = auto)
	*/
	int getBarThickness() {*
		return this.barHeight;
	*}
	/**
	Sets inline labels to true/false
	*/
	void setInlineLabels(/* true/false */ boolean isInline) {*
		this.inlineLabels = isInline;
	*}
	/**
	Gets whether labels are inline are not
	*/
	boolean getInlineLabels() {*
		return this.inlineLabels;
	*}
	/**
	Gets Bar Selected
	*/
	String getBarClicked() {*
		return this.selectedBar;
	*}
	/** Remove All Bars
 	<example>
	Remove all bars
	<code>
	PROGRESSET_1.removeAllBars();<br>
	</code>
	</example>
	 */
	void removeAllBars () {*		
		this.barConfig = JSON.stringify([]);
	*}
	/** Remove a bar
 	<example>
	Remove a bar titled "Sales"
	<code>
	PROGRESSET_1.removeBar("Sales");<br>
	</code>
	</example>
	 */
	void removeBar (/*Tile Title*/String title) {*		
		var o = eval(this.barConfig);
		if(!o) o = [];
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		barConfig = JSON.stringify(o);
	*}
	com.sample.utilities.BarProperty getBarProperty(/*Title*/String title){*
		var r = {
			title : "",
			fillColor : "",
			number : "",
			numberUnit : ""
		}
		var o = eval(this.barConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1){
			var barConf = o[matchIndex];
			r.title = barConf.title;
			r.fillColor = barConf.fillColor;
			r.number = tileConf.number;
			r.numberUnit = tileConf.numberUnit;
		}
		return r;
	*}
	/** Adds or Updates a Bar (if title already exists)
 	<example>
	Add/Update a bar called "Sales"
	<code>
	PROGRESSET_1.addBar("Sales", "#FF0000", "1234", "USD");<br>
	</code>
	</example>
	 */
	void addBar (
			/*Title*/String title, 
			/*Number*/optional String number, 
			/*Number Unit*/optional String numberUnit,
			/*Fill Color*/optional String fillColor
			) {*		
		var o = eval(this.barConfig);
		if(!o) o = [];
		var bar = {
			title: title,
			fillColor: fillColor || "auto",
			number: number,
			numberUnit: numberUnit
		};	
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex==-1){	// New Bar
			o.push(bar);
		}else{	// Update Bar
			o[matchIndex] = bar;
		}
		barConfig = JSON.stringify(o);
	*}
}

/**
 * Class for SapMList
 */
class org.scn.community.prototypes.SapMList extends org.scn.community.shared.Component {
	
}
/**
 * Class for RapidPrototype 
 */
class org.scn.community.prototypes.RapidPrototype extends org.scn.community.shared.Component {
	/* Returns the current value */
	String getHTML() {*
		return this.HTML;
	*}

	/* Sets the value */
	void setHTML(/* HTML */ String html) {*
		this.HTML = html;
	*}
	
	void setTerm( /* Placeholder Text */ String term, /* Index */ int index){*
		this["term"+index] = term;
	*}
	void setReplacement( /* Placeholder Text */ String replacement, /* Index */ int index){*
		this["replacement"+index] = replacement;
	*}
}
