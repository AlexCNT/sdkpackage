/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2014, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */


/**
 * Generated ZTL Class for ApsTester
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.prototypes.ApsTester extends org.scn.community.shared.Component {

	/**
	 * Sets Simple Choice Property
	 */	
	void setComboboxExample( /**Simple Choice*/ String comboboxExample){*
		this.comboboxExample = comboboxExample;
	*}

	/**
	 * Gets Simple Choice Property
	 */	
	String getComboboxExample() {*
		return this.comboboxExample;
	*}

	/**
	 * Sets Simple Color Property
	 */	
	void setColorExample( /**Simple Color*/ String colorExample){*
		this.colorExample = colorExample;
	*}

	/**
	 * Gets Simple Color Property
	 */	
	String getColorExample() {*
		return this.colorExample;
	*}

	/** Adds a root element containing key [String], text [String], image [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addButton (
			/**Unique key of this button*/String key, 
			/**Text for the button*/String text, 
			/**Given image for the button*/optional String image, 
			/**Selection state of the button*/optional boolean selected
			) {*		
		
		if(image == undefined) { image = "";}
		if(selected == undefined) { selected = false;}
		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			image:image, 
			selected:selected
			};
	
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			this.singlearray = "[]";
		}
		
		var elementsJson = JSON.parse(this.singlearray);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.singlearray = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	APSTESTER.removeButton(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeButton (
			String key
			) {*		
		
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			this.singlearray = "[]";
		}
		
		var elementsJson = JSON.parse(this.singlearray);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.singlearray = JSON.stringify(elementsJson);
	*}



	/**
	 * Sets Ignore Totals Property
	 */	
	void setCheckboxExample( /**Ignore Totals*/ boolean checkboxExample){*
		this.checkboxExample = checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxExample() {*
		return this.checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxOnlyGetterExample() {*
		return this.checkboxOnlyGetterExample;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], image [String], selected [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	APSTESTER.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);<br>
	APSTESTER.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);
	</code>
	</example>
	 */
	void addItem (
			/**The key of the parent button*/String parentKey, 
			/**Unique key of this item*/String key, 
			/**Text for the item*/String text, 
			/**Given image for the item*/optional String image, 
			/**Selection state of the item*/optional boolean selected
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		if(image == undefined) { image = "";}
		if(selected == undefined) { selected = false;}
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			image:image, 
			selected:selected 
			};
	
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			this.doublearray = "[]";
		}
		
		var elementsJson = JSON.parse(this.doublearray);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.doublearray = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], image [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addButton (
			/**Unique key of this button*/String key, 
			/**Text for the button*/String text, 
			/**Given image for the button*/optional String image, 
			/**Selection state of the button*/optional boolean selected
			) {*		
		
		this.addItem("ROOT", key, 
			text, 
			image, 
			selected);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	APSTESTER.removeItem(String key);<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			this.doublearray = "[]";
		}
		
		var elementsJson = JSON.parse(this.doublearray);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.doublearray = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	APSTESTER.removeButton(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeButton (
			String key
			) {*		
		
		this.removeItem(key);
	*}

	/**
	 * Sets Color Palette Property
	 */	
	void setPaletteExample( /**Color Palette*/ String paletteExample){*
		this.paletteExample = paletteExample;
	*}

	/**
	 * Gets Color Palette Property
	 */	
	String getPaletteExample() {*
		return this.paletteExample;
	*}

	/**
	 * Sets A saple text Property
	 */	
	void setTextExample( /**A saple text*/ String textExample){*
		this.textExample = textExample;
	*}

	/**
	 * Gets A saple text Property
	 */	
	String getTextExample() {*
		return this.textExample;
	*}

	/**
	 * Sets Some numbers Property
	 */	
	void setSpinnerExample( /**Some numbers*/ int spinnerExample){*
		this.spinnerExample = spinnerExample;
	*}

	/**
	 * Gets Some numbers Property
	 */	
	int getSpinnerExample() {*
		return this.spinnerExample;
	*}

	/**
	 * Sets Simple String Array Property as StringArray
	 */	
	void setStringarray( /**Simple String Array*/ StringArray stringarray){*
		this.stringarray = stringarray;
	*}
	
	/** Gets Simple String Array Property as StringArray

 	<example>
	You want to ask for the current property value
	<code>
	APSTESTER.getStringarray();<br>
	</code>
	</example>
	 */
	StringArray getStringarray () {*		
		var elementsJson = JSON.parse(this.stringarray);
		return elementsJson;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for ApsTesterUI5
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.prototypes.ApsTesterUI5 extends org.scn.community.shared.Component {

	/**
	 * Sets Simple Choice Property
	 */	
	void setComboboxExample( /**Simple Choice*/ String comboboxExample){*
		this.comboboxExample = comboboxExample;
	*}

	/**
	 * Gets Simple Choice Property
	 */	
	String getComboboxExample() {*
		return this.comboboxExample;
	*}

	/**
	 * Sets Simple Color Property
	 */	
	void setColorExample( /**Simple Color*/ String colorExample){*
		this.colorExample = colorExample;
	*}

	/**
	 * Gets Simple Color Property
	 */	
	String getColorExample() {*
		return this.colorExample;
	*}



	/**
	 * Sets Ignore Totals Property
	 */	
	void setCheckboxExample( /**Ignore Totals*/ boolean checkboxExample){*
		this.checkboxExample = checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxExample() {*
		return this.checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxOnlyGetterExample() {*
		return this.checkboxOnlyGetterExample;
	*}

	/**
	 * Sets Color Palette Property
	 */	
	void setPaletteExample( /**Color Palette*/ String paletteExample){*
		this.paletteExample = paletteExample;
	*}

	/**
	 * Gets Color Palette Property
	 */	
	String getPaletteExample() {*
		return this.paletteExample;
	*}

	/**
	 * Sets A saple text Property
	 */	
	void setTextExample( /**A saple text*/ String textExample){*
		this.textExample = textExample;
	*}

	/**
	 * Gets A saple text Property
	 */	
	String getTextExample() {*
		return this.textExample;
	*}

	/**
	 * Sets Some numbers Property
	 */	
	void setSpinnerExample( /**Some numbers*/ int spinnerExample){*
		this.spinnerExample = spinnerExample;
	*}

	/**
	 * Gets Some numbers Property
	 */	
	int getSpinnerExample() {*
		return this.spinnerExample;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Class for ApplicationHeader
 */
class org.scn.community.prototypes.ApplicationHeaderE extends org.scn.community.shared.Component {
	
	/** Sets the user name that is displayed beside the welcome text. */
	void setUserName(
		/** User name */ String userName) {*
		this.userName = userName;	
	*}
	
	/** Returns the user name that is displayed beside the welcome text. */
	String getUserName() {*
		return this.userName;	
	*}

	/** Sets the text that is displayed beside the logo in the application header. */
	void setLogoText(
		/** Logo text */ String logoText) {*
		this.logoText = logoText;	
	*}
	
	/** Returns the text that is displayed beside the logo in the application header. */
	String getLogoText() {*
		return this.logoText;	
	*}
	
	/* Sets the value of the invisible property appName to the application name */  
	// @Visibility(private)
	void private_setAppInfoName() {*
		// APPLICATION.createInfoMessage("Name: " + APPLICATION.getInfo().name);
	    this.appName = "Event: " + APPLICATION.getInfo().name;
	*}
	
	/**
	 * Just a show case, but this will never work - 
	 * ValueTextList is just a representation for Java object which needs implementation of some interface
	 * and will be passed directly through ZTL - cannot be coded via JSON.
	 */
	void setValues(ValueTextList list) {*
		var that = this;
	
		var l = {};
		l.value = list;
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
		
		var string = list.toString();
		l.string = string;
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
	*}
	
	org.scn.community.shared.ValueTextArray getValueTextList() {*
		var myArray = [];
		
		myArray.push({"value": "A", "text": "A-T"});
		myArray.push({"value": "B", "text": "C-T"});
		myArray.push({"value": "C", "text": "B-T"});
	
		return myArray;  
	*}
	
	void fillIntoSelectionComponent(SelectionComponent selectionComponent, org.scn.community.shared.ValueTextArray list) {*
		selectionComponent.removeAllItems();
		
		var that = this;
		
		var l = {};
		l.value = list;
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
		
		for(var i=0;i<list.length;i++){
			if(this.isDebug()) {	l[list[i].value] = list[i].value + ": " + list[i].text; }
			selectionComponent.addItem(list[i].value, list[i].text);
		}
		
		if(this.isDebug()) {	DEBUG.inspectZtl(that, l)};
	*}
}


/**
 * Class for ApplicationHeader
 */
class org.scn.community.prototypes.ApplicationHeaderO extends org.scn.community.shared.Component {
	
	/** Sets the user name that is displayed beside the welcome text. */
	void setUserName(
		/** User name */ String userName) {*
		this.userName = userName;	
	*}
	
	/** Returns the user name that is displayed beside the welcome text. */
	String getUserName() {*
		return this.userName;	
	*}

	/** Sets the text that is displayed beside the logo in the application header. */
	void setLogoText(
		/** Logo text */ String logoText) {*
		this.logoText = logoText;	
	*}
	
	/** Returns the text that is displayed beside the logo in the application header. */
	String getLogoText() {*
		return this.logoText;	
	*}
	
	// @Visibility(private)
	void private_beforeRender() {*
		// APPLICATION.createInfoMessage("Name: " + APPLICATION.getInfo().name);
	    this.appName = "OnBeforeRender: " + APPLICATION.getInfo().name;
	*}
}
/**
 * Class for ProgressBar Properties
 */
class org.scn.community.prototypes.BarProperty {
  String title;
  String fillColor;
  String number;
  String numberUnit;
}

/**
 * Class for ProgressBar
 */
class org.scn.community.prototypes.ProgressSet extends org.scn.community.shared.Component {
	/**
	Sets bar thickness (-1 = auto)
	*/
	void setBarThickness(/* Thickness */ int thickness) {*
		this.barHeight = thickness;
	*}
	/**
	Gets bar thickness (-1 = auto)
	*/
	int getBarThickness() {*
		return this.barHeight;
	*}
	/**
	Sets inline labels to true/false
	*/
	void setInlineLabels(/* true/false */ boolean isInline) {*
		this.inlineLabels = isInline;
	*}
	/**
	Gets whether labels are inline are not
	*/
	boolean getInlineLabels() {*
		return this.inlineLabels;
	*}
	/**
	Gets Bar Selected
	*/
	String getBarClicked() {*
		return this.selectedBar;
	*}
	/** Remove All Bars
 	<example>
	Remove all bars
	<code>
	PROGRESSET_1.removeAllBars();<br>
	</code>
	</example>
	 */
	void removeAllBars () {*		
		this.barConfig = JSON.stringify([]);
	*}
	/** Remove a bar
 	<example>
	Remove a bar titled "Sales"
	<code>
	PROGRESSET_1.removeBar("Sales");<br>
	</code>
	</example>
	 */
	void removeBar (/*Tile Title*/String title) {*		
		var o = eval(this.barConfig);
		if(!o) o = [];
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		barConfig = JSON.stringify(o);
	*}
	com.sample.utilities.BarProperty getBarProperty(/*Title*/String title){*
		var r = {
			title : "",
			fillColor : "",
			number : "",
			numberUnit : ""
		}
		var o = eval(this.barConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1){
			var barConf = o[matchIndex];
			r.title = barConf.title;
			r.fillColor = barConf.fillColor;
			r.number = tileConf.number;
			r.numberUnit = tileConf.numberUnit;
		}
		return r;
	*}
	/** Adds or Updates a Bar (if title already exists)
 	<example>
	Add/Update a bar called "Sales"
	<code>
	PROGRESSET_1.addBar("Sales", "#FF0000", "1234", "USD");<br>
	</code>
	</example>
	 */
	void addBar (
			/*Title*/String title, 
			/*Number*/optional String number, 
			/*Number Unit*/optional String numberUnit,
			/*Fill Color*/optional String fillColor
			) {*		
		var o = eval(this.barConfig);
		if(!o) o = [];
		var bar = {
			title: title,
			fillColor: fillColor || "auto",
			number: number,
			numberUnit: numberUnit
		};	
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex==-1){	// New Bar
			o.push(bar);
		}else{	// Update Bar
			o[matchIndex] = bar;
		}
		barConfig = JSON.stringify(o);
	*}
}

/**
 * Class for BulletChart
 */
class org.scn.community.prototypes.BulletChart extends org.scn.community.shared.Component {
	/* get the unique key for the clicked bullet chart */
    String getClickedGraphKey() {*  
    	return this.clickedgraphkey;
    *}

}

/**
 * Generated ZTL Class for BulletChartGen
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.prototypes.BulletChartGen extends org.scn.community.shared.Component {

	/**
	 * Sets Graph Title Property
	 */	
	void setGraphTitle( /**Graph Title*/ String graphTitle){*
		this.graphTitle = graphTitle;
	*}

	/**
	 * Gets Graph Title Property
	 */	
	String getGraphTitle() {*
		return this.graphTitle;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Class for SapMList
 */
class org.scn.community.prototypes.SapMList extends org.scn.community.shared.Component {
	
}
/**
 * Class for RapidPrototype 
 */
class org.scn.community.prototypes.RapidPrototype extends org.scn.community.shared.Component {
	/* Returns the current value */
	String getHTML() {*
		return this.HTML;
	*}

	/* Sets the value */
	void setHTML(/* HTML */ String html) {*
		this.HTML = html;
	*}
	
	void setTerm( /* Placeholder Text */ String term, /* Index */ int index){*
		this["term"+index] = term;
	*}
	void setReplacement( /* Placeholder Text */ String replacement, /* Index */ int index){*
		this["replacement"+index] = replacement;
	*}
}

/**
 * Class for Tag Cloud
 */

class org.scn.community.prototypes.Tagcloud extends org.scn.community.shared.Component {

/* Returns the Key of the currently selected Tree Element. */
	String getSelectedNodeKey() {*
		return this.selectedNode;
	*}
	
}
