
/**
 * Generated ZTL Class for ApsTester
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.prototypes.ApsTester extends org.scn.community.shared.Component {

	/**
	 * Sets Ignore Totals Property
	 */	
	void setCheckboxExample( /**Ignore Totals*/ boolean checkboxExample){*
		this.checkboxExample = checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxExample() {*
		return this.checkboxExample;
	*}

	/**
	 * Gets Ignore Totals Property
	 */	
	boolean isCheckboxOnlyGetterExample() {*
		return this.checkboxOnlyGetterExample;
	*}

	/**
	 * Sets Simple Color Property
	 */	
	void setColorExample( /**Simple Color*/ String colorExample){*
		this.colorExample = colorExample;
	*}

	/**
	 * Gets Simple Color Property
	 */	
	String getColorExample() {*
		return this.colorExample;
	*}

	/**
	 * Sets Simple Choice Property by String
	 */	
	void setComboboxExampleByString( /**Simple Choice*/ String comboboxExample){*
		this.comboboxExample = comboboxExample;
	*}

	/**
	 * Gets Simple Choice Property as String
	 */	
	String getComboboxExampleAsString() {*
		return this.comboboxExample;
	*}
	
	/**
	 * Sets Simple Choice Property by Choice Option
	 */	
	void setComboboxExample( /**Simple Choice*/ org_scn_community_shared_Enumfield comboboxExample){*
		this.comboboxExample = comboboxExample;
	*}
	
	/**
	 * Gets Simple Choice Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getComboboxExample() {*
		return this.comboboxExample;
	*}



	/** Adds an element containing parentKey [String], key [String], text [String], image [String], selected [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	APSTESTER.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);<br>
	APSTESTER.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);
	</code>
	</example>
	 */
	void addItem (
			/**The key of the parent button*/String parentKey, 
			/**Unique key of this item*/String key, 
			/**Text for the item*/String text, 
			/**Given image for the item*/optional String image, 
			/**Selection state of the item*/optional boolean selected
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		if(image == undefined) { image = "";}
		if(selected == undefined) { selected = false;}
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			image:image, 
			selected:selected 
			};
	
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			this.doublearray = "[]";
		}
		
		var elementsJson = JSON.parse(this.doublearray);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.doublearray = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], image [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addButton (
			/**Unique key of this button*/String key, 
			/**Text for the button*/String text, 
			/**Given image for the button*/optional String image, 
			/**Selection state of the button*/optional boolean selected
			) {*		
		
		this.addItem("ROOT", key, 
			text, 
			image, 
			selected);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	APSTESTER.removeItem(String key);<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			this.doublearray = "[]";
		}
		
		var elementsJson = JSON.parse(this.doublearray);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.doublearray = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	APSTESTER.removeButton(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeButton (
			String key
			) {*		
		
		this.removeItem(key);
	*}

	/**
	 * Gets Buttons As JSON String
	 */	
	String getButtonsAsJSON() {*
		var jsonObject = JSON.parse(this.doublearray);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Selected keys<br/>
	 */
	void setSelectedButtonKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.doublearray);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.doublearray = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected Key<br/>
	 */
	void setSelectedButtonKey (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.doublearray);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.doublearray = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected keys<br/>
	 */
	void cleanAllSelectedButtonKeys (
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.doublearray = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.pack.KeyArray getSelectedButtonKeysArray (
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.doublearray);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Selected keys<br/>
	 */
	void setSelectedItemKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.doublearray);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.doublearray = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected Key<br/>
	 */
	void setSelectedItemKey (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.doublearray);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.doublearray = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected keys<br/>
	 */
	void cleanAllSelectedItemKeys (
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.doublearray = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.pack.KeyArray getSelectedItemKeysArray (
			) 
	{*
		if (this.doublearray === undefined || this.doublearray === "" || this.doublearray === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.doublearray);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}


	/**
	 * Sets Color Palette Property
	 */	
	void setPaletteExample( /**Color Palette*/ String paletteExample){*
		this.paletteExample = paletteExample;
	*}

	/**
	 * Gets Color Palette Property
	 */	
	String getPaletteExample() {*
		return this.paletteExample;
	*}

	/** Adds a root element containing key [String], text [String], image [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	APSTESTER.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addButton (
			/**Unique key of this button*/String key, 
			/**Text for the button*/String text, 
			/**Given image for the button*/optional String image, 
			/**Selection state of the button*/optional boolean selected
			) {*

		if(image == undefined) { image = "";}
		if(selected == undefined) { selected = false;}
		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			image:image, 
			selected:selected
			};

		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			this.singlearray = "[]";
		}

		var elementsJson = JSON.parse(this.singlearray);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.singlearray = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	APSTESTER.removeButton(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeButton (
			String key
			) {*

		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			this.singlearray = "[]";
		}

		var elementsJson = JSON.parse(this.singlearray);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.singlearray = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	APSTESTER.insertButton(index [int], key [String], text [String], image [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertButton (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique key of this button*/String key, 
			/**Text for the button*/String text, 
			/**Given image for the button*/optional String image, 
			/**Selection state of the button*/optional boolean selected
			) {*

		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			this.singlearray = "[]";
		}
		
		var elementsJson = JSON.parse(this.singlearray);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			image:image, 
			selected:selected
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.singlearray = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Button<br/>
	 */
	void updateButton (
			/**Unique key of this button*/String key, 
			/**Text for the button*/String text, 
			/**Given image for the button*/optional String image, 
			/**Selection state of the button*/optional boolean selected
			) 
	{*
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			this.singlearray = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			image:image, 
			selected:selected
		};

		var elementsJson = JSON.parse(this.singlearray);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.singlearray = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getButtonAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			this.singlearray = "[]";
		}

		var elementsJson = JSON.parse(this.singlearray);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Buttons As JSON String
	 */	
	String getButtonsAsJSON() {*
		var jsonObject = JSON.parse(this.singlearray);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Selected keys<br/>
	 */
	void setSelectedButtonKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.singlearray);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.singlearray = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected Key<br/>
	 */
	void setSelectedButtonKey (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.singlearray);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.singlearray = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected keys<br/>
	 */
	void cleanAllSelectedButtonKeys (
			) 
	{*
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.singlearray = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.pack.KeyArray getSelectedButtonKeysArray (
			) 
	{*
		if (this.singlearray === undefined || this.singlearray === "" || this.singlearray === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.singlearray);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Sets Some numbers Property
	 */	
	void setSpinnerExample( /**Some numbers*/ int spinnerExample){*
		this.spinnerExample = spinnerExample;
	*}

	/**
	 * Gets Some numbers Property
	 */	
	int getSpinnerExample() {*
		return this.spinnerExample;
	*}

	/**
	 * Sets Simple String Array Property as StringArray
	 */	
	void setStringarray( /**Simple String Array*/ StringArray stringarray){*
		this.stringarray = stringarray;
	*}
	
	/** Gets Simple String Array Property as StringArray

 	<example>
	You want to ask for the current property value
	<code>
	APSTESTER.getStringarray();<br>
	</code>
	</example>
	 */
	StringArray getStringarray () {*		
		var elementsJson = JSON.parse(this.stringarray);
		return elementsJson;
	*}

	/**
	 * Sets A saple text Property
	 */	
	void setTextExample( /**A saple text*/ String textExample){*
		this.textExample = textExample;
	*}

	/**
	 * Gets A saple text Property
	 */	
	String getTextExample() {*
		return this.textExample;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}
