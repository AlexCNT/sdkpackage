/** GENERATED BY SAPUI5 CONTROLS DEFINITIONS */

/**
 * Generated ZTL Class for BulletChart
 * 
 * DO NOT EDIT, ROOT SOURCE is based on SAP UI5 specification
 */
class org.scn.community.shared.ui5.BulletChart extends org.scn.community.shared.DataComponent {

	/** Adds a root element containing key [String], color [String], value [String].

 	<example>
	You want to add 2 root elements
	<code>
	BULLETCHART.addActual(key [String], color [String], value [String]);<br>
	BULLETCHART.addActual(key [String], color [String], value [String]);<br>
	<br>
	</code>
	</example>
	 */
	void setActual (
			/**Unique Property Key*/String key, 
			/**color*/String color, 
			/**value*/String value
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			color:color, 
			value:value
			};

		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			this.actual = "[]";
		}

		var elementsJson = JSON.parse(this.actual);

		// clear always
		if(elementsJson.length == 1) {
			elementsJson = [];
		}

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.actual = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	BULLETCHART.removeActual(String key);<br>
	<br>
	</code>
	</example>
	 */
	void clearActual (
			
			) {*

		this.actual = "[]";
	*}

	/**
	 * Updates given Actual<br/>
	 */
	void updateActual (
			/**Unique Property Key*/String key, 
			/**color*/String color, 
			/**value*/String value
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			this.actual = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			color:color, 
			value:value
		};

		var elementsJson = JSON.parse(this.actual);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.actual = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getActual (
			
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			this.actual = "[]";
		}

		var elementsJson = JSON.parse(this.actual);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == 0) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Actuals As JSON String
	 */	
	String getActualsAsJSON() {*
		var jsonObject = JSON.parse(this.actual);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Color for Actual keys<br/>
	 */
	void setActualColors (
			/**/ String keys,
			/**/ String separator,
	        /* Color */ String color
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.actual);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].color = color;
					break;
				}
			}
		}
		
		this.actual = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Color for Actual Key<br/>
	 */
	void setActualColor (
			/**/ String key,
			/**/ String color
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.actual);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].color = color;
				break;
			}
		}

		this.actual = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Checks Existence of Color for Actual Key<br/>
	 */
	boolean hasActualColor (
			/**/ String key
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.actual);

		var exists = false;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				exists = true;
				break;
			}
		}
		
		return exists;
	*}
	/**
	 * Sets the Value for Actual keys<br/>
	 */
	void setActualValues (
			/**/ String keys,
			/**/ String separator,
	        /* Value */ String value
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.actual);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].value = value;
					break;
				}
			}
		}
		
		this.actual = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Value for Actual Key<br/>
	 */
	void setActualValue (
			/**/ String key,
			/**/ String value
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.actual);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].value = value;
				break;
			}
		}

		this.actual = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Checks Existence of Value for Actual Key<br/>
	 */
	boolean hasActualValue (
			/**/ String key
			) 
	{*
		if (this.actual === undefined || this.actual === "" || this.actual === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.actual);

		var exists = false;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				exists = true;
				break;
			}
		}
		
		return exists;
	*}



	/**
	 * Sets Actual Value Label Property
	 */	
	void setActualValueLabel( /**Actual Value Label*/ String actualValueLabel){*
		this.actualValueLabel = actualValueLabel;
	*}

	/**
	 * Gets Actual Value Label Property
	 */	
	String getActualValueLabel() {*
		return this.actualValueLabel;
	*}

	/**
	 * Sets Content Width Property
	 */	
	void setContentWidth( /**Content Width*/ int contentWidth){*
		this.contentWidth = contentWidth;
	*}

	/**
	 * Gets Content Width Property
	 */	
	int getContentWidth() {*
		return this.contentWidth;
	*}

	/**
	 * Sets Delta Value Label Property
	 */	
	void setDeltaValueLabel( /**Delta Value Label*/ String deltaValueLabel){*
		this.deltaValueLabel = deltaValueLabel;
	*}

	/**
	 * Gets Delta Value Label Property
	 */	
	String getDeltaValueLabel() {*
		return this.deltaValueLabel;
	*}

	/**
	 * Sets Forecast Value Property
	 */	
	void setForecastValue( /**Forecast Value*/ float forecastValue){*
		this.forecastValue = forecastValue;
	*}

	/**
	 * Gets Forecast Value Property
	 */	
	float getForecastValue() {*
		return this.forecastValue;
	*}

	/**
	 * Sets Max Value Property
	 */	
	void setMaxValue( /**Max Value*/ float maxValue){*
		this.maxValue = maxValue;
	*}

	/**
	 * Gets Max Value Property
	 */	
	float getMaxValue() {*
		return this.maxValue;
	*}

	/**
	 * Sets Min Value Property
	 */	
	void setMinValue( /**Min Value*/ float minValue){*
		this.minValue = minValue;
	*}

	/**
	 * Gets Min Value Property
	 */	
	float getMinValue() {*
		return this.minValue;
	*}

	/**
	 * Sets Mode Property by String
	 */	
	void setModeByString( /**Mode*/ String mode){*
		this.mode = mode;
	*}

	/**
	 * Gets Mode Property as String
	 */	
	String getModeAsString() {*
		return this.mode;
	*}
	
	/**
	 * Sets Mode Property by Choice Option
	 */	
	void setMode( /**Mode*/ org_scn_community_shared_BulletChartModeEnumfield mode){*
		this.mode = mode;
	*}
	
	/**
	 * Gets Mode Property as Choice Option
	 */	
	org_scn_community_shared_BulletChartModeEnumfield getMode() {*
		return this.mode;
	*}

	/**
	 * Sets Scale Property
	 */	
	void setScale( /**Scale*/ String scale){*
		this.scale = scale;
	*}

	/**
	 * Gets Scale Property
	 */	
	String getScale() {*
		return this.scale;
	*}

	/**
	 * Sets Scale Colour Property by String
	 */	
	void setScaleColorByString( /**Scale Colour*/ String scaleColor){*
		this.scaleColor = scaleColor;
	*}

	/**
	 * Gets Scale Colour Property as String
	 */	
	String getScaleColorAsString() {*
		return this.scaleColor;
	*}
	
	/**
	 * Sets Scale Colour Property by Choice Option
	 */	
	void setScaleColor( /**Scale Colour*/ org_scn_community_shared_CommonBackgroundEnumfield scaleColor){*
		this.scaleColor = scaleColor;
	*}
	
	/**
	 * Gets Scale Colour Property as Choice Option
	 */	
	org_scn_community_shared_CommonBackgroundEnumfield getScaleColor() {*
		return this.scaleColor;
	*}

	/**
	 * Sets Show Actual Value Property
	 */	
	void setShowActualValue( /**Show Actual Value*/ boolean showActualValue){*
		this.showActualValue = showActualValue;
	*}

	/**
	 * Gets Show Actual Value Property
	 */	
	boolean isShowActualValue() {*
		return this.showActualValue;
	*}

	/**
	 * Sets Show Delta Value Property
	 */	
	void setShowDeltaValue( /**Show Delta Value*/ boolean showDeltaValue){*
		this.showDeltaValue = showDeltaValue;
	*}

	/**
	 * Gets Show Delta Value Property
	 */	
	boolean isShowDeltaValue() {*
		return this.showDeltaValue;
	*}

	/**
	 * Sets Show Target Value Property
	 */	
	void setShowTargetValue( /**Show Target Value*/ boolean showTargetValue){*
		this.showTargetValue = showTargetValue;
	*}

	/**
	 * Gets Show Target Value Property
	 */	
	boolean isShowTargetValue() {*
		return this.showTargetValue;
	*}

	/**
	 * Sets Show Value Marker Property
	 */	
	void setShowValueMarker( /**Show Value Marker*/ boolean showValueMarker){*
		this.showValueMarker = showValueMarker;
	*}

	/**
	 * Gets Show Value Marker Property
	 */	
	boolean isShowValueMarker() {*
		return this.showValueMarker;
	*}

	/**
	 * Sets Size Property by String
	 */	
	void setSizeByString( /**Size*/ String size){*
		this.size = size;
	*}

	/**
	 * Gets Size Property as String
	 */	
	String getSizeAsString() {*
		return this.size;
	*}
	
	/**
	 * Sets Size Property by Choice Option
	 */	
	void setSize( /**Size*/ org_scn_community_shared_InfoTileSizeEnumfield size){*
		this.size = size;
	*}
	
	/**
	 * Gets Size Property as Choice Option
	 */	
	org_scn_community_shared_InfoTileSizeEnumfield getSize() {*
		return this.size;
	*}

	/**
	 * Sets Target Value Property
	 */	
	void setTargetValue( /**Target Value*/ float targetValue){*
		this.targetValue = targetValue;
	*}

	/**
	 * Gets Target Value Property
	 */	
	float getTargetValue() {*
		return this.targetValue;
	*}

	/**
	 * Sets Target Value Label Property
	 */	
	void setTargetValueLabel( /**Target Value Label*/ String targetValueLabel){*
		this.targetValueLabel = targetValueLabel;
	*}

	/**
	 * Gets Target Value Label Property
	 */	
	String getTargetValueLabel() {*
		return this.targetValueLabel;
	*}

	/** Adds a root element containing key [String], color [String], value [String].

 	<example>
	You want to add 2 root elements
	<code>
	BULLETCHART.addThreshold(key [String], color [String], value [String]);<br>
	BULLETCHART.addThreshold(key [String], color [String], value [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addThreshold (
			/**Unique Property Key*/String key, 
			/**color*/String color, 
			/**value*/String value
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			color:color, 
			value:value
			};

		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			this.threshold = "[]";
		}

		var elementsJson = JSON.parse(this.threshold);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.threshold = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	BULLETCHART.removeThreshold(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeThreshold (
			String key
			) {*

		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			this.threshold = "[]";
		}

		var elementsJson = JSON.parse(this.threshold);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.threshold = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	BULLETCHART.insertThreshold(index [int], key [String], color [String], value [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertThreshold (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Property Key*/String key, 
			/**color*/String color, 
			/**value*/String value
			) {*

		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			this.threshold = "[]";
		}
		
		var elementsJson = JSON.parse(this.threshold);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			color:color, 
			value:value
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.threshold = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Threshold<br/>
	 */
	void updateThreshold (
			/**Unique Property Key*/String key, 
			/**color*/String color, 
			/**value*/String value
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			this.threshold = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			color:color, 
			value:value
		};

		var elementsJson = JSON.parse(this.threshold);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.threshold = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getThresholdAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			this.threshold = "[]";
		}

		var elementsJson = JSON.parse(this.threshold);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Thresholds As JSON String
	 */	
	String getThresholdsAsJSON() {*
		var jsonObject = JSON.parse(this.threshold);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Color for Threshold keys<br/>
	 */
	void setThresholdColors (
			/**/ String keys,
			/**/ String separator,
	        /* Color */ String color
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.threshold);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].color = color;
					break;
				}
			}
		}
		
		this.threshold = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Color for Threshold Key<br/>
	 */
	void setThresholdColor (
			/**/ String key,
			/**/ String color
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.threshold);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].color = color;
				break;
			}
		}

		this.threshold = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Checks Existence of Color for Threshold Key<br/>
	 */
	boolean hasThresholdColor (
			/**/ String key
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.threshold);

		var exists = false;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				exists = true;
				break;
			}
		}
		
		return exists;
	*}
	/**
	 * Sets the Value for Threshold keys<br/>
	 */
	void setThresholdValues (
			/**/ String keys,
			/**/ String separator,
	        /* Value */ String value
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.threshold);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].value = value;
					break;
				}
			}
		}
		
		this.threshold = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Value for Threshold Key<br/>
	 */
	void setThresholdValue (
			/**/ String key,
			/**/ String value
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.threshold);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].value = value;
				break;
			}
		}

		this.threshold = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Checks Existence of Value for Threshold Key<br/>
	 */
	boolean hasThresholdValue (
			/**/ String key
			) 
	{*
		if (this.threshold === undefined || this.threshold === "" || this.threshold === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.threshold);

		var exists = false;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				exists = true;
				break;
			}
		}
		
		return exists;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}


/**
 * Generated ZTL Class for BulletChartData
 * 
 * DO NOT EDIT, ROOT SOURCE is based on SAP UI5 specification
 */
class org.scn.community.shared.ui5.BulletChartData extends org.scn.community.shared.DataComponent {

	/**
	 * Sets Colour Property by String
	 */	
	void setColorByString( /**Colour*/ String color){*
		this.color = color;
	*}

	/**
	 * Gets Colour Property as String
	 */	
	String getColorAsString() {*
		return this.color;
	*}
	
	/**
	 * Sets Colour Property by Choice Option
	 */	
	void setColor( /**Colour*/ org_scn_community_shared_InfoTileValueColorEnumfield color){*
		this.color = color;
	*}
	
	/**
	 * Gets Colour Property as Choice Option
	 */	
	org_scn_community_shared_InfoTileValueColorEnumfield getColor() {*
		return this.color;
	*}

	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ float value){*
		this.value = value;
	*}

	/**
	 * Gets Value Property
	 */	
	float getValue() {*
		return this.value;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}
