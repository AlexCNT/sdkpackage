
/**
 * Generated ZTL Class for UI5Table
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.databound.UI5Table extends org.scn.community.shared.DataComponent {

	/**
	 * Sets Allow Reorder of Columns Property
	 */	
	void setAllowColumnReorder( /**Allow Reorder of Columns*/ boolean allowColumnReorder){*
		this.DAllowColumnReorder = allowColumnReorder;
	*}

	/**
	 * Gets Allow Reorder of Columns Property
	 */	
	boolean isAllowColumnReorder() {*
		return this.DAllowColumnReorder;
	*}

	/**
	 * Sets Allow Filter in Columns Property
	 */	
	void setAllowFilter( /**Allow Filter in Columns*/ boolean allowFilter){*
		this.DAllowFilter = allowFilter;
	*}

	/**
	 * Gets Allow Filter in Columns Property
	 */	
	boolean isAllowFilter() {*
		return this.DAllowFilter;
	*}

	/**
	 * Sets Allow Selection in the Table Property
	 */	
	void setAllowSelection( /**Allow Selection in the Table*/ boolean allowSelection){*
		this.DAllowSelection = allowSelection;
	*}

	/**
	 * Gets Allow Selection in the Table Property
	 */	
	boolean isAllowSelection() {*
		return this.DAllowSelection;
	*}

	/**
	 * Sets Allow Sort in Columns Property
	 */	
	void setAllowSort( /**Allow Sort in Columns*/ boolean allowSort){*
		this.DAllowSort = allowSort;
	*}

	/**
	 * Gets Allow Sort in Columns Property
	 */	
	boolean isAllowSort() {*
		return this.DAllowSort;
	*}

	/** Adds a root element containing key [String], width [String].

 	<example>
	You want to add 2 root elements
	<code>
	UI5TABLE.addColumnWidthEntry(key [String], width [String]);<br>
	UI5TABLE.addColumnWidthEntry(key [String], width [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addColumnWidthEntry (
			/**Column index (0-based)*/String key, 
			/**Width with unit (e.g. 200px | 30%)*/String width
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			width:width
			};

		if (this.DDataColWidths === undefined || this.DDataColWidths === "" || this.DDataColWidths === "<delete>"){
			this.DDataColWidths = "[]";
		}

		var elementsJson = JSON.parse(this.DDataColWidths);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.DDataColWidths = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	UI5TABLE.removeColumnWidthEntry(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeColumnWidthEntry (
			String key
			) {*

		if (this.DDataColWidths === undefined || this.DDataColWidths === "" || this.DDataColWidths === "<delete>"){
			this.DDataColWidths = "[]";
		}

		var elementsJson = JSON.parse(this.DDataColWidths);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.DDataColWidths = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	UI5TABLE.insertColumnWidthEntry(index [int], key [String], width [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertColumnWidthEntry (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Column index (0-based)*/String key, 
			/**Width with unit (e.g. 200px | 30%)*/String width
			) {*

		if (this.DDataColWidths === undefined || this.DDataColWidths === "" || this.DDataColWidths === "<delete>"){
			this.DDataColWidths = "[]";
		}
		
		var elementsJson = JSON.parse(this.DDataColWidths);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			width:width
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.DDataColWidths = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given ColumnWidthEntry<br/>
	 */
	void updateColumnWidthEntry (
			/**Column index (0-based)*/String key, 
			/**Width with unit (e.g. 200px | 30%)*/String width
			) 
	{*
		if (this.DDataColWidths === undefined || this.DDataColWidths === "" || this.DDataColWidths === "<delete>"){
			this.DDataColWidths = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			width:width
		};

		var elementsJson = JSON.parse(this.DDataColWidths);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.DDataColWidths = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getColumnWidthEntryAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.DDataColWidths === undefined || this.DDataColWidths === "" || this.DDataColWidths === "<delete>"){
			this.DDataColWidths = "[]";
		}

		var elementsJson = JSON.parse(this.DDataColWidths);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets ColumnWidthEntrys As JSON String
	 */	
	String getColumnWidthEntrysAsJSON() {*
		var jsonObject = JSON.parse(this.DDataColWidths);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Width for ColumnWidthEntry keys<br/>
	 */
	void setColumnWidthEntryWidths (
			/**/ String keys,
			/**/ String separator,
	        /* Width */ String width
			) 
	{*
		if (this.DDataColWidths === undefined || this.DDataColWidths === "" || this.DDataColWidths === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DDataColWidths);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].width = width;
					break;
				}
			}
		}
		
		this.DDataColWidths = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Width for ColumnWidthEntry Key<br/>
	 */
	void setColumnWidthEntryWidth (
			/**/ String key,
			/**/ String width
			) 
	{*
		if (this.DDataColWidths === undefined || this.DDataColWidths === "" || this.DDataColWidths === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DDataColWidths);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].width = width;
				break;
			}
		}

		this.DDataColWidths = JSON.stringify(elementsJson);
	*}



	/**
	 * Sets Central Result Set with Data Property
	 */	
	void setDataProvisioner( /**Central Result Set with Data*/ String dataProvisioner){*
		this.DDataProvisioner = dataProvisioner;
	*}

	/**
	 * Gets Central Result Set with Data Property
	 */	
	String getDataProvisioner() {*
		return this.DDataProvisioner;
	*}

	/**
	 * Sets Empty Value For Data Cell Property
	 */	
	void setEmptyDataValue( /**Empty Value For Data Cell*/ String emptyDataValue){*
		this.DEmptyDataValue = emptyDataValue;
	*}

	/**
	 * Gets Empty Value For Data Cell Property
	 */	
	String getEmptyDataValue() {*
		return this.DEmptyDataValue;
	*}

	/**
	 * Sets Empty Value For Header Cell Property
	 */	
	void setEmptyHeaderValue( /**Empty Value For Header Cell*/ String emptyHeaderValue){*
		this.DEmptyHeaderValue = emptyHeaderValue;
	*}

	/**
	 * Gets Empty Value For Header Cell Property
	 */	
	String getEmptyHeaderValue() {*
		return this.DEmptyHeaderValue;
	*}

	/**
	 * Sets Fix Header Rows Property
	 */	
	void setFixedHeader( /**Fix Header Rows*/ boolean fixedHeader){*
		this.DFixedHeader = fixedHeader;
	*}

	/**
	 * Gets Fix Header Rows Property
	 */	
	boolean isFixedHeader() {*
		return this.DFixedHeader;
	*}

	/**
	 * Sets (non-stable) Formatting Condition Property
	 */	
	void setFormattingCondition( /**(non-stable) Formatting Condition*/ String formattingCondition){*
		this.DFormattingCondition = formattingCondition;
	*}

	/**
	 * Gets (non-stable) Formatting Condition Property
	 */	
	String getFormattingCondition() {*
		return this.DFormattingCondition;
	*}

	/**
	 * Sets (non-stable) Formatting Operator Property by String
	 */	
	void setFormattingOperatorByString( /**(non-stable) Formatting Operator*/ String formattingOperator){*
		this.DFormattingOperator = formattingOperator;
	*}

	/**
	 * Gets (non-stable) Formatting Operator Property as String
	 */	
	String getFormattingOperatorAsString() {*
		return this.DFormattingOperator;
	*}
	
	/**
	 * Sets (non-stable) Formatting Operator Property by Choice Option
	 */	
	void setFormattingOperator( /**(non-stable) Formatting Operator*/ org_scn_community_shared_FormattingOperatorEnumfield formattingOperator){*
		this.DFormattingOperator = formattingOperator;
	*}
	
	/**
	 * Gets (non-stable) Formatting Operator Property as Choice Option
	 */	
	org_scn_community_shared_FormattingOperatorEnumfield getFormattingOperator() {*
		return this.DFormattingOperator;
	*}

	/**
	 * Sets Header Column Width in px Property
	 */	
	void setHeaderColWidth( /**Header Column Width in px*/ int headerColWidth){*
		this.DHeaderColWidth = headerColWidth;
	*}

	/**
	 * Gets Header Column Width in px Property
	 */	
	int getHeaderColWidth() {*
		return this.DHeaderColWidth;
	*}

	/**
	 * Sets Ignore Results Property
	 */	
	void setIgnoreResults( /**Ignore Results*/ boolean ignoreResults){*
		this.DIgnoreResults = ignoreResults;
	*}

	/**
	 * Gets Ignore Results Property
	 */	
	boolean isIgnoreResults() {*
		return this.DIgnoreResults;
	*}

	/**
	 * Sets Navigation Mode Property by String
	 */	
	void setNavigationModeByString( /**Navigation Mode*/ String navigationMode){*
		this.DNavigationMode = navigationMode;
	*}

	/**
	 * Gets Navigation Mode Property as String
	 */	
	String getNavigationModeAsString() {*
		return this.DNavigationMode;
	*}
	
	/**
	 * Sets Navigation Mode Property by Choice Option
	 */	
	void setNavigationMode( /**Navigation Mode*/ org_scn_community_shared_NavigationModeEnumfield navigationMode){*
		this.DNavigationMode = navigationMode;
	*}
	
	/**
	 * Gets Navigation Mode Property as Choice Option
	 */	
	org_scn_community_shared_NavigationModeEnumfield getNavigationMode() {*
		return this.DNavigationMode;
	*}

	/**
	 * Sets Row Height in px Property
	 */	
	void setRowHeight( /**Row Height in px*/ int rowHeight){*
		this.DRowHeight = rowHeight;
	*}

	/**
	 * Gets Row Height in px Property
	 */	
	int getRowHeight() {*
		return this.DRowHeight;
	*}



	/**
	 * Sets Visible Row Count Property
	 */	
	void setVisibleRowCount( /**Visible Row Count*/ int visibleRowCount){*
		this.DVisibleRowCount = visibleRowCount;
	*}

	/**
	 * Gets Visible Row Count Property
	 */	
	int getVisibleRowCount() {*
		return this.DVisibleRowCount;
	*}








	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/**
	 * Gets Selection As JSON String
	 */	
	String getSelectionAsJSON() {*
		var jsonObject = JSON.parse(this.DSelection);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Gets Selection As JSON String
	 */	
	JSON getSelectionAsJSONObject() {*
		var jsonObject = JSON.parse(this.DSelection);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Selected Row Index (0 - based)
	 */
	int getSelectedRow() {*
		var jsonObject = JSON.parse(this.DSelection);
		return jsonObject.row;
	*}
	
	/**
	 * Selected Column Index (0 - based)
	 */
	int getSelectedColumn() {*
		var jsonObject = JSON.parse(this.DSelection);
		return jsonObject.column;
	*}

	/**
	 * Selected Visual Row Index (0 - based)
	 */
	int getSelectedVisualRow() {*
		var jsonObject = JSON.parse(this.DSelection);
		return jsonObject.visualRow;
	*}
	
	/**
	 * Selected Visual Column Index (0 - based)
	 */
	int getSelectedVisualColumn() {*
		var jsonObject = JSON.parse(this.DSelection);
		return jsonObject.visualColumn;
	*}

	/**
	 * Selected Value Content
	 */
	int getSelectedValue() {*
		var jsonObject = JSON.parse(this.DSelection);
		return jsonObject.value;
	*}
	
	/**
	 * Selection Space (Header, Data)
	 */
	String getSelectionSpace() {*
		var jsonObject = JSON.parse(this.DSelection);
		return jsonObject.value;
	*}

	/**
	 * Return dimensions and corresponding members for the selection as array
	 */
	org.scn.community.shared.DimensionMemberArray getSelectionDimensionMembers() {*
		var jsonObject = JSON.parse(this.DSelection);
		
		var tempA = [];
		
		for(var i=0;i<jsonObject.rowDimensions.length;i++){
			var itemDef = { 
				"dimension": jsonObject.rowDimensions[i].key, 
				"member": jsonObject.rowKeys[i]
			};
			
			tempA.push(itemDef);
		}
		
		if(jsonObject.columnDimensions) {
			for(var i=0;i<jsonObject.columnDimensions.length;i++){
				var itemDef = { 
					"dimension": jsonObject.columnDimensions[i].key, 
					"member": jsonObject.columnKeys[i]
				};
				
				tempA.push(itemDef);
			}
		}
		
		return tempA;
	*}

	/**
	 * Values of the Row
	 */
	StringArray getSelectionRowValues() {*
		var jsonObject = JSON.parse(this.DSelection);
		
	
		var tempA = [];
		for(var i=0;i<jsonObject.rowValues.length;i++){
			var itemDef = jsonObject.rowValues[i];
			
			tempA.push(itemDef);
		}

		return tempA;
	*}
}
