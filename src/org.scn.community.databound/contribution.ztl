/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2014, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */

class org.scn.community.databound.Table extends Component {

	/* Sets the data displayed in the first column. */
	void setColumn1Selection(/* A selection specifying a single column (or row) of keyfigures from a data source */ ResultCellListSelection selection) {*
		this.column1 = this.stringifySelection(selection);
	*}

	/* Sets the data displayed in the second column. */
	void setColumn2Selection(/* A selection specifying a single column (or row) of keyfigures from a data source */ ResultCellListSelection selection) {*
		this.column2 = this.stringifySelection(selection);
	*}

	/* Sets the data displayed in the third column. */
	void setColumn3Selection(/* A selection specifying a single column (or row) of keyfigures from a data source */ ResultCellListSelection selection) {*
		this.column3 = this.stringifySelection(selection);
	*}
}
/**
 * Class for DataDropDown
 */
class org.scn.community.databound.DropDown extends org.scn.community.shared.DataComponent {

	void private_onSelectionChanged () {*
		var key = this.getSelectedKey();
	
		this.internalWriteLog("Internal Selection on Dimension: " + this.getDimension() + " | " + key);

		if(key == "-CLEAR-") {
			this.getDataSource().clearFilter(this.getDimension());
		} else {
			this.getDataSource().setFilter(this.getDimension(), key);	
		}
	*}
	
	void private_onBeforeRender() {*
		
	*}
	
	void reloadDataSource() {*
		// unfortunately this does not work correctly as this method is too late included (as first method on rendering, instead on before rendering)
		// this causes incorrect events in a phase where events are not allowed any more... (error: DS_1 cannot be changed in rendering phase)
		// workaround is to call once explicitelly "getMembers" on this dimension
		if(this.DBindingMode == "Master Data") {
			this.internalWriteLog("Call Members on Dimension: " + this.getDimension() + " | " + this.DMaxMembers);
			this.DElements = this.superReadMembers(this.getDimension(), this.DMaxMembers);	
		}
	
		// check current selection from data source
		var selectionExt = this.getDataSource().getFilterExt(this.getDimension());
		this.internalWriteLog("Selection on Dimension: " + this.getDimension() + " | " + selectionExt);

		this.DSelectedKeyExtFull = selectionExt;
		
		// only single member
		if(selectionExt.indexOf(";") == -1 && selectionExt.indexOf(" - ") == -1) {
			this.DSelectedKeyExt = selectionExt;	
		} else {
			this.DSelectedKeyExt = "";
		}
	*}

	/** returns the selected key 
    <example>
	You want to get first and second selected key in the range
	<code>
    var selection1 = DATARANGESLIDER_1.getSelectedKey();
	var selection2 = DATARANGESLIDER_1.getSelectedKey2();
	
	APPLICATION.createInfoMessage("Selected Range: " + selection1 + " - " + selection2);
	APPLICATION.createInfoMessage("Selected Range Keys: " + DATARANGESLIDER_1.getSelectedKeys());
	
	if(selection1.indexOf("-N/A-") > -1 || selection2.indexOf("-N/A-") > -1) {
		// do nothing
	} else {
		DS_1.setFilterExt("0BC_PERS1", "" + DATARANGESLIDER_1.getSelectedKey()  + " - " + DATARANGESLIDER_1.getSelectedKey2());
	}
	</code>
	</example>
	*/
	String getSelectedKey () {*
		return this.DSelectedKey;	
	*}

	/** returns the selected text */
	String getSelectedText () {*
		return this.DSelectedText;	
	*}
	
	/** gest the dimension */
	String getDimension () {*
		return this.DDimension;	
	*}
	
	/** sets the dimension */
	void setDimension (String dimension) {*
		this.DDimension = dimension;	
	*}
	
	/** sets the pause refresh flag */
	void pauseRefresh () {*
		this.DDoRefresh = false;	
	*}

	/** sets the pause refresh flag */
	void allowRefresh () {*
		this.DDoRefresh = true;	
	*}
}
/**
 * Class for D3Hier
 */
class org.scn.community.databound.jpd3hier extends Component {

	/* Returns the Key of the currently selected Tree Element. */
	String getSelectedNodeKey() {*
		return this.selectedNode;
	*}
	
	/* Returns the Dimension Key containing the hierarchy of the datasource. */
	String getHierarchyDimensionKey() {*
		return this.dimHierarchy;
	*}
	
	/* Returns the maximum Size of the Bubbles in Pixel */
	String getBubbleSizeMaxSize() {*
		return this.BubbleSizeMaxSize;
	*}
	
	/* Sets the maximum Size of the Bubbles in Pixel */
	void setBubbleSizeMaxSize(/* New maximum Bubble size in Pixel */ int newBubbleSize) {*
		this.BubbleSizeMaxSize = newBubbleSize;
	*}
	
	/* Sets the Bubble Size Keyfigure id during runtime */
	void setkfBubbleSize(/* New id of a keyfigure column */ String newkfBubbleSizeId) {*
		this.kfBubbleSize = newkfBubbleSizeId;
	*}
	
	/* Gets the Bubble Size Keyfigure id during runtime */
	void getkfBubbleSize() {*
		return this.kfBubbleSize;
	*}
	
	/* Sets the Bubble Alerter Keyfigure id during runtime */
	void setkfBubbleAlerter(/* New id of a keyfigure column */ String newkfBubbleAlerterId) {*
		this.kfColBub = newkfBubbleAlerterId;
	*}
	
	/* Gets the Bubble Alerter Keyfigure id during runtime */
	void getkfBubbleAlerter() {*
		return this.kfColBub;
	*}
	
	/* Sets the Bubble Alerter Color Value for Green during runtime */
	void setAlerterColorGreenVal(/* New value for the Bubble color Green*/ int newAlerterColorGreenVal) {*
		this.AlerterColorGreenVal = newAlerterColorGreenVal;
	*}
	
	/* Sets the Bubble Alerter Color Value for Yellow during runtime */
	void setAlerterColorYellowVal(/* New value for the Bubble color Yellow*/ int newAlerterColorYellowVal) {*
		this.AlerterColorYellowVal = newAlerterColorYellowVal;
	*}
	
	/* Returns the x-translation of the whole tree in Pixel */
	String getBubbleRootXTranslation() {*
		return this.BubbleRootXTranslation;
	*}
	/* Sets the x-translation of the whole tree in Pixel */
	void setBubbleRootXTranslation(/* New x translation in Pixel -> positive = right, negative = left*/ int newXTranslation) {*
		this.BubbleRootXTranslation = newXTranslation;
	*}
	
	/* Expand the hierarchy (used for DS 1.4 private functionality) - it seems that the private call does not work */
	@Visibility(private) 
	void expandHierarchyNode() {*
	    this.getDataSource().expandNode(this.getHierarchyDimensionKey(), this.getSelectedNodeKey());
	*}
	
	/* Collapse the hierarchy (used for DS 1.4 private functionality) - it seems that the private call does not work */
	@Visibility(private) 
	void collapseHierarchyNode() {*
		this.getDataSource().collapseNode(this.getHierarchyDimensionKey(), this.getSelectedNodeKey());
	*}
	
	/* Expand the hierarchy */
	void expandHierarchyNodes() {*
	    this.getDataSource().expandNode(this.getHierarchyDimensionKey(), this.getSelectedNodeKey());
	*}
	
	/* Collapse the hierarchy */
	void collapseHierarchyNodes() {*
		this.getDataSource().collapseNode(this.getHierarchyDimensionKey(), this.getSelectedNodeKey());
	*}
	
}
/**
 * Class for DataDropDown
 */
class org.scn.community.databound.FacetFilter extends org.scn.community.shared.DataComponent {

	
	/**
	 * Returns the value of max members property
	 */
	int getMaxMembers() {*
		return this.DMaxMembers;
	*}

	/**
	 * Sets the value of max members property
	 */
	void setMaxMembers(int value) {*
		this.DMaxMembers = value;
	*}
	
	/**
	 * DO NOT USE PRIVATE METHODS
	 */
	void private_onSelectionChanged (optional DataSourceAlias DS) {*
		var that = this;
	
		var selection = this.DSelection;
	
		var selectionJson = JSON.parse(selection);
		
		var dimension = selectionJson.dimension;
		var keys = selectionJson.keys;
		
		var keysAsArray = [];

		if(!DS) {
			DS = this.getDataSource();
		}
		
		if(DS) {
			if(keys.length == 1 && keys[0] == "-ALL-") {
				DS.clearFilter(dimension);
			} else {
				for (var iK = 0; iK < keys.length; iK++) {
					var key = keys[iK];
					
					keysAsArray.push(key);
				}
				// APPLICATION.createInfoMessage("Filter: " + dimension + ", " + JSON.stringify(keysAsArray));
				DS.setFilter(dimension, keysAsArray);
			}
		}
	*}

	/**
	 * DO NOT USE PRIVATE METHODS
	 */
	void private_onBeforeRender() {*
	*}
	
	/**
	 * This function must be used for initialization and in case the drilldown structure has been changed.
	 * You should trigger it once and ideally when filters are NOT set on dimensions, other case you will see only members which are available in resultset (depends on your setting "member selection" on dimension level).
	 * When to use this method?
	 * - As soon the Data Source is initialized, either in "onStartup()" script or after loading in script.
	 * <example>
	 * You have loaded the data source and want to initialize.
	 * The code should be placed in "onStartup()" method.
	 * <code>
	 * FACETFILTER_1.reloadDataSource();
	 * FACETFILTER_1.reloadSelection();
	 * </code>
	 * </example>
	 * <example>
	 * Especially when you are using option of "Only From Result Set", you can bind a different data source (on the same query) to assure that it stays unfiltered for member selection. This Data Source should be not filtered on any dimension.
	 * The code should be placed in "onStartup()" method.
	 * <code>
	 * FACETFILTER_1.reloadDataSource(DS_FULL);
	 * FACETFILTER_1.reloadSelection(DS_FULL);
	 * </code>
	 * </example>
	 */
	void reloadDataSource(/*Data Source which should be used for member selection, in case not the linked Data Source*/optional DataSourceAlias memberAccessSource) {*
		var that = this;
	
		var elementsJson = [];

		var DS = this.getDataSource();

		if(!memberAccessSource) {
			memberAccessSource = DS;
		}

		if(DS) {
			var dimensions = undefined;
			
			if(this.DContentMode == "Only from Result Set") {
				var dimensionsRows = DS.getDimensions(Axis.ROWS);
				var dimensionsColumns = DS.getDimensions(Axis.ROWS);
				
				dimensions = [];

				dimensionsRows.forEach(function(dimension, indexD) {
					dimensions.push(dimension);
				});	
				dimensionsColumns.forEach(function(dimension, indexD) {
					dimensions.push(dimension);
				});
			} else {
				dimensions = DS.getDimensions();
			}
			
			var dimensionKeys = "";
			dimensions.forEach(function(dimension, index) {
				dimensionKeys = dimensionKeys + dimension.name;
			});
			
			if(this.oldDimensionKeys != dimensionKeys) {
				dimensions.forEach(function(dimension, index) {
					  var members = memberAccessSource.getMembers(dimension, that.getMaxMembers());
		
					  var dimensionJson = {};
					  dimensionJson.name = dimension.name;
					  dimensionJson.text = dimension.text;
					  dimensionJson.isMeasuresDimension = dimension.isMeasuresDimension;
		
					  dimensionJson.hierarchyActive = DS.isHierarchyActive(dimension);
					  dimensionJson.filterExt = ";" + DS.getFilterExt(dimension);
					  
					  dimensionJson.members = members;
		
					  elementsJson.push(dimensionJson);
				});

				this.DElements = JSON.stringify(elementsJson);
				this.oldDimensionKeys = dimensionKeys;
			}
		}
	*}
	
	/**
	 * This function can be used after the filter in data source was changed to update the component.
	 * You should be trigered every time the filter change occurs, therefore the event in Data Source -> onResultSetChanged() is a good place.
	 * When to use this method?
	 * - Always the filter is changed, also the "onResultSetChanged()" event is good for this.
	 * <example>
	 * You want to keep the selections with data source.
	 * The code should be placed in "onResultSetChanged()" method.
	 * <code>
	 * // if you want to update also dimensions when drilldown is changed
	 * FACETFILTER_1.reloadDataSource();
	 * 
	 * // every time 
	 * FACETFILTER_1.reloadSelection();
	 * </code>
	 * </example>
	 * <example>
	 * Especially when you are using option of "Only From Result Set", you can bind a different data source (on the same query) to assure that it stays unfiltered for member selection. This Data Source should be not filtered on any dimension.
	 * The code should be placed in "onStartup()" method.
	 * <code>
	 * FACETFILTER_1.reloadDataSource(DS_FULL);
	 * FACETFILTER_1.reloadSelection(DS_FULL);
	 * </code>
	 * </example>
	 */
	void reloadSelection(/*Data Source which should be used for member selection, in case not the linked Data Source*/optional DataSourceAlias memberAccessSource) {*
		var that = this;
	
		var elementsJson = {};

		var DS = this.getDataSource();

		if(!memberAccessSource) {
			memberAccessSource = DS;
		}
		
		if(DS) {
			var dimensions = undefined;
			
			if(this.DContentMode == "Only from Result Set") {
				var dimensionsRows = DS.getDimensions(Axis.ROWS);
				var dimensionsColumns = DS.getDimensions(Axis.ROWS);
				
				dimensions = [];
				
				dimensionsRows.forEach(function(dimension, indexD) {
					dimensions.push(dimension);
				});
				dimensionsColumns.forEach(function(dimension, indexD) {
					dimensions.push(dimension);
				});
			} else {
				dimensions = DS.getDimensions();
			}
			
			dimensions.forEach(function(dimension, indexD) {
				  var members = memberAccessSource.getMembers(dimension, that.getMaxMembers());

				  var dimensionJson = {};
				  dimensionJson.name = dimension.name;
				  dimensionJson.members = [];
				  dimensionJson.filterExt = "; " + DS.getFilterExt(dimension) + ";";

				  elementsJson[dimension.name] = dimensionJson;
			});

			this.DSelection = JSON.stringify(elementsJson);
		}
	*}
	
	/**
	 * Sets the sorting direction - ASCENDING | DESCENDING
	 */
	void setSortingDirection (org_scn_community_shared_SortDirectionEnumfield direction) {*
		if(direction == org_scn_community_shared_SortDirection.ASCENDING) {
			this.DSortingType = "Ascending";
			return;
		}
		if(direction == org_scn_community_shared_SortDirection.DESCENDING) {
			this.DSortingType = "Descending";
			return;
		}
		this.DSortingType = "Ascending";
	*}
	
	/**
	 * Sets the sorting type - DEFAULT | ALPHABETICAL | SELECTED | AVAILABLE
	 */
	void setSortingType (org_scn_community_shared_SortTypeEnumfield type) {*
		if(type == org_scn_community_shared_SortType.DEAFULT) {
			this.DSortingType = "Default";
			return;
		}
		if(type == org_scn_community_shared_SortType.ALPHABETICAL) {
			this.DSortingType = "Alphabetical";
			return;
		}
		if(type == org_scn_community_shared_SortType.SELECTED) {
			this.DSortingType = "Selected";
			return;
		}
		if(type == org_scn_community_shared_SortType.AVAILABLE) {
			this.DSortingType = "Available";
			return;
		}
		this.DSortingType = "Default";
	*}
}
/**
 * Class for DataLeaderBoard
 */
class org.scn.community.databound.LeaderBoard extends Component {

	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}

	/** returns the pressed key */
	String getPressedKey () {*
		return this.pressedKey;	
	*}
}

class org.scn.community.databound.MultiLevelDropDown extends Component {
	Boolean getAddSingleRootNode() {*
		return this.addSingleRootNode;
	*}

	void setAddSingleRootNode(Boolean value) {*
		this.addSingleRootNode = value;
	*}
	
	String getSingleRootName() {*
		return this.singleRootName;
	*}

	void setSingleRootName(String newName) {*
		this.singleRootName = newName;
	*}
	
	String getClickedElemKey() {*
		return this.clickedElemKey;
	*}

	void setClickedElemKey(String clicked) {*
		this.clickedElemKey = clicked;
	*}
	
	String getResetButton() {*
		return this.resetButton;
	*}

	void setResetButton(String value) {*
		this.resetButton = value;
	*}

	String getDimension() {*
		return this.selChar;
	*}

	void setDimension(String value) {*
		this.selChar = value;
	*}

}
class org.scn.community.databound.Projector extends Component {
	/**
	 * Sets data in serialized string form.  Meant to be used in conjunction with
	 * SCN Community Projection data component or another BYO Data component.
	 */
	void setDataString(/*String*/ String dataString){*
		this.data = dataString;
	*}
	/**
	 * Returns serialized string representing data.  Meant to be used with another
	 * SCN Community BYO Data component.
	 */
	String getDataString(){*
		return this.data;
	*}
	/**
	 * Returns projected serialized string representing data.  Meant to be used with another
	 * SCN Community BYO Data component.
	 */
	String getProjectedData(){*
		return this.projectedData;
	*}
	/**
	 * Returns dimension key being projected
	 */
	String getProjectDimension(){*
		return this.projectDimension;
	*}
	/**
	 * Sets dimension to project/aggregate
	 */
	String setProjectDimension(/*String*/ String dimension){*
		this.projectDimension = dimension;
		return this.projectedData;
	*}
	/**
	 * Returns projection/aggregation method
	 */
	String getProjectionMethod(){*
		return this.projectionMethod;
	*}
	/**
	 * Sets method to project/aggregate
	 * Valid type: (SUM,MIN,MAX,COUNT,AVG)
	 */
	String setProjectionMethod(/*String*/ String method){*
		this.projectionMethod = method;
		return this.projectedData;
	*}
}

/**
 * Class for DataRangeSlider
 */
class org.scn.community.databound.RangeSlider extends Component {

	/** returns the selected key 
    <example>
	You want to get first and second selected key in the range
	<code>
    var selection1 = DATARANGESLIDER_1.getSelectedKey();
	var selection2 = DATARANGESLIDER_1.getSelectedKey2();
	
	APPLICATION.createInfoMessage("Selected Range: " + selection1 + " - " + selection2);
	APPLICATION.createInfoMessage("Selected Range Keys: " + DATARANGESLIDER_1.getSelectedKeys());
	
	if(selection1.indexOf("-N/A-") > -1 || selection2.indexOf("-N/A-") > -1) {
		// do nothing
	} else {
		DS_1.setFilterExt("0BC_PERS1", "" + DATARANGESLIDER_1.getSelectedKey()  + " - " + DATARANGESLIDER_1.getSelectedKey2());
	}
	</code>
	</example>
	*/
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}

	/** returns the selected key 2 */
	String getSelectedKey2 () {*
		return this.selectedKey2;	
	*}
	
	/** sets the selected key 2 */
	void setSelectedKey2 (String key2) {*
		this.selectedKey2 = key2;	
	*}
	
	/** sets the selected keys as String separated by ;
	 * This is compatible with setFilterExt function
	
 	<example>
	You want to get all selected keys in the range
	<code>
	var selectedKeys = DATARANGESLIDER_2.getSelectedKeys();<br>

	// remove the NAs, in this scenarios I do not care
	selectedKeys = Convert.replaceAll(selectedKeys, "-N/A-1;", "");<br>
	selectedKeys = Convert.replaceAll(selectedKeys, ";-N/A-2", "");<br>

	APPLICATION.createInfoMessage("Selected Range Keys: " + selectedKeys);<br>

	DS_1.setFilterExt("0BC_PERS1", selectedKeys);<br>
	</code>
	</example>
	*/

	String getSelectedKeys () {*
		return this.selectedKeys;	
	*}

	/** returns the selected text */
	String getSelectedText () {*
		return this.selectedText;	
	*}
	
	/** returns the selected text 2 */
	String getSelectedText2 () {*
		return this.selectedText2;	
	*}
	
	/** sets the pause refresh flag */
	void pauseRefresh () {*
		this.doRefresh = false;	
	*}

	/** sets the pause refresh flag */
	void allowRefresh () {*
		this.doRefresh = true;	
	*}
}

/**
 * Class for DataSlider
 */
class org.scn.community.databound.Slider extends Component {

	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}
	
	/** returns the selected text */
	String getSelectedText () {*
		return this.selectedText;	
	*}
	
	/** sets the pause refresh flag */
	void pauseRefresh () {*
		this.doRefresh = false;	
	*}

	/** sets the pause refresh flag */
	void allowRefresh () {*
		this.doRefresh = true;	
	*}
}
class org.scn.community.databound.Table2D extends Component {
	/** returns the data */
	String getStringData () {*
		return this.stringData;	
	*}
}

/**
 * Class for DataTopFlop
 */
class org.scn.community.databound.TopFlop extends Component {

	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}

	/** returns the pressed key */
	String getPressedKey () {*
		return this.pressedKey;	
	*}
}

/**
 * Class for DataTopFlopChart
 */
class org.scn.community.databound.TopFlopChart extends Component {

	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}

	/** returns the pressed key */
	String getPressedKey () {*
		return this.pressedKey;	
	*}
}
