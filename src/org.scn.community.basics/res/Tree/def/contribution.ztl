
/**
 * Generated ZTL Class for Tree
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Tree extends org.scn.community.shared.Component {

	/**
	 * Clean All Nodes from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.nodesContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.nodesContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Picture Property
	 */	
	void setDefaultImage( /**Url For Default Picture*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Picture Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/**
	 * Gets Technical Proprty For Expanded Key Property
	 */	
	String getExpandedKey() {*
		return this.expandedKey;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	TREE.addSubNode(parentKey [String], key [String], text [String], url [String]);<br>
	TREE.addSubNode(parentKey [String], key [String], text [String], url [String]);
	</code>
	</example>
	 */
	void addSubNode (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url 
			};
	
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	TREE.addNode(key [String], text [String], url [String]);<br>
	TREE.addNode(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addNode (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		this.addSubNode("ROOT", key, 
			text, 
			url);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	TREE.removeSubNode(String key);<br>
	</code>
	</example>
	 */
	void removeSubNode (
			String key
			) {*		
		
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	TREE.removeNode(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeNode (
			String key
			) {*		
		
		this.removeSubNode(key);
	*}

	/**
	 * Gets Nodes As JSON String
	 */	
	String getNodesAsJSON() {*
		var jsonObject = JSON.parse(this.nodesContent);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Text for Node keys<br/>
	 */
	void setNodeTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Node Key<br/>
	 */
	void setNodeText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}
	/**
	 * Sets the Url for Node keys<br/>
	 */
	void setNodeUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Node Key<br/>
	 */
	void setNodeUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}
	/**
	 * Sets the Text for SubNode keys<br/>
	 */
	void setSubNodeTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for SubNode Key<br/>
	 */
	void setSubNodeText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}
	/**
	 * Sets the Url for SubNode keys<br/>
	 */
	void setSubNodeUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for SubNode Key<br/>
	 */
	void setSubNodeUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}






	/**
	 * Gets Technical Proprty For Roundtrip Property
	 */	
	String getRoundtrip() {*
		return this.roundtrip;
	*}

	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions

	/**
	 * Adds a tree node containing Key, Text, Image Url, Parent Node and is Leaf information.<br/>
	 * You need to specify a unique and existing parent node.<br/>
	 * if Parent is set to "ROOT" then the node will be inserted into "ROOT".<br/>
	 * <example><br/>
	 * You want to add 2 nodes, second one is a child of fist one<br/>
	 * <code><br/>
	 * TREE_1.addNode("KEY1", "First Node", "", "ROOT", true);<br/>
	 * TREE_1.addNode("KEY2", "First Node", "", "KEY1", true);<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	void addNode (
			/*Node Key (must be unique)*/ String nodeKey,
			/*Node text*/ String nodeText,
			/*Image URL if not set no image*/ String imageUrl,
			/*The Key of the parent Node*/ String parentNodeKey,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf
			)
	{*
		if(isLeaf == undefined) {
			isLeaf = true;
		}
		
		var itemDef = { 
			"key": nodeKey, 
			"text": nodeText, 
			"url": imageUrl,
			"parent": parentNodeKey,
			"leaf": isLeaf
			};
	
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var nodesJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < nodesJson.length ; i++){
			if (nodesJson[i].key == nodeKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			nodesJson.push(itemDef);
		}
	
		this.nodesContent = JSON.stringify(nodesJson);
	*}
}
