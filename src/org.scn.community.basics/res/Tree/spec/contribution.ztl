	// here is the place for other custom functions

	/**
	 * Adds a tree node containing Key, Text, Image Url, Parent Node and is Leaf information.<br/>
	 * You need to specify a unique and existing parent node.<br/>
	 * if Parent is set to "ROOT" then the node will be inserted into "ROOT".<br/>
	 * <example><br/>
	 * You want to add 2 nodes, second one is a child of fist one<br/>
	 * <code><br/>
	 * TREE_1.addNode("KEY1", "First Node", "", "ROOT", true);<br/>
	 * TREE_1.addNode("KEY2", "First Node", "", "KEY1", true);<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	void addNode (
			/*Node Key (must be unique)*/ String nodeKey,
			/*Node text*/ String nodeText,
			/*Image URL if not set no image*/ String imageUrl,
			/*The Key of the parent Node*/ String parentNodeKey,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf
			)
	{*
		if(isLeaf == undefined) {
			isLeaf = true;
		}
		
		var itemDef = { 
			"key": nodeKey, 
			"text": nodeText, 
			"url": imageUrl,
			"parent": parentNodeKey,
			"leaf": isLeaf
			};
	
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var nodesJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < nodesJson.length ; i++){
			if (nodesJson[i].key == nodeKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			nodesJson.push(itemDef);
		}
	
		this.nodesContent = JSON.stringify(nodesJson);
	*}