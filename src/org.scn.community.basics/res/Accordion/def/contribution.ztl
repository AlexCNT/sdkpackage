
/**
 * Generated ZTL Class for Accordion
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Accordion extends org.scn.community.shared.Component {

	/**
	 * Remove All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Default Image Property
	 */	
	void setDefaultImage( /**Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Default Image Property
	 */	
	Url getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds an element containing key [String], text [String], url [String], parentKey [String] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	ACCORDION.addElement(key [String], text [String], url [String], parentKey [String]);<br>
	ACCORDION.addElement(key [String], text [String], url [String], parentKey [String]);
	</code>
	</example>
	 */
	void addElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Parent Key*/String parentKey
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			key:key, 
			text:text, 
			url:url, 
			parentKey:parentKey 
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACCORDION.addSection(key [String], text [String], url [String]);<br>
	ACCORDION.addSection(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addSection (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		this.addElement("ROOT", key, 
			text, 
			url);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	ACCORDION.removeElement(String key);<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*		
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACCORDION.removeSection(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeSection (
			String key
			) {*		
		
		this.removeElement(key);
	*}

	/**
	 * Gets Expaned Key Property
	 */	
	String getExpandedKey() {*
		return this.expandedKey;
	*}

	/**
	 * Sets Size of the Image Property by String
	 */	
	void setImageSizeByString( /**Size of the Image*/ String imageSize){*
		this.imageSize = imageSize;
	*}

	/**
	 * Gets Size of the Image Property as String
	 */	
	String getImageSizeAsString() {*
		return this.imageSize;
	*}

	/**
	 * Sets Max Height for Section Property
	 */	
	void setMaxSectionHeight( /**Max Height for Section*/ int maxSectionHeight){*
		this.maxSectionHeight = maxSectionHeight;
	*}

	/**
	 * Gets Max Height for Section Property
	 */	
	int getMaxSectionHeight() {*
		return this.maxSectionHeight;
	*}

	/**
	 * Sets Member Display Property by String
	 */	
	void setMemberDisplayByString( /**Member Display*/ String memberDisplay){*
		this.memberDisplay = memberDisplay;
	*}

	/**
	 * Gets Member Display Property as String
	 */	
	String getMemberDisplayAsString() {*
		return this.memberDisplay;
	*}





	/**
	 * Sets Selected Key Property
	 */	
	void setSelectedKey( /**Selected Key*/ String selectedKey){*
		this.selectedKey = selectedKey;
	*}

	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	Returns the content of property Supported Content Notation as constant
	*/
	org_scn_community_shared_ContentNotationEnumfield getSupportedContentNotation () {*
		return this.supportedContentNotation;
	*}

	/**
	 * Sets Use Images Property
	 */	
	void setWithImage( /**Use Images*/ boolean withImage){*
		this.withImage = withImage;
	*}

	/**
	 * Gets Use Images Property
	 */	
	boolean isWithImage() {*
		return this.withImage;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}
