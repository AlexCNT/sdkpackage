
/**
 * Generated ZTL Class for ActionSheetButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ActionSheetButton extends org.scn.community.shared.Component {

	/**
	 * Sets Type Property by String
	 */	
	void setButtonTypeByString( /**Type*/ String buttonType){*
		this.buttonType = buttonType;
	*}

	/**
	 * Gets Type Property as String
	 */	
	String getButtonTypeAsString() {*
		return this.buttonType;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.icon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.icon;
	*}

	/** Adds a root element containing key [String], text [String], icon [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIONSHEETBUTTON.addItem(key [String], text [String], icon [String]);<br>
	ACTIONSHEETBUTTON.addItem(key [String], text [String], icon [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addItem (
			/**Unique Property Key*/String key, 
			/**Text*/String text, 
			/**Icon*/String icon
			) {*		
		
		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			icon:icon
			};
	
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}
		
		var elementsJson = JSON.parse(this.items);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.items = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIONSHEETBUTTON.removeItem(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}
		
		var elementsJson = JSON.parse(this.items);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.items = JSON.stringify(elementsJson);
	*}



	/**
	 * Sets Placement Property by String
	 */	
	void setPlacementByString( /**Placement*/ String placement){*
		this.placement = placement;
	*}

	/**
	 * Gets Placement Property as String
	 */	
	String getPlacementAsString() {*
		return this.placement;
	*}

	/**
	 * Gets Selected Item Property
	 */	
	String getSelectedItem() {*
		return this.selectedItem;
	*}

	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	 * Sets Title Property
	 */	
	void setText( /**Title*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Title Property
	 */	
	String getText() {*
		return this.text;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}
