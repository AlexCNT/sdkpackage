/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2014, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */


/**
 * Generated ZTL Class for Accordion
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Accordion extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Default Image Property
	 */	
	void setDefaultImage( /**Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	ACCORDION.addElement(parentKey [String], key [String], text [String], url [String]);<br>
	ACCORDION.addElement(parentKey [String], key [String], text [String], url [String]);
	</code>
	</example>
	 */
	void addElement (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url 
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACCORDION.addSection(key [String], text [String], url [String]);<br>
	ACCORDION.addSection(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addSection (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		this.addElement("ROOT", key, 
			text, 
			url);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	ACCORDION.removeElement(String key);<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*		
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACCORDION.removeSection(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeSection (
			String key
			) {*		
		
		this.removeElement(key);
	*}

	/**
	 * Gets Sections As JSON String
	 */	
	String getSectionsAsJSON() {*
		var jsonObject = JSON.parse(this.elementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}
	


	/**
	 * Gets Expaned Key Property
	 */	
	String getExpandedKey() {*
		return this.expandedKey;
	*}

	/**
	 * Sets Size of the Image Property by String
	 */	
	void setImageSizeByString( /**Size of the Image*/ String imageSize){*
		this.imageSize = imageSize;
	*}

	/**
	 * Gets Size of the Image Property as String
	 */	
	String getImageSizeAsString() {*
		return this.imageSize;
	*}
	
	/**
	 * Sets Size of the Image Property by Choice Option
	 */	
	void setImageSize( /**Size of the Image*/ org_scn_community_shared_ImageSizeEnumfield imageSize){*
		this.imageSize = imageSize;
	*}
	
	/**
	 * Gets Size of the Image Property as Choice Option
	 */	
	org_scn_community_shared_ImageSizeEnumfield getImageSize() {*
		return this.imageSize;
	*}

	/**
	 * Sets Max Height for Section Property
	 */	
	void setMaxSectionHeight( /**Max Height for Section*/ int maxSectionHeight){*
		this.maxSectionHeight = maxSectionHeight;
	*}

	/**
	 * Gets Max Height for Section Property
	 */	
	int getMaxSectionHeight() {*
		return this.maxSectionHeight;
	*}

	/**
	 * Sets Member Display Property by String
	 */	
	void setMemberDisplayByString( /**Member Display*/ String memberDisplay){*
		this.memberDisplay = memberDisplay;
	*}

	/**
	 * Gets Member Display Property as String
	 */	
	String getMemberDisplayAsString() {*
		return this.memberDisplay;
	*}
	
	/**
	 * Sets Member Display Property by Choice Option
	 */	
	void setMemberDisplay( /**Member Display*/ org_scn_community_shared_MemberDisplayEnumfield memberDisplay){*
		this.memberDisplay = memberDisplay;
	*}
	
	/**
	 * Gets Member Display Property as Choice Option
	 */	
	org_scn_community_shared_MemberDisplayEnumfield getMemberDisplay() {*
		return this.memberDisplay;
	*}





	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	Returns the content of property Supported Content Notation as constant
	*/
	org_scn_community_shared_ContentNotationEnumfield getSupportedContentNotation () {*
		return this.supportedContentNotation;
	*}

	/**
	 * Sets Use Images Property
	 */	
	void setWithImage( /**Use Images*/ boolean withImage){*
		this.withImage = withImage;
	*}

	/**
	 * Gets Use Images Property
	 */	
	boolean isWithImage() {*
		return this.withImage;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for ActivityViewer
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ActivityViewer extends org.scn.community.shared.Component {

	/** Adds a root element containing key [String], text [String], category [String], state [String], startDate [String], endDate [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIVITYVIEWER.addActivity(key [String], text [String], category [String], state [String], startDate [String], endDate [String]);<br>
	ACTIVITYVIEWER.addActivity(key [String], text [String], category [String], state [String], startDate [String], endDate [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addActivity (
			/**Unique Activity Key*/String key, 
			/**Activity Description*/String text, 
			/**Assigned Category Key*/String category, 
			/**Assigned State Key*/String state, 
			/**Start Date YYYYMMDD*/String startDate, 
			/**End Date YYYYMMDD*/String endDate
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			category:category, 
			state:state, 
			startDate:startDate, 
			endDate:endDate
			};

		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var elementsJson = JSON.parse(this.activities);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.activities = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIVITYVIEWER.removeActivity(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeActivity (
			String key
			) {*

		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var elementsJson = JSON.parse(this.activities);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIVITYVIEWER.insertActivity(index [int], key [String], text [String], category [String], state [String], startDate [String], endDate [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertActivity (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Activity Key*/String key, 
			/**Activity Description*/String text, 
			/**Assigned Category Key*/String category, 
			/**Assigned State Key*/String state, 
			/**Start Date YYYYMMDD*/String startDate, 
			/**End Date YYYYMMDD*/String endDate
			) {*

		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}
		
		var elementsJson = JSON.parse(this.activities);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			category:category, 
			state:state, 
			startDate:startDate, 
			endDate:endDate
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.activities = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Activity<br/>
	 */
	void updateActivity (
			/**Unique Activity Key*/String key, 
			/**Activity Description*/String text, 
			/**Assigned Category Key*/String category, 
			/**Assigned State Key*/String state, 
			/**Start Date YYYYMMDD*/String startDate, 
			/**End Date YYYYMMDD*/String endDate
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			category:category, 
			state:state, 
			startDate:startDate, 
			endDate:endDate
		};

		var elementsJson = JSON.parse(this.activities);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getActivityAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var elementsJson = JSON.parse(this.activities);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Activitys As JSON String
	 */	
	String getActivitysAsJSON() {*
		var jsonObject = JSON.parse(this.activities);
		return JSON.stringify(jsonObject, null, 4);
	*}
	



	/** Adds a root element containing key [String], text [String], visible [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIVITYVIEWER.addCategory(key [String], text [String], visible [boolean]);<br>
	ACTIVITYVIEWER.addCategory(key [String], text [String], visible [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addCategory (
			/**Unique Category Key*/String key, 
			/**Category Description*/String text, 
			/**Visibility*/boolean visible
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible
			};

		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var elementsJson = JSON.parse(this.categories);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.categories = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIVITYVIEWER.removeCategory(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeCategory (
			String key
			) {*

		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var elementsJson = JSON.parse(this.categories);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.categories = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIVITYVIEWER.insertCategory(index [int], key [String], text [String], visible [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertCategory (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Category Key*/String key, 
			/**Category Description*/String text, 
			/**Visibility*/boolean visible
			) {*

		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}
		
		var elementsJson = JSON.parse(this.categories);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.categories = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Category<br/>
	 */
	void updateCategory (
			/**Unique Category Key*/String key, 
			/**Category Description*/String text, 
			/**Visibility*/boolean visible
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible
		};

		var elementsJson = JSON.parse(this.categories);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.categories = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getCategoryAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var elementsJson = JSON.parse(this.categories);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Categorys As JSON String
	 */	
	String getCategorysAsJSON() {*
		var jsonObject = JSON.parse(this.categories);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Visible keys<br/>
	 */
	void setVisibleCategoryKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.categories);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].visible = true;
					break;
				}
			}
		}
		
		this.categories = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Visible Key<br/>
	 */
	void setVisibleCategoryKey (
			/**/ String key,
			/**/ boolean visible
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.categories);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].visible = selected;
				break;
			}
		}

		this.categories = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Visible keys<br/>
	 */
	void cleanAllVisibleCategoryKeys (
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
		}
		
		this.categories = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Visible keys<br/>
	 */
	org.scn.pack.KeyArray getVisibleCategoryKeysArray (
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.categories);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].visible == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}





	/** Adds a root element containing key [String], style [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIVITYVIEWER.addState(key [String], style [String]);<br>
	ACTIVITYVIEWER.addState(key [String], style [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addState (
			/**Unique State Key*/String key, 
			/**State CSS Style*/String style
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			style:style
			};

		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var elementsJson = JSON.parse(this.states);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.states = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIVITYVIEWER.removeState(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeState (
			String key
			) {*

		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var elementsJson = JSON.parse(this.states);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.states = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIVITYVIEWER.insertState(index [int], key [String], style [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertState (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique State Key*/String key, 
			/**State CSS Style*/String style
			) {*

		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}
		
		var elementsJson = JSON.parse(this.states);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			style:style
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.states = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given State<br/>
	 */
	void updateState (
			/**Unique State Key*/String key, 
			/**State CSS Style*/String style
			) 
	{*
		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			style:style
		};

		var elementsJson = JSON.parse(this.states);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.states = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getStateAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var elementsJson = JSON.parse(this.states);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets States As JSON String
	 */	
	String getStatesAsJSON() {*
		var jsonObject = JSON.parse(this.states);
		return JSON.stringify(jsonObject, null, 4);
	*}
	




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for ActionSheetButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ActionSheetButton extends org.scn.community.shared.Component {

	/**
	 * Sets Type Property by String
	 */	
	void setButtonTypeByString( /**Type*/ String buttonType){*
		this.buttonType = buttonType;
	*}

	/**
	 * Gets Type Property as String
	 */	
	String getButtonTypeAsString() {*
		return this.buttonType;
	*}
	
	/**
	 * Sets Type Property by Choice Option
	 */	
	void setButtonType( /**Type*/ org_scn_community_shared_ButtonTypeEnumfield buttonType){*
		this.buttonType = buttonType;
	*}
	
	/**
	 * Gets Type Property as Choice Option
	 */	
	org_scn_community_shared_ButtonTypeEnumfield getButtonType() {*
		return this.buttonType;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.icon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.icon;
	*}

	/** Adds a root element containing key [String], text [String], icon [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIONSHEETBUTTON.addItem(key [String], text [String], icon [String]);<br>
	ACTIONSHEETBUTTON.addItem(key [String], text [String], icon [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addItem (
			/**Unique Property Key*/String key, 
			/**Text*/String text, 
			/**Icon*/String icon
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			icon:icon
			};

		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var elementsJson = JSON.parse(this.items);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.items = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIONSHEETBUTTON.removeItem(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*

		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var elementsJson = JSON.parse(this.items);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.items = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIONSHEETBUTTON.insertItem(index [int], key [String], text [String], icon [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertItem (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Property Key*/String key, 
			/**Text*/String text, 
			/**Icon*/String icon
			) {*

		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}
		
		var elementsJson = JSON.parse(this.items);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			icon:icon
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.items = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Item<br/>
	 */
	void updateItem (
			/**Unique Property Key*/String key, 
			/**Text*/String text, 
			/**Icon*/String icon
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			icon:icon
		};

		var elementsJson = JSON.parse(this.items);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.items = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getItemAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var elementsJson = JSON.parse(this.items);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Items As JSON String
	 */	
	String getItemsAsJSON() {*
		var jsonObject = JSON.parse(this.items);
		return JSON.stringify(jsonObject, null, 4);
	*}
	





	/**
	 * Sets Placement Property by String
	 */	
	void setPlacementByString( /**Placement*/ String placement){*
		this.placement = placement;
	*}

	/**
	 * Gets Placement Property as String
	 */	
	String getPlacementAsString() {*
		return this.placement;
	*}
	
	/**
	 * Sets Placement Property by Choice Option
	 */	
	void setPlacement( /**Placement*/ org_scn_community_shared_PlacementEnumfield placement){*
		this.placement = placement;
	*}
	
	/**
	 * Gets Placement Property as Choice Option
	 */	
	org_scn_community_shared_PlacementEnumfield getPlacement() {*
		return this.placement;
	*}

	/**
	 * Gets Selected Item Property
	 */	
	String getSelectedItem() {*
		return this.selectedItem;
	*}

	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	 * Sets Title Property
	 */	
	void setText( /**Title*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Title Property
	 */	
	String getText() {*
		return this.text;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ApplicationHeader
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ApplicationHeader extends org.scn.community.shared.Component {

	/**
	 * Sets Display Logoff Property
	 */	
	void setDisplayLogoff( /**Display Logoff*/ boolean displayLogoff){*
		this.displayLogoff = displayLogoff;
	*}

	/**
	 * Gets Display Logoff Property
	 */	
	boolean isDisplayLogoff() {*
		return this.displayLogoff;
	*}

	/**
	 * Sets Display Welcome Property
	 */	
	void setDisplayWelcome( /**Display Welcome*/ boolean displayWelcome){*
		this.displayWelcome = displayWelcome;
	*}

	/**
	 * Gets Display Welcome Property
	 */	
	boolean isDisplayWelcome() {*
		return this.displayWelcome;
	*}

	/**
	 * Sets Logo Source Property
	 */	
	void setLogoSrc( /**Logo Source*/ String logoSrc){*
		this.logoSrc = logoSrc;
	*}

	/**
	 * Gets Logo Source Property
	 */	
	String getLogoSrc() {*
		return this.logoSrc;
	*}

	/**
	 * Sets Logo Text Property
	 */	
	void setLogoText( /**Logo Text*/ String logoText){*
		this.logoText = logoText;
	*}

	/**
	 * Gets Logo Text Property
	 */	
	String getLogoText() {*
		return this.logoText;
	*}



	/**
	 * Sets User Name Property
	 */	
	void setUserName( /**User Name*/ String userName){*
		this.userName = userName;
	*}

	/**
	 * Gets User Name Property
	 */	
	String getUserName() {*
		return this.userName;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 *	Class for Arrowed Line
 */

class org.scn.community.basics.ArrowedLine extends org.scn.community.shared.Component {
	
	/* Returns the current color of the line. */
	String getLineColor() {*
		return this.lineColor;
	*}

	/* Sets the current color of the line. */
	void setLineColor(/* New Line Color */ String newLineColor) {*
		this.lineColor = newLineColor;
	*}
	
	/* Returns the current type of the line. */
	String getLineType() {*
		return this.lineType;
	*}

	/* Sets the current type of the line. */
	void setLineType(/* New Line Type */ String newLineType) {*
		this.lineType = newLineType;
	*}
	
	/* Returns the current size of the line. */
	String getLineSize() {*
		return this.lineSize;
	*}

	/* Sets the current size of the line. */
	void setLineSize(/* New Line Size */ int newLineSize) {*
		this.lineSize = newLineSize;
	*}	
	
	/* Returns the current arrow position of the line. */
	String getArrowPos() {*
		return this.arrowPos;
	*}

	/* Sets the current arrow position of the line. */
	void setArrowPos(/* New Arrow Position */ String newArrowPos) {*
		this.arrowPos = newArrowPos;
	*}		
}
class org.scn.community.basics.Base64Image extends org.scn.community.shared.Component {
	/**
	 * Sets Source URL Property
	 */	
	void setSrc( /* Source URL or Base-64 String */ String s){*
		this.src = s;
	*}
	/**
	 * Gets Source URL Property
	 */	
	String getSrc() {*
		return this.src;
	*}
}
/**
 * Generated ZTL Class for BasicBusinessCard
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.BasicBusinessCard extends org.scn.community.shared.Component {

	/**
	 * Sets Image Url Property
	 */	
	void setImage( /**Image Url*/ String image){*
		this.image = image;
	*}

	/**
	 * Gets Image Url Property
	 */	
	String getImage() {*
		return this.image;
	*}

	/**
	 * Sets Name Property
	 */	
	void setName( /**Name*/ String name){*
		this.name = name;
	*}

	/**
	 * Gets Name Property
	 */	
	String getName() {*
		return this.name;
	*}



	/**
	 * Sets Title Property
	 */	
	void setTitle( /**Title*/ String title){*
		this.title = title;
	*}

	/**
	 * Gets Title Property
	 */	
	String getTitle() {*
		return this.title;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for Calendar
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Calendar extends org.scn.community.shared.Component {

	/**
	 * Sets Current Date Value YYYYMMDD Property
	 */	
	void setCurrentValue( /**Current Date Value YYYYMMDD*/ String currentValue){*
		this.DCurrentValue = currentValue;
	*}

	/**
	 * Gets Current Date Value YYYYMMDD Property
	 */	
	String getCurrentValue() {*
		return this.DCurrentValue;
	*}

	/**
	 * Sets Selection Type Property by String
	 */	
	void setSelectionTypeByString( /**Selection Type*/ String selectionType){*
		this.DSelectionType = selectionType;
	*}

	/**
	 * Gets Selection Type Property as String
	 */	
	String getSelectionTypeAsString() {*
		return this.DSelectionType;
	*}
	
	/**
	 * Sets Selection Type Property by Choice Option
	 */	
	void setSelectionType( /**Selection Type*/ org_scn_community_shared_SelectionTypeEnumfield selectionType){*
		this.DSelectionType = selectionType;
	*}
	
	/**
	 * Gets Selection Type Property as Choice Option
	 */	
	org_scn_community_shared_SelectionTypeEnumfield getSelectionType() {*
		return this.DSelectionType;
	*}

	/**
	 * Sets Date Single Value YYYYMMDD Property
	 */	
	void setValue( /**Date Single Value YYYYMMDD*/ String value){*
		this.DValue = value;
	*}

	/**
	 * Gets Date Single Value YYYYMMDD Property
	 */	
	String getValue() {*
		return this.DValue;
	*}

	/**
	 * Sets Date Value Range From YYYYMMDD Property
	 */	
	void setValueF( /**Date Value Range From YYYYMMDD*/ String valueF){*
		this.DValueF = valueF;
	*}

	/**
	 * Gets Date Value Range From YYYYMMDD Property
	 */	
	String getValueF() {*
		return this.DValueF;
	*}

	/**
	 * Sets Date Value Range To YYYYMMDD Property
	 */	
	void setValueT( /**Date Value Range To YYYYMMDD*/ String valueT){*
		this.DValueT = valueT;
	*}

	/**
	 * Gets Date Value Range To YYYYMMDD Property
	 */	
	String getValueT() {*
		return this.DValueT;
	*}

	/**
	 * Sets First Day Offset (0 == Sunday) Property
	 */	
	void setFirstDayOffset( /**First Day Offset (0 == Sunday)*/ int firstDayOffset){*
		this.firstDayOffset = firstDayOffset;
	*}

	/**
	 * Gets First Day Offset (0 == Sunday) Property
	 */	
	int getFirstDayOffset() {*
		return this.firstDayOffset;
	*}

	/**
	 * Sets Months Per Row Property
	 */	
	void setMonthsPerRow( /**Months Per Row*/ int monthsPerRow){*
		this.monthsPerRow = monthsPerRow;
	*}

	/**
	 * Gets Months Per Row Property
	 */	
	int getMonthsPerRow() {*
		return this.monthsPerRow;
	*}

	/**
	 * Sets Months To Display Property
	 */	
	void setMonthsToDisplay( /**Months To Display*/ int monthsToDisplay){*
		this.monthsToDisplay = monthsToDisplay;
	*}

	/**
	 * Gets Months To Display Property
	 */	
	int getMonthsToDisplay() {*
		return this.monthsToDisplay;
	*}







	/**
	 * Sets Single Row Property
	 */	
	void setSingleRow( /**Single Row*/ boolean singleRow){*
		this.singleRow = singleRow;
	*}

	/**
	 * Gets Single Row Property
	 */	
	boolean isSingleRow() {*
		return this.singleRow;
	*}

	/**
	 * Sets Weeks Per Row Property
	 */	
	void setWeeksPerRow( /**Weeks Per Row*/ int weeksPerRow){*
		this.weeksPerRow = weeksPerRow;
	*}

	/**
	 * Gets Weeks Per Row Property
	 */	
	int getWeeksPerRow() {*
		return this.weeksPerRow;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for CheckBoxGroup
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.CheckBoxGroup extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/** Adds a root element containing key [String], text [String], url [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	CHECKBOXGROUP.addElement(key [String], text [String], url [String], selected [boolean]);<br>
	CHECKBOXGROUP.addElement(key [String], text [String], url [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Selected*/boolean selected
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			selected:selected
			};

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	CHECKBOXGROUP.removeElement(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	CHECKBOXGROUP.insertElement(index [int], key [String], text [String], url [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertElement (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Selected*/boolean selected
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			selected:selected
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Element<br/>
	 */
	void updateElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Selected*/boolean selected
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			selected:selected
		};

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getElementAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Elements As JSON String
	 */	
	String getElementsAsJSON() {*
		var jsonObject = JSON.parse(this.elements);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Selected keys<br/>
	 */
	void setSelectedElementKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected Key<br/>
	 */
	void setSelectedElementKey (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected keys<br/>
	 */
	void cleanAllSelectedElementKeys (
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.pack.KeyArray getSelectedElementKeysArray (
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Sets Fallback Picture Url Property
	 */	
	void setFallbackPicture( /**Fallback Picture Url*/ String fallbackPicture){*
		this.fallbackPicture = fallbackPicture;
	*}

	/**
	 * Gets Fallback Picture Url Property
	 */	
	String getFallbackPicture() {*
		return this.fallbackPicture;
	*}



	/**
	 * Sets Size Of The Picture Property by String
	 */	
	void setPictureSizeByString( /**Size Of The Picture*/ String pictureSize){*
		this.pictureSize = pictureSize;
	*}

	/**
	 * Gets Size Of The Picture Property as String
	 */	
	String getPictureSizeAsString() {*
		return this.pictureSize;
	*}
	
	/**
	 * Sets Size Of The Picture Property by Choice Option
	 */	
	void setPictureSize( /**Size Of The Picture*/ org_scn_community_shared_ConstImageSizeEnumfield pictureSize){*
		this.pictureSize = pictureSize;
	*}
	
	/**
	 * Gets Size Of The Picture Property as Choice Option
	 */	
	org_scn_community_shared_ConstImageSizeEnumfield getPictureSize() {*
		return this.pictureSize;
	*}

	/**
	 * Sets Use Pictures Property
	 */	
	void setWithPicture( /**Use Pictures*/ boolean withPicture){*
		this.withPicture = withPicture;
	*}

	/**
	 * Gets Use Pictures Property
	 */	
	boolean isWithPicture() {*
		return this.withPicture;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ColorPicker
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ColorPicker extends org.scn.community.shared.Component {

	/**
	 * Sets Color Property
	 */	
	void setColorString( /**Color*/ String colorString){*
		this.colorString = colorString;
	*}

	/**
	 * Gets Color Property
	 */	
	String getColorString() {*
		return this.colorString;
	*}

	/**
	 * Gets Hex Color Property
	 */	
	String getColorStringHex() {*
		return this.colorStringHex;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for DateRangeScroller
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.DateRangeScroller extends org.scn.community.shared.Component {

	/**
	 * Sets Date (yyyymmdd) Property
	 */	
	void setDate( /**Date (yyyymmdd)*/ String date){*
		this.DDate = date;
	*}

	/**
	 * Gets Date (yyyymmdd) Property
	 */	
	String getDate() {*
		return this.DDate;
	*}

	/**
	 * Gets Date (yyyymmdd) Property
	 */	
	String getEndDate() {*
		return this.DEndDate;
	*}

	/**
	 * Sets Language Dependent Format Property
	 */	
	void setLangFormat( /**Language Dependent Format*/ boolean langFormat){*
		this.DLangFormat = langFormat;
	*}

	/**
	 * Gets Language Dependent Format Property
	 */	
	boolean isLangFormat() {*
		return this.DLangFormat;
	*}

	/**
	 * Sets Custom Format Pattern Property
	 */	
	void setLangPattern( /**Custom Format Pattern*/ String langPattern){*
		this.DLangPattern = langPattern;
	*}

	/**
	 * Gets Custom Format Pattern Property
	 */	
	String getLangPattern() {*
		return this.DLangPattern;
	*}

	/**
	 * Sets Custom Format Relative Property
	 */	
	void setLangRelative( /**Custom Format Relative*/ boolean langRelative){*
		this.DLangRelative = langRelative;
	*}

	/**
	 * Gets Custom Format Relative Property
	 */	
	boolean isLangRelative() {*
		return this.DLangRelative;
	*}

	/**
	 * Sets Custom Format Style Property by String
	 */	
	void setLangStyleByString( /**Custom Format Style*/ String langStyle){*
		this.DLangStyle = langStyle;
	*}

	/**
	 * Gets Custom Format Style Property as String
	 */	
	String getLangStyleAsString() {*
		return this.DLangStyle;
	*}
	
	/**
	 * Sets Custom Format Style Property by Choice Option
	 */	
	void setLangStyle( /**Custom Format Style*/ org_scn_community_shared_FormatStyleEnumfield langStyle){*
		this.DLangStyle = langStyle;
	*}
	
	/**
	 * Gets Custom Format Style Property as Choice Option
	 */	
	org_scn_community_shared_FormatStyleEnumfield getLangStyle() {*
		return this.DLangStyle;
	*}

	/**
	 * Sets Day Of Week To Start (CustomWeek) Property
	 */	
	void setSpecialDay( /**Day Of Week To Start (CustomWeek)*/ int specialDay){*
		this.DSpecialDay = specialDay;
	*}

	/**
	 * Gets Day Of Week To Start (CustomWeek) Property
	 */	
	int getSpecialDay() {*
		return this.DSpecialDay;
	*}

	/**
	 * Sets Duration Of Custom Range (Custom*) Property
	 */	
	void setSpecialDuration( /**Duration Of Custom Range (Custom*)*/ int specialDuration){*
		this.DSpecialDuration = specialDuration;
	*}

	/**
	 * Gets Duration Of Custom Range (Custom*) Property
	 */	
	int getSpecialDuration() {*
		return this.DSpecialDuration;
	*}

	/**
	 * Gets Start Date (yyyymmdd) Property
	 */	
	String getStartDate() {*
		return this.DStartDate;
	*}

	/**
	 * Sets Range View Type Property by String
	 */	
	void setViewTypeByString( /**Range View Type*/ String viewType){*
		this.DViewType = viewType;
	*}

	/**
	 * Gets Range View Type Property as String
	 */	
	String getViewTypeAsString() {*
		return this.DViewType;
	*}
	
	/**
	 * Sets Range View Type Property by Choice Option
	 */	
	void setViewType( /**Range View Type*/ org_scn_community_shared_DateViewTypeEnumfield viewType){*
		this.DViewType = viewType;
	*}
	
	/**
	 * Gets Range View Type Property as Choice Option
	 */	
	org_scn_community_shared_DateViewTypeEnumfield getViewType() {*
		return this.DViewType;
	*}

	/**
	 * Gets Editable Property
	 */	
	boolean isEditable() {*
		return this.editable;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for DateRangeSlider
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.DateRangeSlider extends org.scn.community.shared.Component {

	/**
	 * Sets Granularity Property by String
	 */	
	void setGranulatiryByString( /**Granularity*/ String granulatiry){*
		this.DGranulatiry = granulatiry;
	*}

	/**
	 * Gets Granularity Property as String
	 */	
	String getGranulatiryAsString() {*
		return this.DGranulatiry;
	*}
	
	/**
	 * Sets Granularity Property by Choice Option
	 */	
	void setGranulatiry( /**Granularity*/ org_scn_community_shared_DateViewTypeEnumfield granulatiry){*
		this.DGranulatiry = granulatiry;
	*}
	
	/**
	 * Gets Granularity Property as Choice Option
	 */	
	org_scn_community_shared_DateViewTypeEnumfield getGranulatiry() {*
		return this.DGranulatiry;
	*}

	/**
	 * Sets Language Dependent Format Property
	 */	
	void setLangFormat( /**Language Dependent Format*/ boolean langFormat){*
		this.DLangFormat = langFormat;
	*}

	/**
	 * Gets Language Dependent Format Property
	 */	
	boolean isLangFormat() {*
		return this.DLangFormat;
	*}

	/**
	 * Sets Custom Format Pattern Property
	 */	
	void setLangPattern( /**Custom Format Pattern*/ String langPattern){*
		this.DLangPattern = langPattern;
	*}

	/**
	 * Gets Custom Format Pattern Property
	 */	
	String getLangPattern() {*
		return this.DLangPattern;
	*}

	/**
	 * Sets Custom Format Relative Property
	 */	
	void setLangRelative( /**Custom Format Relative*/ boolean langRelative){*
		this.DLangRelative = langRelative;
	*}

	/**
	 * Gets Custom Format Relative Property
	 */	
	boolean isLangRelative() {*
		return this.DLangRelative;
	*}

	/**
	 * Sets Custom Format Style Property by String
	 */	
	void setLangStyleByString( /**Custom Format Style*/ String langStyle){*
		this.DLangStyle = langStyle;
	*}

	/**
	 * Gets Custom Format Style Property as String
	 */	
	String getLangStyleAsString() {*
		return this.DLangStyle;
	*}
	
	/**
	 * Sets Custom Format Style Property by Choice Option
	 */	
	void setLangStyle( /**Custom Format Style*/ org_scn_community_shared_FormatStyleEnumfield langStyle){*
		this.DLangStyle = langStyle;
	*}
	
	/**
	 * Gets Custom Format Style Property as Choice Option
	 */	
	org_scn_community_shared_FormatStyleEnumfield getLangStyle() {*
		return this.DLangStyle;
	*}

	/**
	 * Sets Maximum Date Value (yyyymmdd) Property
	 */	
	void setMax( /**Maximum Date Value (yyyymmdd)*/ String max){*
		this.DMax = max;
	*}

	/**
	 * Gets Maximum Date Value (yyyymmdd) Property
	 */	
	String getMax() {*
		return this.DMax;
	*}

	/**
	 * Sets Minimum Date Value (yyyymmdd) Property
	 */	
	void setMin( /**Minimum Date Value (yyyymmdd)*/ String min){*
		this.DMin = min;
	*}

	/**
	 * Gets Minimum Date Value (yyyymmdd) Property
	 */	
	String getMin() {*
		return this.DMin;
	*}

	/**
	 * Sets First Date Value (yyyymmdd) Property
	 */	
	void setValue( /**First Date Value (yyyymmdd)*/ String value){*
		this.DValue = value;
	*}

	/**
	 * Gets First Date Value (yyyymmdd) Property
	 */	
	String getValue() {*
		return this.DValue;
	*}

	/**
	 * Sets Second Date Value (yyyymmdd) Property
	 */	
	void setValue2( /**Second Date Value (yyyymmdd)*/ String value2){*
		this.DValue2 = value2;
	*}

	/**
	 * Gets Second Date Value (yyyymmdd) Property
	 */	
	String getValue2() {*
		return this.DValue2;
	*}



	/**
	 * Sets Show Bubbles Property
	 */	
	void setShowBubbles( /**Show Bubbles*/ boolean showBubbles){*
		this.showBubbles = showBubbles;
	*}

	/**
	 * Gets Show Bubbles Property
	 */	
	boolean isShowBubbles() {*
		return this.showBubbles;
	*}

	/**
	 * Sets Small Step Width Property
	 */	
	void setSmallStepWidth( /**Small Step Width*/ String smallStepWidth){*
		this.smallStepWidth = smallStepWidth;
	*}

	/**
	 * Gets Small Step Width Property
	 */	
	String getSmallStepWidth() {*
		return this.smallStepWidth;
	*}

	/**
	 * Sets Step Labels Property
	 */	
	void setStepLabels( /**Step Labels*/ boolean stepLabels){*
		this.stepLabels = stepLabels;
	*}

	/**
	 * Gets Step Labels Property
	 */	
	boolean isStepLabels() {*
		return this.stepLabels;
	*}

	/**
	 * Sets Total Units Property
	 */	
	void setTotalUnits( /**Total Units*/ int totalUnits){*
		this.totalUnits = totalUnits;
	*}

	/**
	 * Gets Total Units Property
	 */	
	int getTotalUnits() {*
		return this.totalUnits;
	*}

	/**
	 * Sets Change To Vertical Orientation Property
	 */	
	void setVertical( /**Change To Vertical Orientation*/ boolean vertical){*
		this.vertical = vertical;
	*}

	/**
	 * Gets Change To Vertical Orientation Property
	 */	
	boolean isVertical() {*
		return this.vertical;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Class for DragDropArea
 */
class org.scn.community.basics.DragDropArea extends org.scn.community.shared.Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element */
	void addElement (String elementKey, String elementText, String imageUrl) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef);
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		// special case 1
		if(insertionIndex0based == 0 && elementsJson.length == 0) {
			this.addElement(elementKey, elementText, imageUrl);
			return;
		}
		
		var found = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl
						};
				
				newElementsJson.push(itemDef);
				found = true;
			}
			
			newElementsJson.push(elementsJson[i]);
		}
		
		// special case 2
		if(!found) {
			this.addElement(elementKey, elementText, imageUrl);
			return;
		}
		
		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
				break;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/**
	Returns the content as key label array
	<example>
	You want to get the content of this area
	<code>
	var content = DRAGDROP.getAsKeyLabelArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.key, element.label);<br>
	});
	</code>
	</example>
	*/
	org.scn.community.shared.KeyLabelArray getAsKeyLabelArray () {*
		var s = this.elements;  
		var a = []; 
		if(s!="") a = JSON.parse(s);
		
		var tempA = [];
		
		for(var i=0;i<a.length;i++){
			var itemDef = { 
				"key": a[i].key, 
				"label": a[i].text
			};
			
			tempA.push(itemDef);
		}
		
		return tempA;
	*}
	
	/** returns key at given index */
	String getKeyAtIndex (int index) {*		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (index == i) {
				return elementsJson[i].key;
			}
		}
		
		return "";
	*}
	
	/* Returns the Drag Key. */
	String getDropId () {*
		return this.dropId;	
	*}
	
	/* Returns the Drop Key. */
	String getDropKey () {*
		return this.dropKey;	
	*}
	
	/* Returns the Drop Key. */
	String getDropContext () {*
		return this.dropContext;	
	*}
	
	/* Returns the Drop After Key. */
	String getDropAfterKey () {*
		return this.dropAfterKey;	
	*}
	
	/* Returns the Drop After Key. */
	int getDropIndex () {*
		return this.dropIndex;	
	*}

	/* Returns the Drag Key. */
	String getDragKey () {*
		return this.dragKey;	
	*}
	
	/* Returns the Drag Key. */
	String getDragContext () {*
		return this.dragContext;	
	*}
}

/**
 * Generated ZTL Class for EmbeddedFrame
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.EmbeddedFrame extends org.scn.community.shared.Component {

	/**
	 * Sets Url Property
	 */	
	void setUrl( /**Url*/ String url){*
		this.url = url;
	*}

	/**
	 * Gets Url Property
	 */	
	String getUrl() {*
		return this.url;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for EmbeddedMedia
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.EmbeddedMedia extends org.scn.community.shared.Component {

	/**
	 * Sets Tag Property by String
	 */	
	void setTagByString( /**Tag*/ String tag){*
		this.tag = tag;
	*}

	/**
	 * Gets Tag Property as String
	 */	
	String getTagAsString() {*
		return this.tag;
	*}
	
	/**
	 * Sets Tag Property by Choice Option
	 */	
	void setTag( /**Tag*/ org_scn_community_shared_Enumfield tag){*
		this.tag = tag;
	*}
	
	/**
	 * Gets Tag Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getTag() {*
		return this.tag;
	*}

	/**
	 * Sets Url Property
	 */	
	void setUrl( /**Url*/ String url){*
		this.url = url;
	*}

	/**
	 * Gets Url Property
	 */	
	String getUrl() {*
		return this.url;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for FallbackPicture
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.FallbackPicture extends org.scn.community.shared.Component {

	/**
	 * Sets Url For Fallback Picture Property
	 */	
	void setFallbackPicture( /**Url For Fallback Picture*/ String fallbackPicture){*
		this.fallbackPicture = fallbackPicture;
	*}

	/**
	 * Gets Url For Fallback Picture Property
	 */	
	String getFallbackPicture() {*
		return this.fallbackPicture;
	*}

	/**
	 * Sets Url For Picture Property
	 */	
	void setPicture( /**Url For Picture*/ String picture){*
		this.picture = picture;
	*}

	/**
	 * Gets Url For Picture Property
	 */	
	String getPicture() {*
		return this.picture;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}
class org.scn.community.basics.FioriAppHeader extends org.scn.community.shared.Component {
	/** Add a header button
 	<example>
	Add a header button called 'Menu' with no label show and a menu icon.
	<code>
	FIORIAPPHEADER_1.addHeaderButton("Menu",false,"sap-icon://menu2");<br>
	</code>
	</example>
	 */
	void addHeaderButton (/*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon) {*		
		var o = eval(this.itemConfig);
		var sTitle = true;
		if(showTitle!=undefined) sTitle = showTitle;
		o.push({
			title : buttonTitle,
			showTitle : sTitle,
			icon : icon,
			items : []
		});
		itemConfig = JSON.stringify(o);
	*}
	/** Remove All Button
 	<example>
	Remove all button
	<code>
	FIORIAPPHEADER_1.removeAllButtons();<br>
	</code>
	</example>
	 */
	void removeAllButtons () {*		
		itemConfig = JSON.stringify([]);
	*}
	/** Remove All Items in a header button
 	<example>
	Remove all items in header button 'Menu'
	<code>
	FIORIAPPHEADER_1.removeAllItems("Menu");<br>
	</code>
	</example>
	 */
	void removeAllItems (/*Button Title*/String buttonTitle) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == buttonTitle) matchIndex = i;
		}
		if(matchIndex>-1) o[matchIndex].items = [];
		itemConfig = JSON.stringify(o);
	*}
	/** Remove a button
 	<example>
	Remove a header button called 'Menu'
	<code>
	FIORIAPPHEADER_1.removeHeaderButton("Menu");<br>
	</code>
	</example>
	 */
	void removeHeaderButton (/*Button Title*/String buttonTitle) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == buttonTitle) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		itemConfig = JSON.stringify(o);
	*}
	/** Add an item to a header button.  Will add the header button if it does not yet exist.
 	<example>
	Add an item called 'Help' to header button called 'Menu' with an icon sys-help-2
	<code>
	FIORIAPPHEADER_1.addItem("Menu","sap-icon://sys-help-2|Help");<br>
	</code>
	</example>
	 */
	void addItem (/*Button Title*/String buttonTitle, /*Item Title*/String itemTitle) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == buttonTitle) matchIndex = i;
		}
		if(matchIndex == -1 ){	// Add section for the lazy
			this.addHeaderButton(buttonTitle);
			o = eval(this.itemConfig);
			matchIndex = o.length-1;
		}
		o[matchIndex].items.push(itemTitle);
		itemConfig = JSON.stringify(o);
	*}
	/** Removes an item from a header button.
 	<example>
	Remove an item called 'Help' from header button called 'Menu'
	<code>
	FIORIAPPHEADER_1.removeItem("Menu", "Help");<br>
	</code>
	</example>
	 */
	void removeItem (/*Button Title*/String buttonTitle, /*Item Title*/ String itemTitle) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == buttonTitle) matchIndex = i;
		}
		if(matchIndex != -1 ){
			var items = o[matchIndex].items;
			var itemIndex = -1;
			for(var i=0;i<items.length;i++){
				if(items[i]==itemTitle) itemIndex = i;
			}
			if(itemIndex>-1) items.splice(itemIndex,1);
			itemConfig = JSON.stringify(o);
		}		
	*}
	/**
	Get item clicked.
	*/
	String getItemClicked() {*
		return this.selectedItem;
	*}
	/**
	Get header of and item clicked.
	*/
	String getHeaderClicked() {*
		return this.selectedHeader;
	*}

	/* Shows or hides the back button. */
	void setShowNavButton(/* If true, then the back button is shown, else it is hidden */ boolean visible) {*
		this.showNavButton = visible;
	*}
	/* Returns true if the back button is shown, else false. */
	boolean getShowNavButton() {*
		return this.showNavButton;
	*}
	/* Sets the title. */
	void setTitle(/* Title */ String title) {*
		this.title = title;
	*}	
	/* Returns the title. */
	String getTitle() {*
		return this.title;
	*}
}
/**
 * Class for FioriButton
 */
class org.scn.community.basics.FioriButton extends org.scn.community.shared.Component {

	/** Sets the text that is displayed */
	void setText(
			/** text */ String text) {*
		this.dText = text;	
			*}

	/** Returns the text that is displayed */
	String getText() {*
		return this.dText;	
	*}

	/** Sets the tooltip that is displayed */
	void setTooltip(
			/** text */ String tooltip) {*
		this.dTooltip = tooltip;	
			*}

	/** Returns the tooltip that is displayed */
	String getTooltip() {*
		return this.dTooltip;	
	*}
	
	/** Sets the button style */
	void setButtonStyle(
			/** style */ org_scn_community_shared_ButtonStyleEnumfield style) {*
		this.dStyle = style;	
			*}

	/** Returns the buttom style */
	org_scn_community_shared_ButtonStyleEnumfield getButtonStyle() {*
		return this.dStyle;	
	*}
}
class org.scn.community.basics.FioriToolbar extends org.scn.community.shared.Component {
	/** Add a header button
 	<example>
	Add or update a header button by key 'MENU'.
	<code>
	FIORITOOLBAR_1.addHeaderButton("MENU","Menu",false,"sap-icon://menu2","Emphasized");<br>
	</code>
	</example>
	 */
	void addHeaderButton (/*Button Key*/String buttonKey, /*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon, /*Button Type*/ optional String buttonType) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		var sTitle = true;
		if(showTitle != undefined) sTitle = showTitle;
		var h;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex==-1) {
			o.push({
				key : buttonKey,
				text : buttonTitle,
				showTitle : sTitle,
				icon : icon,
				items : [],
				type : buttonType || "Default"
			});
		}else{	// Don't overwrite items
			o[matchIndex].text = buttonTitle;
			o[matchIndex].showTitle = sTitle;
			o[matchIndex].icon = icon;
			o[matchIndex].type = buttonType || "Default";
		}		
		itemConfig = JSON.stringify(o);
	*}
	/** Remove All Button
 	<example>
	Remove all button
	<code>
	FIORITOOLBAR_1.removeAllButtons();<br>
	</code>
	</example>
	 */
	void removeAllButtons () {*		
		itemConfig = JSON.stringify([]);
	*}
	/** Remove All Items in a header button
 	<example>
	Remove all items in header button 'MENU'
	<code>
	FIORITOOLBAR_1.removeAllItems("Menu");<br>
	</code>
	</example>
	 */
	void removeAllItems (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o[matchIndex].items = [];
		itemConfig = JSON.stringify(o);
	*}
	/** Remove a button
 	<example>
	Remove a header button with key 'MENU'
	<code>
	FIORITOOLBAR_1.removeHeaderButton("MENU");<br>
	</code>
	</example>
	 */
	void removeHeaderButton (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		itemConfig = JSON.stringify(o);
	*}
	/** Add an item to a header button.  Will add the header button if it does not yet exist.
 	<example>
	Add an item called 'Help' to header button with key 'MENU' with an icon sys-help-2
	<code>
	FIORITOOLBAR_1.addItem("MENU", "help", "Help", "sap-icon://sys-help-2");<br>
	</code>
	</example>
	 */
	void addItem (/*Button Key*/String buttonKey, /*Item Key*/String itemKey, /*Item Text*/String itemText, /*Item Icon*/optional String itemIcon) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex == -1 ){	// Add section for the lazy
			this.addHeaderButton(buttonKey, buttonKey);
			o = eval(this.itemConfig);
			matchIndex = o.length-1;
		}
		o[matchIndex].items.push({
			key : itemKey,
			text : itemText,
			icon : itemIcon || ""
		});
		itemConfig = JSON.stringify(o);
	*}
	/** Removes an item from a header button.
 	<example>
	Remove an item with key 'HELP' from header button with key 'MENU'
	<code>
	FIORITOOLBAR_1.removeItem("MENU", "HELP");<br>
	</code>
	</example>
	 */
	void removeItem (/*Button Key*/String buttonKey, /*Item Key*/ String itemKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex != -1 ){
			var items = o[matchIndex].items;
			var itemIndex = -1;
			for(var i=0;i<items.length;i++){
				if(items[i].key == itemKey) itemIndex = i;
			}
			if(itemIndex>-1) items.splice(itemIndex,1);
			itemConfig = JSON.stringify(o);
		}		
	*}
	/**
	Get item clicked.
	*/
	String getItemClicked() {*
		return this.selectedItem;
	*}
	/**
	Get item key clicked.
	*/
	String getItemKeyClicked() {*
		return this.selectedItemKey;
	*}
	/**
	Get header of and item clicked.
	*/
	String getHeaderClicked() {*
		return this.selectedHeader;
	*}
	/**
	Get header key of and item clicked.
	*/
	String getHeaderKeyClicked() {*
		return this.selectedHeaderKey;
	*}
	
}
/**
 * Class for FishEye
 */
class org.scn.community.basics.FishEye extends org.scn.community.shared.Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element */
	void addElement (String elementKey, String elementText, String imageUrl) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef);
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
				break;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns key at given index */
	String getKeyAtIndex (int index) {*		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (index == i) {
				return elementsJson[i].key;
			}
		}
		
		return "";
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}
}

/**
 * Generated ZTL Class for Gauge (Speedometer)
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Gauge extends org.scn.community.shared.Component {

	/**
	 * Sets End Value Property
	 */	
	void setEndValue( /* End Value */  int endValue){*
		this.endValue = endValue;
	*}

	/**
	 * Gets End Value Property
	 */	
	int getEndValue() {*
		return this.endValue;
	*}

	/**
	 * Sets First Color Property
	 */	
	void setFirstColor( /* First Color */  String firstColor){*
		this.firstColor = firstColor;
	*}

	/**
	 * Gets First Color Property
	 */	
	String getFirstColor() {*
		return this.firstColor;
	*}

	/**
	 * Sets Gradient Color Property
	 */	
	void setGradientColor( /* Gradient Color */  boolean gradientColor){*
		this.gradientColor = gradientColor;
	*}

	/**
	 * Gets Gradient Color Property
	 */	
	boolean getGradientColor() {*
		return this.gradientColor;
	*}

	/**
	 * Sets Show Number Property
	 */	
	void setHaveNumbers( /* Show Number */  boolean haveNumbers){*
		this.haveNumbers = haveNumbers;
	*}

	/**
	 * Gets Show Number Property
	 */	
	boolean getHaveNumbers() {*
		return this.haveNumbers;
	*}

	/**
	 * Sets Indicator Value Property
	 */	
	void setIndicatorValue( /* Indicator Value */  float indicatorValue){*
		this.indicatorValue = indicatorValue;
	*}

	/**
	 * Gets Indicator Value Property
	 */	
	float getIndicatorValue() {*
		return this.indicatorValue;
	*}

	/**
	 * Sets Main Color Property
	 */	
	void setMainColor( /* Main Color */  String mainColor){*
		this.mainColor = mainColor;
	*}

	/**
	 * Gets Main Color Property
	 */	
	String getMainColor() {*
		return this.mainColor;
	*}

	/**
	 * Sets Needle Color Property
	 */	
	void setNeedleColor( /* Needle Color */  String needleColor){*
		this.needleColor = needleColor;
	*}

	/**
	 * Gets Needle Color Property
	 */	
	String getNeedleColor() {*
		return this.needleColor;
	*}

	/**
	 * Sets Number of Big Ticks Property
	 */	
	void setNumOfBigTicks( /* Number of Big Ticks */  int numOfBigTicks){*
		this.numOfBigTicks = numOfBigTicks;
	*}

	/**
	 * Gets Number of Big Ticks Property
	 */	
	int getNumOfBigTicks() {*
		return this.numOfBigTicks;
	*}

	/**
	 * Sets Number of Small Ticks Property
	 */	
	void setNumOfSmallTicks( /* Number of Small Ticks */  int numOfSmallTicks){*
		this.numOfSmallTicks = numOfSmallTicks;
	*}

	/**
	 * Gets Number of Small Ticks Property
	 */	
	int getNumOfSmallTicks() {*
		return this.numOfSmallTicks;
	*}

	/**
	 * Sets Second Color Property
	 */	
	void setSecondColor( /* Second Color */  String secondColor){*
		this.secondColor = secondColor;
	*}

	/**
	 * Gets Second Color Property
	 */	
	String getSecondColor() {*
		return this.secondColor;
	*}

	/**
	 * Sets Show Value Property
	 */	
	void setShowValue( /* Show Value */  boolean showValue){*
		this.showValue = showValue;
	*}

	/**
	 * Gets Show Value Property
	 */	
	boolean getShowValue() {*
		return this.showValue;
	*}

	/**
	 * Sets Showed Value Property
	 */	
	void setShowedValue( /* Showed Value */  String showedValue){*
		this.showedValue = showedValue;
	*}

	/**
	 * Gets Showed Value Property
	 */	
	String getShowedValue() {*
		return this.showedValue;
	*}

	/**
	 * Sets Start of Second Color Property
	 */	
	void setStartSecondColor( /* Start of Second Color */  int startSecondColor){*
		this.startSecondColor = startSecondColor;
	*}

	/**
	 * Gets Start of Second Color Property
	 */	
	int getStartSecondColor() {*
		return this.startSecondColor;
	*}

	/**
	 * Sets Start of Third Color Property
	 */	
	void setStartThirdColor( /* Start of Third Color */  int startThirdColor){*
		this.startThirdColor = startThirdColor;
	*}

	/**
	 * Gets Start of Third Color Property
	 */	
	int getStartThirdColor() {*
		return this.startThirdColor;
	*}

	/**
	 * Sets Start Value Property
	 */	
	void setStartValue( /* Start Value */  int startValue){*
		this.startValue = startValue;
	*}

	/**
	 * Gets Start Value Property
	 */	
	int getStartValue() {*
		return this.startValue;
	*}

	/**
	 * Sets Third Color Property
	 */	
	void setThirdColor( /* Third Color */  String thirdColor){*
		this.thirdColor = thirdColor;
	*}

	/**
	 * Gets Third Color Property
	 */	
	String getThirdColor() {*
		return this.thirdColor;
	*}

	/**
	 * Sets Title Property
	 */	
	void setTitle( /* Title */  String title){*
		this.title = title;
	*}

	/**
	 * Gets Title Property
	 */	
	String getTitle() {*
		return this.title;
	*}

	/**
	 * Sets Text and Ticks Color Property
	 */	
	void setTtColor( /* Text and Ticks Color */  String ttColor){*
		this.ttColor = ttColor;
	*}

	/**
	 * Gets Text and Ticks Color Property
	 */	
	String getTtColor() {*
		return this.ttColor;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/* CUSTOM ZTL FUNCTIONS */
}

/**
 * Class for ImageCarousel
 */
class org.scn.community.basics.ImageCarousel extends org.scn.community.shared.Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element */
	void addElement (String elementKey, String elementText, String imageUrl) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef);
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
				break;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns key at given index */
	String getKeyAtIndex (int index) {*		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (index == i) {
				return elementsJson[i].key;
			}
		}
		
		return "";
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}
}

class org.scn.community.basics.KpiView extends org.scn.community.shared.Component {
	
	/* Sets the header text. */
	void setHeaderText(/* Header text */ String text) {*
		this.headerText = text;
	*}	

	/* Returns the header text. */
	String getHeaderText() {*
		return this.headerText;
	*}

	/* Shows or hides the header. */
	void setHeaderVisible(/* If true, then the header is shown, else it is hidden */ boolean isHeaderVisible) {*
		this.headerVisible = isHeaderVisible;
	*}	

	/* Returns true if the header is shown, else false. */
	boolean isHeaderVisible() {*
		return this.headerVisible;
	*}

	/* Sets the header CSS class. */
	void setHeaderCssClass(/* Header CSS class */ String cssClass) {*
		this.headerCssClass = cssClass;
	*}	

	/* Returns the header CSS class. */
	String getHeaderCssClass() {*
		return this.headerCssClass;
	*}

	/* Sets the title text. */
	void setTitleText(/* Title text */ String text) {*
		this.titleText = text;
	*}	

	/* Returns the title text. */
	String getTitleText() {*
		return this.titleText;
	*}

	/* Sets the title CSS class. */
	void setTitleCssClass(/* Title CSS class */ String cssClass) {*
		this.titleCssClass = cssClass;
	*}	

	/* Returns the title CSS class. */
	String getTitleCssClass() {*
		return this.titleCssClass;
	*}

	/* Sets the value prefix text. */
	void setValuePrefixText(/* Value prefix text */ String text) {*
		this.valuePrefixText = text;
	*}	

	/* Returns the value prefix text. */
	String getValuePrefixText() {*
		return this.valuePrefixText;
	*}

	/* Sets the value prefix CSS class. */
	void setValuePrefixCssClass(/* Value prefix CSS class */ String cssClass) {*
		this.valuePrefixCssClass = cssClass;
	*}	

	/* Returns the value prefix CSS class. */
	String getValuePrefixCssClass() {*
		return this.valuePrefixCssClass;
	*}

	/* Sets the value text. */
	void setValueText(/* Value text */ String text) {*
		this.valueText = text;
	*}	

	/* Returns the value text. */
	String getValueText() {*
		return this.valueText;
	*}

	/* Sets the value number. */
	void setValueFloat(/* Value number */ float number) {*
		this.valueFloat = number;
	*}	

	/* Returns the value number. */
	float getValueFloat() {*
		return this.valueFloat;
	*}
	
	/* Sets the value CSS class. */
	void setValueCssClass(/* Value CSS class */ String cssClass) {*
		this.valueCssClass = cssClass;
	*}	

	/* Returns the current value CSS class. */
	String getValueCssClass() {*
		return this.valueCssClass;
	*}

	/* Sets the value decimal places. */
	void setValueDecimalPlaces(/* Number of decimal places */ int decimalPlaces) {*
		this.valueDecimalPlaces = decimalPlaces;
	*}

	/* Returns the value decimal places. */
	int getValueDecimalPlaces() {*
		return this.valueDecimalPlaces;
	*}

	/* Sets the value suffix text. */
	void setValueSuffixText(/* Value suffix text */ String text) {*
		this.valueSuffixText = text;
	*}	

	/* Returns the value suffix text. */
	String getValueSuffixText() {*
		return this.valueSuffixText;
	*}

	/* Sets the value suffix CSS class. */
	void setValueSuffixCssClass(/* Value suffix CSS class */ String cssClass) {*
		this.valueSuffixCssClass = cssClass;
	*}	

	/* Returns the value suffix CSS class. */
	String getValueSuffixCssClass() {*
		return this.valueSuffixCssClass;
	*}

	/* Sets the footer text. */
	void setFooterText(/* Footer text */ String text) {*
		this.footerText = text;
	*}	

	/* Returns the footer text. */
	String getFooterText() {*
		return this.footerText;
	*}

	/* Sets the footer CSS class. */
	void setFooterCssClass(/* Footer CSS class */ String cssClass) {*
		this.footerCssClass = cssClass;
	*}

	/* Returns the footer CSS class. */
	String getFooterCssClass() {*
		return this.footerCssClass;
	*}

	/* Sets the image URL. */
	void setImage(/* image url */ String image) {*
		this.image = image;
	*}

	/* Returns the image URL. */
	String getImage() {*
		return this.image;
	*}
	
	/* Sets the data cell whose value is displayed. */
	void setDataSelection(/* Data cell tha tcontains the value displayed */ ResultCellSelection cellSelection) {*
		this.data = this.stringifySelection(cellSelection);
	*}
}
class org.scn.community.basics.TileProperty {
  String title;
  String info;
  String icon;
  String number;
  String numberUnit;
  String valueState;
}
class org.scn.community.basics.LaunchPad extends org.scn.community.shared.Component {
	/**
	Gets Tile Selected
	*/
	String getTileClicked() {*
		return this.selectedTile;
	*}
	/** Remove All Tiles
 	<example>
	Remove all tiles
	<code>
	LAUNCHPAD_1.removeAllTiles();<br>
	</code>
	</example>
	 */
	void removeAllTiles () {*		
		this.tileConfig = JSON.stringify([]);
	*}
	
	org.scn.community.basics.TileProperty getTileProperty(/*Title*/String title){*
		var r = {
			title : "",
			info : "",
			icon : "",
			number : "",
			numberUnit : "",
			valueState : "",
			styleClass : ""
		}
		var o = eval(this.tileConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1){
			var tileConf = o[matchIndex];
			r.title = tileConf.title;
			r.info = tileConf.info;
			r.icon = tileConf.icon;
			r.number = tileConf.number;
			r.numberUnit = tileConf.numberUnit;
			r.valueState = tileConf.valueState;
			r.styleClass = tileConf.styleClass;
		}
		return r;
	*}
	
	/** Adds or Updates a Tile (if title already exists)
 	<example>
	Add/Update a tile called "Sales"
	<code>
	LAUNCHPAD_1.addTile("Sales", "YTD", "sap-icon://money-bills", "1234", "USD", "good");<br>
	</code>
	</example>
	 */
	void addTile (/*Title*/String title, 
			/*Info*/optional String info, 
			/*Icon*/optional String icon, 
			/*Number*/optional String number, 
			/*Number Unit*/optional String numberUnit,
			/*Value State*/optional String valueState,
			/*CSS Class*/optional String styleClass) {*		
		var o = eval(this.tileConfig);
		if(!o) o = [];
		var tile = {
			title: title,
			info: info,
			icon: icon,
			number: number,
			numberUnit: numberUnit,
			valueState : valueState || "None",
			styleClass : styleClass
		};	
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex==-1){	// New Tile
			o.push(tile);
		}else{	// Update Tile
			o[matchIndex] = tile;
		}
		tileConfig = JSON.stringify(o);
	*}
	/** Remove a tile
 	<example>
	Remove a tile titled "Sales"
	<code>
	LAUNCHPAD_1.removeTile("Sales");<br>
	</code>
	</example>
	 */
	void removeTile (/*Tile Title*/String title) {*		
		var o = eval(this.tileConfig);
		if(!o) o = [];
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		tileConfig = JSON.stringify(o);
	*}
}

/**
 * Class for LeaderBoard
 */
class org.scn.community.basics.LeaderBoard extends org.scn.community.shared.Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element containing key, text, imageUrl, value (float) and value (Sting)*/
	void addElement (String elementKey, String elementText, String imageUrl, float value, String valueAsString) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"value": value,
			"valueS": valueAsString
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef);
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, float value, String valueAsString, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl,
						"value": value,
						"valueS": valueAsString
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl, float value, String valueAsString) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
				elementsJson[i].value = value;
				elementsJson[i].valueS = valueAsString;
				break;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns key at given index */
	String getKeyAtIndex (int index) {*		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (index == i) {
				return elementsJson[i].key;
			}
		}
		
		return "";
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}

	/** returns the pressed key */
	String getPressedKey () {*
		return this.pressedKey;	
	*}
}

/**
 * Class for Link
 */
class org.scn.community.basics.Link extends org.scn.community.shared.Component {
	
	/** Sets the text that is displayed */
	void setText(
		/** text */ String text) {*
		this.text = text;	
	*}
	
	/** Returns the text that is displayed */
	String getText() {*
		return this.text;	
	*}
}
class org.scn.community.basics.ListSelector extends org.scn.community.shared.Component {
	/**
	Get last menu element title clicked.
	<example><code>var itemSelected = LISTSELECTOR_1.getLabelClicked();</code></example>
	<returns>Chart property as String type.</returns>
	*/
	String getLabelClicked() {*
		return this.labelClicked;
	*}
	/**
	Sets titles of your menu elements.
	<example><code>LISTSELECTOR_1.setTitles("Google,Bing,Ask.com");</code></example>
	<note>Seperate each entry by a comma.</note>
	*/
	void setTitles( /* Titles */ String titles){*
		this.titles = titles;
	*}
	/**
	Get list of menu element titles.
	<example><code>var titles = LISTSELECTOR_1.getTitles();</code></example>
	<returns>Comma-seperated list of menu element titles</returns>
	*/
	String getTitles() {*
		return this.titles;
	*}
	/**
	Reset selection of menu element titles for complex navigation scenarios
	<example><code>LISTSELECTOR_1.resetSelection();</code></example>
	 */
	void resetSelection(){*
		this.labelUnselect = true;
	*}
}
/**
 * Class for MenuBar
 */
class org.scn.community.basics.MenuBar extends org.scn.community.shared.Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elementsContent = JSON.stringify(elementsArray);
			
			this.cleanAll = true;
	*}
	
	/** Adds an element containing Key, Text, Image Url, Parent Element and is Leaf information.
	 * You need to specify a unique and existing parent element.
	 * if Parent Element is set to "ROOT" then the element will be inserted as root element.  

 	<example>
	You want to add 2 elements, second one is a child of first one
	<code>
	ACCORDION_1.addElement("KEY1", "First Element", "", "ROOT", true);<br>
	ACCORDION_1.addElement("KEY2", "First Element Child", "", "KEY1", true);<br>
	<br>
	</code>
	</example>
	 */
	void addSubMenuItem (
			/**Element Key (must be unique)*/String elementKey, 
			/**Element text*/String elementText, 
			/**Image URL, if not set, no image*/String imageUrl, 
			/**The Key of the parent Element*/String parentElementKey, 
			/**Leafs do not have expand option by default*/optional boolean isLeaf,
			/**Element enabled status*/optional boolean isEnabled) {*		
		
		if(isLeaf == undefined) {
			isLeaf = true;
		}
			
		if(isEnabled == undefined){
			isEnabled = true;
		}
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"parent": parentElementKey,
			"leaf": isLeaf,
			"enabled": isEnabled
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/** Adds a root element containing Key, Text, Image Url information.

 	<example>
	You want to add 2 root elements, second one is a sibling of first one
	<code>
	ACCORDION_1.addSection("ROOT_KEY1", "First Root Element", "");<br>
	ACCORDION_1.addSection("ROOT_KEY2", "Second Root Element", "");<br>
	<br>
	</code>
	</example>
	 */
	void addMenuItem (
			/**Element Key (must be unique)*/String elementKey, 
			/**Element text*/String elementText, 
			/**Image URL, if not set, no image*/String imageUrl,
			/**Element enabled status*/optional boolean isEnabled) {*		
		
		this.addSubMenuItem(elementKey, elementText, imageUrl, "ROOT", false, isEnabled);
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** returns the text of selected element (might not be unique) */
	String getSelectedText () {*
		return this.selectedText;	
	*}
}

/**
 * Class for MenuButton
 */
class org.scn.community.basics.MenuButton extends org.scn.community.shared.Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elementsContent = JSON.stringify(elementsArray);
			
			this.cleanAll = true;
	*}
	
	/** Adds an element containing Key, Text, Image Url, Parent Element and is Leaf information.
	 * You need to specify a unique and existing parent element.
	 * if Parent Element is set to "ROOT" then the element will be inserted as root element.  

 	<example>
	You want to add 2 items, second one is a child of first one
	<code>
	MENUBUTTON_1.addSubMenuItem("KEY1", "First Element", "", "ROOT", true);<br>
	MENUBUTTON_1.addSubMenuItem("KEY2", "First Element Child", "", "KEY1", true);<br>
	<br>
	</code>
	</example>
	 */
	void addSubMenuItem (
			/**Element Key (must be unique)*/String elementKey, 
			/**Element text*/String elementText, 
			/**Image URL, if not set, no image*/String imageUrl, 
			/**The Key of the parent Element*/String parentElementKey,
			/**Leafs do not have expand option by default*/optional boolean isLeaf,
			/**item enabled flag*/optional boolean isEnabled) {*		
		
		if(isLeaf == undefined) {
			isLeaf = true;
		}
			
		if(isEnabled == undefined){
			isEnabled = true;
		}
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"parent": parentElementKey,
			"leaf": isLeaf,
			"enabled": isEnabled
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/** Adds a root element containing Key, Text, Image Url information.

 	<example>
	You want to add 2 root elements, second one is a sibling of first one
	<code>
	MENUBUTTON_1.addMenuItem("ROOT_KEY1", "First Root Element", "");<br>
	MENUBUTTON_1.addMenuItem("ROOT_KEY2", "Second Root Element", "");<br>
	<br>
	</code>
	</example>
	 */
	void addMenuItem (
			/**Element Key (must be unique)*/String elementKey, 
			/**Element text*/String elementText, 
			/**Image URL, if not set, no image*/String imageUrl,
			/**Leafs do not have expand option by default*/optional boolean isLeaf,
			/**item enabled flag*/optional boolean isEnabled) {*		
		
		this.addSubMenuItem(elementKey, elementText, imageUrl, "ROOT", isLeaf, isEnabled);
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** returns the text of selected element (might not be unique) */
	String getSelectedText () {*
		return this.selectedText;	
	*}
}

/**
 * Class for ModalBrowser
 */
class org.scn.community.basics.ModalBrowser extends org.scn.community.shared.Component {
	
	/**
	Invoke Click event
	*/
	String click() {*
		this.clickTrigger = Math.random();
	*}
	
	/**
	Sets URL
	<example><code>BROWSERPOPUP_1.setURL("http://server.example.com/BOE/OpenDocument/opendoc/openDocument.jsp?sIDType=CUID&iDocID=ABC123XYZ");</code></example>
	<note>If opening a page in a Modal Browser Dialog, make sure that the page does not use a Frame Buster.</note>
	*/
	void setURL( /* URL */ String url){*
		this.url = url;
	*}
	
	/**
	Gets URL
	*/
	String getURL() {*
		return this.url;
	*}
}

/**
 * Class for NAVIGATIONBAR
 */
class org.scn.community.basics.NavigationBar extends org.scn.community.shared.Component {
	
	/** remove all items */
	void removeAllItems () {*		
			var elementsArray = [];
			this.DElementsContent = JSON.stringify(elementsArray);
			
			this.DCleanAll = true;
	*}
	
	/** Adds an item containing Key, Text, Visible and Enable flags.

 	<example>
	You want to add 2 items
	<code>
	NAVIGATIONBAR.addItem("ITEM1", "First Item", true, false);<br>
	NAVIGATIONBAR.addItem("ITEM2", "Second Item", true, true);
	</code>
	</example>
	 */
	void addItem (
			/**Item Key (must be unique)*/String itemKey, 
			/**Item text*/String itemText, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled) {*		

		var itemDef = { 
			"key": itemKey, 
			"text": itemText, 
			"visible": visible,
			"enabled": enabled
			};
	
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == itemKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	<example>
	You want to make the item visible
	<code>
	NAVIGATIONBAR.addItemVisible("ITEM1", true);<br>
	</code>
	</example>
	 */
	void setItemVisible (
			/**Item Key (must be unique)*/String itemKey, 
			/**Visible*/boolean visible) {*		

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == itemKey) {
				elementsJson[i].visible = visible;
				break;
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	<example>
	You want to make the item enabled
	<code>
	NAVIGATIONBAR.addItemEnabled("ITEM1", true);<br>
	</code>
	</example>
	 */
	void setItemEnabled (
			/**Item Key (must be unique)*/String itemKey, 
			/**Enabled*/boolean enabled) {*		

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == itemKey) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/** returns the selected item */
	String getSelectedItem () {*
		return this.DSelectedKey;	
	*}
	
	/** sets the selected item */
	void setSelectedItem (String key) {*
		this.DSelectedKey = key;	
	*}
	
	/** returns the selected item */
	String getSelectedItemText () {*
		return this.DSelectedText;	
	*}
	
	/** resets item selection */
	void resetItemSelection () {*
		this.DSelectedKey = "invisible_dummy_select";
	*}
}

/**
 * Class for NotificationBar
 */
class org.scn.community.basics.NotificationBar extends org.scn.community.shared.Component {

	/** 
	 * Add Category
	 * 
	 */
	void addCategory (
			/**Category Key*/String categoryKey, 
			/**Category Text*/String categoryText, 
			/**Category Image*/String categoryImage)
	{*

		var categoryDef = {
				"key": categoryKey,
				"text": categoryText,
				"image": categoryImage
				};
			
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var caregoriesJson = JSON.parse(this.categories);
		caregoriesJson.push(categoryDef);
		
		this.categories = JSON.stringify(caregoriesJson);
	*}

	/**
	 * Add an Error Notification
	 */
	void addErrorNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "ERROR", categoryKey, "");
	*}
			
	/**
	 * Add a Warning Notification
	 */
	void addWarningNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "WARNING", categoryKey, "");
	*}

	/**
	 * Add an Info Notification
	 */
	void addInfoNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "INFO", categoryKey, "");
	*}

	/**
	 * Add a Success Notification
	 */
	void addSuccessNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "SUCCESS", categoryKey, "");
	*}

	/** 
	 * Add Notification
	 * 
	 */
	void addNotification (
			/**Notification Text */String notificationText, 
			/**Notification Level (ERROR|WARNING|INFO|SUCCESS) */String notificationLevel, 
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey, 
			/**Optional: Notification Key */ optional String notificationKey)
	{*
		var itemDef = { 
				"category": categoryKey,
				"key": notificationKey, 
				"text": notificationText, 
				"level": notificationLevel
				};

		if (this.notifications === undefined || this.notifications === "" || this.notifications === "<delete>"){
			this.notifications = "[]";
		}
		
		var notificationsJson = JSON.parse(this.notifications);
		notificationsJson.push(itemDef);

		this.notifications = JSON.stringify(notificationsJson);
	*}
}

/**
 * Class for Notify
 */
class org.scn.community.basics.Notify extends org.scn.community.shared.Component {
	void alert( /* Text to be shown */ String text){*
		this["msgtype"] = "alert";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	void information( /* Text to be shown */ String text){*
		this["msgtype"] = "information";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	void error( /* Text to be shown */ String text){*
		this["msgtype"] = "error";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	void warning( /* Text to be shown */ String text){*
		this["msgtype"] = "warning";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	void notification( /* Text to be shown */ String text){*
		this["msgtype"] = "notification";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	void success( /* Text to be shown */ String text){*
		this["msgtype"] = "success";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
}

/**
 * Class for Open Street Map
 */
class org.scn.community.basics.Map extends org.scn.community.shared.Component {
	
	/**
	 * Zooms in the map
	 */
	void zoomIn() {*
		this.zoom = this.zoom + 1;
	*}
	
	/**
	 * Zooms out the map
	 */
	void zoomOut() {*
		this.zoom = this.zoom - 1;
	*}

	/**
	 * Moves the view on the map in the left direction
	 */
	void panLeft() {*
		this.panAction = this.panAction + 1; 
		this.pan = "0L00";
	*}

	/**
	 * Moves the view on the map in the right direction
	 */
	void panRight() {*
		this.panAction = this.panAction + 1; 
		this.pan = "00R0";
	*}
	
	/**
	 * Moves the view on the map in the up direction
	 */
	void panUp() {*
		this.panAction = this.panAction + 1; 
		this.pan = "U000";
	*}

	/**
	 * Moves the view on the map in the down direction
	 */
	void panDown() {*
		this.panAction = this.panAction + 1; 
		this.pan = "000D";
	*}

	/**
	 * Adds a new location. Keep in mind key should be unique.
	 * 
 	<example>
	You want to add 2 locations
	<code>
	OSMAP_1.addLocation("MADRIT", "Madrit", "", 40.4, -3.7);	<br>
	OSMAP_1.addLocation("WALLDORF", "SAP SE Headquaters", "SAP.jpg", 49.293417, 8.642384);	<br>
	</code>
	</example>
	 */
	void addLocation (
			/**Element Key (must be unique)*/String elementKey, 
			/**Element text*/String elementText, 
			/**Image URL, if not set, no image*/String imageUrl, 
			/**Latitude (horizontal)*/float latitude,
			/**Longitide (vertical)*/float longitude
		) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"lat": latitude,
			"long": longitude
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Moves the map to the given location by key
	 */
	void moveTo (
			/**key which schould be moved to*/String key) {*
		this.moveAction = this.moveAction + 1;
		this.moveTo = key
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
}

/**
 * Class for Paginator
 */
class org.scn.community.basics.Paginator extends org.scn.community.shared.Component {
	
	/** Sets the current page number */
	void setCurrentPage(
		/** Current page number */ int currentPage) {*
		this.currentPage = currentPage;	
	*}
	
	/** Returns the current page number */
	int getCurrentPage() {*
		return this.currentPage;	
	*}

	/** Sets the overall number of pages that are embedded into the parent control */
	void setNumberOfPages(
		/** Overall number of pages */ int numberOfPages) {*
		this.numberOfPages = numberOfPages;	
	*}
	
	/** Returns the overall number of pages that are embedded into the parent control */
	int getNumberOfPages() {*
		return this.numberOfPages;	
	*}
}

/**
 * Class for PasswordField
 */
class org.scn.community.basics.PasswordField extends org.scn.community.shared.Component {

	/** Sets the enabled value */
	void setEnabled(
		/** Editable value */ boolean enabled) {*
		this.enabled = enabled;
	*}
	
	/** Returns the enabled value */
	boolean isEnabled() {*
		return this.enabled;
	*}
	
	/** Sets the editable value */
	void setEditable(
		/** Editable value */ boolean editable) {*
		this.editable = editable;
	*}
	
	/** Returns the editable value */
	boolean isEditable() {*
		return this.editable;
	*}
	
	/** returns value */
	String getValue () {*
		return this.value;	
	*}
		
	/** sets value */
	void setValue (String value) {*
		this.value = value;	
	*}

	/** returns tooltip */
	String getTooltip () {*
		return this.tooltip;	
	*}
	
	/** sets the tooltip */
	void setTooltip (String tooltip) {*
		this.tooltip = tooltip;	
	*}
}

/**
 * Class for ProgressIndicator
 */
class org.scn.community.basics.ProgressIndicator extends org.scn.community.shared.Component {

	/** Sets the percentage value of the progress bar */
	void setPercentValue(
		/** Percent value */ int percentValue) {*
		this.percentValue = percentValue;	
	*}
	
	/** Returns the percentage value of the progress bar */
	int getPercentValue() {*
		return this.percentValue;	
	*}
	
	/** Sets the text value displayed in the bar */
	void setDisplayValue(
		/** Display value */ String displayValue) {*
		this.displayValue = displayValue;	
	*}
	
	/** Returns the text value displayed in the bar */
	String getDisplayValue() {*
		return this.displayValue;	
	*}
}
class org.scn.community.basics.QRCode extends org.scn.community.shared.Component {
	/**
	 * Sets QRCode Text
	 */	
	void setText( /* Text */ String text){*
		this.text = text;
	*}
	/**
	 * Gets QRCode Text
	 */	
	String getText() {*
		return this.text;
	*}
	/**
	 * Sets Fill Color
	 */	
	void setFill( /* Color */ String color){*
		this.fill = color;
	*}
	/**
	 * Gets Fill Color
	 */	
	String getFill() {*
		return this.fill;
	*}
	/**
	 * Sets Background Color
	 */	
	void setBackground( /* Color */ String color){*
		this.background = color;
	*}
	/**
	 * Gets Background Color
	 */	
	String getBackground() {*
		return this.background;
	*}
	/**
	 * Sets Radius
	 */	
	void setRadius( /* Radius (0.0 - 0.5) */ float radius){*
		this.radius = radius;
	*}
	/**
	 * Gets Radius
	 */	
	float getRadius() {*
		return this.fill;
	*}
	/**
	 * Sets Quiet Amount
	 */	
	void setQuiet( /* Amount */ int amount){*
		this.quiet = amount;
	*}
	/**
	 * Gets Quiet Amount
	 */	
	int getQuiet() {*
		return this.quiet;
	*}
	/**
	 * Sets Print-Only
	 */	
	void setPrintOnly( /* Print Only (true/false) */ boolean printOnly){*
		this.printOnly = printOnly;
	*}
	/**
	 * Gets Print-Only
	 */	
	String getPrintOnly() {*
		return this.printOnly;
	*}
}
/**
 * Class for RangeSlider (extension of slider)
 */
class org.scn.community.basics.RangeSlider extends org.scn.community.shared.Component {

	/** Sets the editable value */
	void setEditable(
		/** Editable value */ boolean editable) {*
		this.editable = editable;
	*}
	
	/** Returns the editable value */
	boolean isEditable() {*
		return this.editable;
	*}

	/** Sets the minimum value. */
	void setMinimumValue(
		/** Minimum value */ float min) {*
		this.min = min;
	*}
	
	/** Returns the minimum value. */
	float getMinimumValue() {*
		return this.min;
	*}

	/** Sets the maximum value. */
	void setMaximumValue(
		/** Maximum value */ float max) {*
		this.max = max;
	*}
	
	/** Returns the maximum value. */
	float getMaximumValue() {*
		return this.max;
	*}

	/** Sets the value. */
	void setValue(
		/** Value */ float value) {*
		this.value = value;
	*}
	/** Sets the value from integer. */
	void setValueAsInt(
		/** Value */ int value) {*
		this.value = parseFloat(value);
	*}
	
	/** Returns the value. */
	float getValue() {*
		return this.value;
	*}
	
	/** Returns the value as integer. */
	int getValueAsInt() {*
		return parseInt(Math.floor(this.value));
	*}
	
	/** Sets the second value. */
	void setValue2(
		/** Second value */ float value2) {*
		this.value2 = value2;
	*}
	/** Sets the second value from integer. */
	void setValue2AsInt(
		/** Value */ int value) {*
		this.value2 = parseFloat(value);
	*}

	/** Returns the second value. */
	float getValue2() {*
		return this.value2;
	*}
	
	/** Returns the second value as integer. */
	int getValue2AsInt() {*
		return parseInt(Math.floor(this.value2));
	*}

	/** Returns the live value. */
	float getLiveValue() {*
		return this.liveValue;
	*}
	
	/** Returns the live value as integer. */
	int getLiveValueAsInt() {*
		return parseInt(Math.floor(this.liveValue));
	*}
	
	/** Returns the second live value. */
	float getLiveValue2() {*
		return this.liveValue2;
	*}
	
	/** Returns the second live value as integer. */
	int getLiveValue2AsInt() {*
		return parseInt(Math.floor(this.liveValue2));
	*}

	/** Sets the total units value. */
	void setTotalUnits(
		/** Total units value */ int totalUnits) {*
		this.totalUnits = totalUnits;
	*}
	
	/** Returns the total units value. */
	int getTotalUnits() {*
		return this.totalUnits;
	*}

	/** Sets the step labels value. */
	void setStepLabels(
		/** Step labels value */ boolean stepLabels) {*
		this.stepLabels = stepLabels;
	*}
	
	/** Returns the step labels value. */
	boolean isStepLabels() {*
		return this.stepLabels;
	*}

	/** Sets the vertical value. */
	void setVertical(
		/** Vertical value */ boolean vertical) {*
		this.vertical = vertical;
	*}
	
	/** Returns the vertical value. */
	boolean isVertical() {*
		return this.vertical;
	*}

	/** Sets the small step width value. */
	void setSmallStepWidth(
		/** Small step width value */ float smallStepWidth) {*
		this.smallStepWidth = smallStepWidth;
	*}
	
	/** Returns the small step width value. */
	float getSmallStepWidth() {*
		return this.smallStepWidth;
	*}
}

/**
 * Class for RatingIndicator
 */
class org.scn.community.basics.RatingIndicator extends org.scn.community.shared.Component {

	/** Sets the editable value */
	void setEditable(
		/** Editable value */ boolean editable) {*
		this.editable = editable;
	*}
	
	/** Returns the editable value */
	boolean isEditable() {*
		return this.editable;
	*}

	/** Sets the rating value */
	void setValue(
		/** Rating value */ float value) {*
		this.value = value;	
	*}
	
	/** Returns the rating value */
	float getValue() {*
		return this.value;	
	*}
}

/**
 * Generated ZTL Class for RoadMap
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.RoadMap extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/** Adds a root element containing key [String], text [String], visible [boolean], enabled [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	ROADMAP.addStep(key [String], text [String], visible [boolean], enabled [boolean]);<br>
	ROADMAP.addStep(key [String], text [String], visible [boolean], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addStep (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
			};

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ROADMAP.removeStep(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeStep (
			String key
			) {*

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ROADMAP.insertStep(index [int], key [String], text [String], visible [boolean], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertStep (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) {*

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.DElementsContent = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Step<br/>
	 */
	void updateStep (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
		};

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getStepAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Steps As JSON String
	 */	
	String getStepsAsJSON() {*
		var jsonObject = JSON.parse(this.DElementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Visible keys<br/>
	 */
	void setVisibleStepKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].visible = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Visible Key<br/>
	 */
	void setVisibleStepKey (
			/**/ String key,
			/**/ boolean visible
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].visible = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Visible keys<br/>
	 */
	void cleanAllVisibleStepKeys (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Visible keys<br/>
	 */
	org.scn.pack.KeyArray getVisibleStepKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].visible == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Enabled keys<br/>
	 */
	void setEnabledStepKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled Key<br/>
	 */
	void setEnabledStepKey (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled keys<br/>
	 */
	void cleanAllEnabledStepKeys (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.pack.KeyArray getEnabledStepKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Sets Selected Step Key Property
	 */	
	void setSelectedKey( /**Selected Step Key*/ String selectedKey){*
		this.DSelectedKey = selectedKey;
	*}

	/**
	 * Gets Selected Step Key Property
	 */	
	String getSelectedKey() {*
		return this.DSelectedKey;
	*}

	/**
	 * Sets Number Of Visible Steps Property
	 */	
	void setNumberOfVisibleSteps( /**Number Of Visible Steps*/ String numberOfVisibleSteps){*
		this.numberOfVisibleSteps = numberOfVisibleSteps;
	*}

	/**
	 * Gets Number Of Visible Steps Property
	 */	
	String getNumberOfVisibleSteps() {*
		return this.numberOfVisibleSteps;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for RSSFeedReader
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.RSSFeedReader extends org.scn.community.shared.Component {

	/**
	 * Sets RSS Feed URL Property
	 */	
	void setFeedUrl( /**RSS Feed URL*/ String feedUrl){*
		this.feedUrl = feedUrl;
	*}

	/**
	 * Gets RSS Feed URL Property
	 */	
	String getFeedUrl() {*
		return this.feedUrl;
	*}

	/**
	 * Sets Use Build-In Xsl File Property
	 */	
	void setUseBuildInXsl( /**Use Build-In Xsl File*/ boolean useBuildInXsl){*
		this.useBuildInXsl = useBuildInXsl;
	*}

	/**
	 * Gets Use Build-In Xsl File Property
	 */	
	boolean isUseBuildInXsl() {*
		return this.useBuildInXsl;
	*}

	/**
	 * Sets XSL URL Property
	 */	
	void setXslUrl( /**XSL URL*/ String xslUrl){*
		this.xslUrl = xslUrl;
	*}

	/**
	 * Gets XSL URL Property
	 */	
	String getXslUrl() {*
		return this.xslUrl;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for SegmentedButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.SegmentedButton extends org.scn.community.shared.Component {

	/**
	 * Clean All Nodes from the Array.
	 */	
	void cleanAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.DDefaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.DDefaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], image [String], selected [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	SEGMENTEDBUTTON.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);<br>
	SEGMENTEDBUTTON.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);
	</code>
	</example>
	 */
	void addItem (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image*/String image, 
			/**Selected*/boolean selected
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			image:image, 
			selected:selected 
			};
	
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], image [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	SEGMENTEDBUTTON.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	SEGMENTEDBUTTON.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addButton (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image*/String image, 
			/**Selected*/boolean selected
			) {*		
		
		this.addItem("ROOT", key, 
			text, 
			image, 
			selected);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	SEGMENTEDBUTTON.removeItem(String key);<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	SEGMENTEDBUTTON.removeButton(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeButton (
			String key
			) {*		
		
		this.removeItem(key);
	*}

	/**
	 * Gets Buttons As JSON String
	 */	
	String getButtonsAsJSON() {*
		var jsonObject = JSON.parse(this.DElementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Selected keys<br/>
	 */
	void setSelectedButtonKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected Key<br/>
	 */
	void setSelectedButtonKey (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected keys<br/>
	 */
	void cleanAllSelectedButtonKeys (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.pack.KeyArray getSelectedButtonKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Selected keys<br/>
	 */
	void setSelectedItemKeys (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected Key<br/>
	 */
	void setSelectedItemKey (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected keys<br/>
	 */
	void cleanAllSelectedItemKeys (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.pack.KeyArray getSelectedItemKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}


	/**
	 * Sets Size Of The Image Property by String
	 */	
	void setImageSizeByString( /**Size Of The Image*/ String imageSize){*
		this.DImageSize = imageSize;
	*}

	/**
	 * Gets Size Of The Image Property as String
	 */	
	String getImageSizeAsString() {*
		return this.DImageSize;
	*}
	
	/**
	 * Sets Size Of The Image Property by Choice Option
	 */	
	void setImageSize( /**Size Of The Image*/ org_scn_community_shared_ImageSizeEnumfield imageSize){*
		this.DImageSize = imageSize;
	*}
	
	/**
	 * Gets Size Of The Image Property as Choice Option
	 */	
	org_scn_community_shared_ImageSizeEnumfield getImageSize() {*
		return this.DImageSize;
	*}

	/**
	 * Gets Technical Property For Pressed Button Key Property
	 */	
	String getPressedButtonKey() {*
		return this.DPressedButtonKey;
	*}

	/**
	 * Gets Technical Property For Pressed Item Key Property
	 */	
	String getPressedItemKey() {*
		return this.DPressedItemKey;
	*}

	/**
	 * Gets Technical Property For Selected Keys Property
	 */	
	String getSelectedKeys() {*
		return this.DSelectedKeys;
	*}

	/**
	 * Sets Selection Type Property by String
	 */	
	void setSelectionTypeByString( /**Selection Type*/ String selectionType){*
		this.DSelectionType = selectionType;
	*}

	/**
	 * Gets Selection Type Property as String
	 */	
	String getSelectionTypeAsString() {*
		return this.DSelectionType;
	*}
	
	/**
	 * Sets Selection Type Property by Choice Option
	 */	
	void setSelectionType( /**Selection Type*/ org_scn_community_shared_SelectionTypeEnumfield selectionType){*
		this.DSelectionType = selectionType;
	*}
	
	/**
	 * Gets Selection Type Property as Choice Option
	 */	
	org_scn_community_shared_SelectionTypeEnumfield getSelectionType() {*
		return this.DSelectionType;
	*}

	/**
	 * Sets Use Images Property
	 */	
	void setWithImages( /**Use Images*/ boolean withImages){*
		this.DWithImages = withImages;
	*}

	/**
	 * Gets Use Images Property
	 */	
	boolean isWithImages() {*
		return this.DWithImages;
	*}








	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Class for Slider
 */
class org.scn.community.basics.Slider extends org.scn.community.shared.Component {

	/** Sets the editable value */
	void setEditable(
		/** Editable value */ boolean editable) {*
		this.editable = editable;
	*}
	
	/** Returns the editable value */
	boolean isEditable() {*
		return this.editable;
	*}

	/** Sets the minimum value. */
	void setMinimumValue(
		/** Minimum value */ float min) {*
		this.min = min;
	*}
	
	/** Returns the minimum value. */
	float getMinimumValue() {*
		return this.min;
	*}

	/** Sets the maximum value. */
	void setMaximumValue(
		/** Maximum value */ float max) {*
		this.max = max;
	*}
	
	/** Returns the maximum value. */
	float getMaximumValue() {*
		return this.max;
	*}

	/** Sets the value. */
	void setValue(
		/** Value */ float value) {*
		this.value = value;
	*}
	/** Sets the value from integer. */
	void setValueAsInt(
		/** Value */ int value) {*
		this.value = parseFloat(value);
	*}
	
	/** Returns the value. */
	float getValue() {*
		return this.value;
	*}
	/** Returns the value as an integer. */
	int getValueAsInt() {*
		return parseInt(Math.floor(this.value));
	*}
	
	/** Returns the live value. */
	float getLiveValue() {*
		return this.liveValue;
	*}
	
	/** Returns the live value as integer. */
	int getLiveValueAsInt() {*
		return parseInt(Math.floor(this.liveValue));
	*}

	/** Sets the total units value. */
	void setTotalUnits(
		/** Total units value */ int totalUnits) {*
		this.totalUnits = totalUnits;
	*}
	
	/** Returns the total units value. */
	int getTotalUnits() {*
		return this.totalUnits;
	*}

	/** Sets the step labels value. */
	void setStepLabels(
		/** Step labels value */ boolean stepLabels) {*
		this.stepLabels = stepLabels;
	*}
	
	/** Returns the step labels value. */
	boolean isStepLabels() {*
		return this.stepLabels;
	*}

	/** Sets the vertical value. */
	void setVertical(
		/** Vertical value */ boolean vertical) {*
		this.vertical = vertical;
	*}
	
	/** Returns the vertical value. */
	boolean isVertical() {*
		return this.vertical;
	*}

	/** Sets the small step width value. */
	void setSmallStepWidth(
		/** Small step width value */ float smallStepWidth) {*
		this.smallStepWidth = smallStepWidth;
	*}
	
	/** Returns the small step width value. */
	float getSmallStepWidth() {*
		return this.smallStepWidth;
	*}
}

/**
 * Class for TextArea
 */
class org.scn.community.basics.TextArea extends org.scn.community.shared.Component {
	
	/** Sets the enabled value */
	void setEnabled(
		/** Editable value */ boolean enabled) {*
		this.enabled = enabled;
	*}
	
	/** Returns the enabled value */
	boolean isEnabled() {*
		return this.enabled;
	*}
	
	/** Sets the editable value */
	void setEditable(
		/** Editable value */ boolean editable) {*
		this.editable = editable;
	*}
	
	/** Returns the editable value */
	boolean isEditable() {*
		return this.editable;
	*}

	/** sets the value */
	void setValue (String value) {*
		this.value = value;	
	*}

	/** returns the value */
	String getValue () {*
		return this.value;	
	*}
}

/**
 * Class for ToggleButton
 */
class org.scn.community.basics.ToggleButton extends org.scn.community.shared.Component {
	/** returns the pressed state 
    <example>
	You want to get the pressed state to decide what to do
	<code>
    var pressed = TOGGLEBUTTON_1.getPressed();
	
	APPLICATION.createInfoMessage("Pressed: " + pressed);
	
	if(pressed) {
		// do something
	} else {
		// do other something
	}
	</code>
	</example>
	*/
	boolean getPressed () {*
		return this.pressed;	
	*}
	
	/** sets the pressed state */
	void setPressed (boolean value) {*
		this.pressed = value;	
	*}
	
	/** sets the enabled flag */
	void setEnabled (boolean value) {*
		this.enabled = value;	
	*}

	/** returns the enabled flag */
	boolean getEnabled () {*
		return this.enabled;	
	*}
	
	/** sets the text */
	void setText (String text) {*
		this.text = text;	
	*}

	/** returns the text */
	String getText () {*
		return this.text;	
	*}
}

/**
 * Generated ZTL Class for Tree
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Tree extends org.scn.community.shared.Component {

	/**
	 * Clean All Nodes from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.nodesContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.nodesContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Picture Property
	 */	
	void setDefaultImage( /**Url For Default Picture*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Picture Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/**
	 * Gets Technical Proprty For Expanded Key Property
	 */	
	String getExpandedKey() {*
		return this.expandedKey;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	TREE.addSubNode(parentKey [String], key [String], text [String], url [String]);<br>
	TREE.addSubNode(parentKey [String], key [String], text [String], url [String]);
	</code>
	</example>
	 */
	void addSubNode (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url 
			};
	
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	TREE.addNode(key [String], text [String], url [String]);<br>
	TREE.addNode(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addNode (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		this.addSubNode("ROOT", key, 
			text, 
			url);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	TREE.removeSubNode(String key);<br>
	</code>
	</example>
	 */
	void removeSubNode (
			String key
			) {*		
		
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	TREE.removeNode(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeNode (
			String key
			) {*		
		
		this.removeSubNode(key);
	*}

	/**
	 * Gets Nodes As JSON String
	 */	
	String getNodesAsJSON() {*
		var jsonObject = JSON.parse(this.nodesContent);
		return JSON.stringify(jsonObject, null, 4);
	*}
	






	/**
	 * Gets Technical Proprty For Roundtrip Property
	 */	
	String getRoundtrip() {*
		return this.roundtrip;
	*}

	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions

	/**
	 * Adds a tree node containing Key, Text, Image Url, Parent Node and is Leaf information.<br/>
	 * You need to specify a unique and existing parent node.<br/>
	 * if Parent is set to "ROOT" then the node will be inserted into "ROOT".<br/>
	 * <example><br/>
	 * You want to add 2 nodes, second one is a child of fist one<br/>
	 * <code><br/>
	 * TREE_1.addNode("KEY1", "First Node", "", "ROOT", true);<br/>
	 * TREE_1.addNode("KEY2", "First Node", "", "KEY1", true);<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	void addNode (
			/*Node Key (must be unique)*/ String nodeKey,
			/*Node text*/ String nodeText,
			/*Image URL if not set no image*/ String imageUrl,
			/*The Key of the parent Node*/ String parentNodeKey,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf
			)
	{*
		if(isLeaf == undefined) {
			isLeaf = true;
		}
		
		var itemDef = { 
			"key": nodeKey, 
			"text": nodeText, 
			"url": imageUrl,
			"parent": parentNodeKey,
			"leaf": isLeaf
			};
	
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var nodesJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < nodesJson.length ; i++){
			if (nodesJson[i].key == nodeKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			nodesJson.push(itemDef);
		}
	
		this.nodesContent = JSON.stringify(nodesJson);
	*}
}

/**
 * Class for ValueHelpField
 */
class org.scn.community.basics.TriStateCheckBox extends org.scn.community.shared.Component {
	
	/** Sets the enabled value */
	void setEnabled(
		/** Editable value */ boolean enabled) {*
		this.enabled = enabled;
	*}
	
	/** Returns the enabled value */
	boolean isEnabled() {*
		return this.enabled;
	*}
	
	/** Sets the editable value */
	void setEditable(
		/** Editable value */ boolean editable) {*
		this.editable = editable;
	*}
	
	/** Returns the editable value */
	boolean isEditable() {*
		return this.editable;
	*}
	
	/** returns text */
	String getText () {*
		return this.text;	
	*}
		
	/** sets text */
	void setText (String value) {*
		this.text = value;	
	*}

	/** returns tooltip */
	String getTooltip () {*
		return this.tooltip;	
	*}
	
	/** sets the tooltip */
	void setTooltip (String tooltip) {*
		this.tooltip = tooltip;	
	*}
	
	/**
	 * Sets the selection state - CHECKED | UNCHECKED | MIXED
	 */
	void setSelectionState (org_scn_community_shared_SelectionStateEnumfield type) {*
		this.selectionState = type;
	*}
	
	/**
	 * Returns the selection state - CHECKED | UNCHECKED | MIXED
	 */
	org_scn_community_shared_SelectionStateEnumfield getSelectionState() {*
		return this.selectionState;
	*}
}

/**
 * Class for ValiInput
 */
class org.scn.community.basics.ValiInput extends org.scn.community.shared.Component {
	
	/** returns value */
	String getValue () {*
		return this.DValue;	
	*}
		
	/** sets value */
	void setValue (String value) {*
		this.DValue = value;	
	*}

	/** returns tooltip */
	String getTooltip () {*
		return this.DTooltip;	
	*}
	
	/** sets the tooltip */
	void setTooltip (String tooltip) {*
		this.DTooltip = tooltip;	
	*}

	/** sets the valid flag */
	void setValidState (String value) {*
		if(value == "None" || value == "Error" || value == "Success" || value == "Warning") {
			this.DValidState = value;	
		} else {
			this.DValidState = "None";	
		}
	*}

	/** returns the valid flag */
	String getValidState () {*
		return this.DValidState;	
	*}
}

/**
 * Class for ValueHelpField
 */
class org.scn.community.basics.ValueHelpField extends org.scn.community.shared.Component {
	
	/** Sets the enabled value */
	void setEnabled(
		/** Editable value */ boolean enabled) {*
		this.enabled = enabled;
	*}
	
	/** Returns the enabled value */
	boolean isEnabled() {*
		return this.enabled;
	*}
	
	/** Sets the editable value */
	void setEditable(
		/** Editable value */ boolean editable) {*
		this.editable = editable;
	*}
	
	/** Returns the editable value */
	boolean isEditable() {*
		return this.editable;
	*}
	
	/** returns value */
	String getValue () {*
		return this.value;	
	*}
		
	/** sets value */
	void setValue (String value) {*
		this.value = value;	
	*}

	/** returns tooltip */
	String getTooltip () {*
		return this.tooltip;	
	*}
	
	/** sets the tooltip */
	void setTooltip (String tooltip) {*
		this.tooltip = tooltip;	
	*}
}

/**
 * Class for WorldTime
 */
class org.scn.community.basics.WorldTime extends org.scn.community.shared.Component {
	
	/** Set base timezone with given utc offset.  

 	<example>
	<code>
	TIME_1.setOffset("-2").
	</code>
	</example>
	 */
	void setOffset(String utc_offset) {*
		this.utcoffset = utc_offset;
	*}
}
