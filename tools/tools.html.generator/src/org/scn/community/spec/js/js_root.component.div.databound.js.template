/**
 * Copyright 2014 Scn Community Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */
 
 (function(){

var myComponentData = org_scn_community_require.knownComponents.%COMP-package%.%COMP-id%;

%COMP-id% = function () {

	var that = this;
	
	this.init = function() {
		// define root component
		that._oRoot = {};
	
		/* COMPONENT SPECIFIC CODE - START(initDesignStudio)*/
		// this.addStyleClass("scn-pack-?");
			
		/* COMPONENT SPECIFIC CODE - END(initDesignStudio)*/
	};

	this.afterUpdate = function() {
		/* COMPONENT SPECIFIC CODE - START(afterDesignStudioUpdate)*/

		that.flatData = {};

		/* COMPONENT SPECIFIC CODE - START(afterDesignStudioUpdate)*/
		var data = that.getDataCellList();
		var metadata = that.getMetadata();

		if(!org_scn_community_databound.hasData (data, metadata)) {
			that.flatData = org_scn_community_databound.getSampleDataFlat (that, that.processData, that.afterPrepare);
			return;
		} else {
			var options = org_scn_community_databound.initializeOptions ();
			options.ignoreResults = that.getIgnoreResults();
			
			// flatData = org_scn_community_databound.flatten (data, options);

			that.processData (that.flatData, that.afterPrepare, that);
			return;
		}

		/* COMPONENT SPECIFIC CODE - START(afterDesignStudioUpdate)*/

		org_scn_community_basics.resizeContentAbsoluteLayout(that, that._oRoot, that.onResize);
	};
	
	/* COMPONENT SPECIFIC CODE - START METHODS*/

	processData = function (flatData, afterPrepare, owner) {
		var that = owner;

		if(flatData == undefined) {
			var loadingResultset = %RESULT_SET_OR_DIMENSIONS%;
				
			if(loadingREsultset){
				var options = org_scn_community_databound.initializeOptions();
				options.swapAxes = that.getSwapAxes();
				
				that._flatData = org_scn_community_databound.flatten(that.getData(), options);
			} else {
				var lDimensions = that.getDElements();
		
				var options = org_scn_community_databound.initializeOptions();
				options.iMaxNumber = that.getDMaxMembers();
				options.allKeys = true;
				options.idPrefix = that.getId();
				options.iDuplicates = "Sum";
				
				if(that.getDDisplayText() == "Text_Value") {
					options.iDisplayText = "Text (Value)";
				} else if(that.getDDisplayText() == "Text_Count") {
					options.iDisplayText = "Text (Count)";
				} else {
					options.iDisplayText = "Text";
				}
				
				options.iNullValues = that.getDZeroValuesMode();
			
				var dataList = that.getDataCellList();
				var metaData = that.getDSMetadata();
				
				that._flatData = org_scn_community_databound.getDataModelForDimensions(dataList, metaData, lDimensions, options);
			}
		} else {
			that._flatData = flatData;
		}
		
		// processing on data
		that.afterPrepare(that);
	};

	afterPrepare = function (owner) {
		var that = owner;
			
		// visualization on processed data 
	};

	that.onResize = function (width, height, parent) {
		// in case special resize code is required
	};

	/* COMPONENT SPECIFIC CODE - END METHODS*/

	org_scn_community_component_Core(that, myComponentData);
	
	return that;
};

define([myComponentData.requireName], function(%COMP-package%%COMP-id(lower)%){
	myComponentData.instance = %COMP-id%;
	return myComponentData.instance;
});

}).call(this);